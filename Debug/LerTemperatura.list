
LerTemperatura.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006508  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001604  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bcc  08007bcc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007bcc  08007bcc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bcc  08007bcc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bcc  08007bcc  00017bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bd0  08007bd0  00017bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000088  08007c5c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08007c5c  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d28f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f5  00000000  00000000  0002d33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  0002f538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  000302c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010636  00000000  00000000  00030f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010569  00000000  00000000  00041566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061aaa  00000000  00000000  00051acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035cc  00000000  00000000  000b35cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080065b0 	.word	0x080065b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	080065b0 	.word	0x080065b0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_fmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	464f      	mov	r7, r9
 8000238:	4646      	mov	r6, r8
 800023a:	46d6      	mov	lr, sl
 800023c:	0244      	lsls	r4, r0, #9
 800023e:	0045      	lsls	r5, r0, #1
 8000240:	b5c0      	push	{r6, r7, lr}
 8000242:	0a64      	lsrs	r4, r4, #9
 8000244:	1c0f      	adds	r7, r1, #0
 8000246:	0e2d      	lsrs	r5, r5, #24
 8000248:	0fc6      	lsrs	r6, r0, #31
 800024a:	2d00      	cmp	r5, #0
 800024c:	d100      	bne.n	8000250 <__aeabi_fmul+0x1c>
 800024e:	e08d      	b.n	800036c <__aeabi_fmul+0x138>
 8000250:	2dff      	cmp	r5, #255	; 0xff
 8000252:	d100      	bne.n	8000256 <__aeabi_fmul+0x22>
 8000254:	e092      	b.n	800037c <__aeabi_fmul+0x148>
 8000256:	2300      	movs	r3, #0
 8000258:	2080      	movs	r0, #128	; 0x80
 800025a:	4699      	mov	r9, r3
 800025c:	469a      	mov	sl, r3
 800025e:	00e4      	lsls	r4, r4, #3
 8000260:	04c0      	lsls	r0, r0, #19
 8000262:	4304      	orrs	r4, r0
 8000264:	3d7f      	subs	r5, #127	; 0x7f
 8000266:	0278      	lsls	r0, r7, #9
 8000268:	0a43      	lsrs	r3, r0, #9
 800026a:	4698      	mov	r8, r3
 800026c:	007b      	lsls	r3, r7, #1
 800026e:	0e1b      	lsrs	r3, r3, #24
 8000270:	0fff      	lsrs	r7, r7, #31
 8000272:	2b00      	cmp	r3, #0
 8000274:	d100      	bne.n	8000278 <__aeabi_fmul+0x44>
 8000276:	e070      	b.n	800035a <__aeabi_fmul+0x126>
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d100      	bne.n	800027e <__aeabi_fmul+0x4a>
 800027c:	e086      	b.n	800038c <__aeabi_fmul+0x158>
 800027e:	4642      	mov	r2, r8
 8000280:	00d0      	lsls	r0, r2, #3
 8000282:	2280      	movs	r2, #128	; 0x80
 8000284:	3b7f      	subs	r3, #127	; 0x7f
 8000286:	18ed      	adds	r5, r5, r3
 8000288:	2300      	movs	r3, #0
 800028a:	04d2      	lsls	r2, r2, #19
 800028c:	4302      	orrs	r2, r0
 800028e:	4690      	mov	r8, r2
 8000290:	469c      	mov	ip, r3
 8000292:	0031      	movs	r1, r6
 8000294:	464b      	mov	r3, r9
 8000296:	4079      	eors	r1, r7
 8000298:	1c68      	adds	r0, r5, #1
 800029a:	2b0f      	cmp	r3, #15
 800029c:	d81c      	bhi.n	80002d8 <__aeabi_fmul+0xa4>
 800029e:	4a76      	ldr	r2, [pc, #472]	; (8000478 <__aeabi_fmul+0x244>)
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	58d3      	ldr	r3, [r2, r3]
 80002a4:	469f      	mov	pc, r3
 80002a6:	0039      	movs	r1, r7
 80002a8:	4644      	mov	r4, r8
 80002aa:	46e2      	mov	sl, ip
 80002ac:	4653      	mov	r3, sl
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d00f      	beq.n	80002d2 <__aeabi_fmul+0x9e>
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d100      	bne.n	80002b8 <__aeabi_fmul+0x84>
 80002b6:	e0d7      	b.n	8000468 <__aeabi_fmul+0x234>
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d137      	bne.n	800032c <__aeabi_fmul+0xf8>
 80002bc:	2000      	movs	r0, #0
 80002be:	2400      	movs	r4, #0
 80002c0:	05c0      	lsls	r0, r0, #23
 80002c2:	4320      	orrs	r0, r4
 80002c4:	07c9      	lsls	r1, r1, #31
 80002c6:	4308      	orrs	r0, r1
 80002c8:	bce0      	pop	{r5, r6, r7}
 80002ca:	46ba      	mov	sl, r7
 80002cc:	46b1      	mov	r9, r6
 80002ce:	46a8      	mov	r8, r5
 80002d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002d2:	20ff      	movs	r0, #255	; 0xff
 80002d4:	2400      	movs	r4, #0
 80002d6:	e7f3      	b.n	80002c0 <__aeabi_fmul+0x8c>
 80002d8:	0c26      	lsrs	r6, r4, #16
 80002da:	0424      	lsls	r4, r4, #16
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	4644      	mov	r4, r8
 80002e0:	0424      	lsls	r4, r4, #16
 80002e2:	0c24      	lsrs	r4, r4, #16
 80002e4:	4643      	mov	r3, r8
 80002e6:	0027      	movs	r7, r4
 80002e8:	0c1b      	lsrs	r3, r3, #16
 80002ea:	4357      	muls	r7, r2
 80002ec:	4374      	muls	r4, r6
 80002ee:	435a      	muls	r2, r3
 80002f0:	435e      	muls	r6, r3
 80002f2:	1912      	adds	r2, r2, r4
 80002f4:	0c3b      	lsrs	r3, r7, #16
 80002f6:	189b      	adds	r3, r3, r2
 80002f8:	429c      	cmp	r4, r3
 80002fa:	d903      	bls.n	8000304 <__aeabi_fmul+0xd0>
 80002fc:	2280      	movs	r2, #128	; 0x80
 80002fe:	0252      	lsls	r2, r2, #9
 8000300:	4694      	mov	ip, r2
 8000302:	4466      	add	r6, ip
 8000304:	043f      	lsls	r7, r7, #16
 8000306:	041a      	lsls	r2, r3, #16
 8000308:	0c3f      	lsrs	r7, r7, #16
 800030a:	19d2      	adds	r2, r2, r7
 800030c:	0194      	lsls	r4, r2, #6
 800030e:	1e67      	subs	r7, r4, #1
 8000310:	41bc      	sbcs	r4, r7
 8000312:	0c1b      	lsrs	r3, r3, #16
 8000314:	0e92      	lsrs	r2, r2, #26
 8000316:	199b      	adds	r3, r3, r6
 8000318:	4314      	orrs	r4, r2
 800031a:	019b      	lsls	r3, r3, #6
 800031c:	431c      	orrs	r4, r3
 800031e:	011b      	lsls	r3, r3, #4
 8000320:	d400      	bmi.n	8000324 <__aeabi_fmul+0xf0>
 8000322:	e09b      	b.n	800045c <__aeabi_fmul+0x228>
 8000324:	2301      	movs	r3, #1
 8000326:	0862      	lsrs	r2, r4, #1
 8000328:	401c      	ands	r4, r3
 800032a:	4314      	orrs	r4, r2
 800032c:	0002      	movs	r2, r0
 800032e:	327f      	adds	r2, #127	; 0x7f
 8000330:	2a00      	cmp	r2, #0
 8000332:	dd64      	ble.n	80003fe <__aeabi_fmul+0x1ca>
 8000334:	0763      	lsls	r3, r4, #29
 8000336:	d004      	beq.n	8000342 <__aeabi_fmul+0x10e>
 8000338:	230f      	movs	r3, #15
 800033a:	4023      	ands	r3, r4
 800033c:	2b04      	cmp	r3, #4
 800033e:	d000      	beq.n	8000342 <__aeabi_fmul+0x10e>
 8000340:	3404      	adds	r4, #4
 8000342:	0123      	lsls	r3, r4, #4
 8000344:	d503      	bpl.n	800034e <__aeabi_fmul+0x11a>
 8000346:	0002      	movs	r2, r0
 8000348:	4b4c      	ldr	r3, [pc, #304]	; (800047c <__aeabi_fmul+0x248>)
 800034a:	3280      	adds	r2, #128	; 0x80
 800034c:	401c      	ands	r4, r3
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	dcbf      	bgt.n	80002d2 <__aeabi_fmul+0x9e>
 8000352:	01a4      	lsls	r4, r4, #6
 8000354:	0a64      	lsrs	r4, r4, #9
 8000356:	b2d0      	uxtb	r0, r2
 8000358:	e7b2      	b.n	80002c0 <__aeabi_fmul+0x8c>
 800035a:	4643      	mov	r3, r8
 800035c:	2b00      	cmp	r3, #0
 800035e:	d13d      	bne.n	80003dc <__aeabi_fmul+0x1a8>
 8000360:	464a      	mov	r2, r9
 8000362:	3301      	adds	r3, #1
 8000364:	431a      	orrs	r2, r3
 8000366:	4691      	mov	r9, r2
 8000368:	469c      	mov	ip, r3
 800036a:	e792      	b.n	8000292 <__aeabi_fmul+0x5e>
 800036c:	2c00      	cmp	r4, #0
 800036e:	d129      	bne.n	80003c4 <__aeabi_fmul+0x190>
 8000370:	2304      	movs	r3, #4
 8000372:	4699      	mov	r9, r3
 8000374:	3b03      	subs	r3, #3
 8000376:	2500      	movs	r5, #0
 8000378:	469a      	mov	sl, r3
 800037a:	e774      	b.n	8000266 <__aeabi_fmul+0x32>
 800037c:	2c00      	cmp	r4, #0
 800037e:	d11b      	bne.n	80003b8 <__aeabi_fmul+0x184>
 8000380:	2308      	movs	r3, #8
 8000382:	4699      	mov	r9, r3
 8000384:	3b06      	subs	r3, #6
 8000386:	25ff      	movs	r5, #255	; 0xff
 8000388:	469a      	mov	sl, r3
 800038a:	e76c      	b.n	8000266 <__aeabi_fmul+0x32>
 800038c:	4643      	mov	r3, r8
 800038e:	35ff      	adds	r5, #255	; 0xff
 8000390:	2b00      	cmp	r3, #0
 8000392:	d10b      	bne.n	80003ac <__aeabi_fmul+0x178>
 8000394:	2302      	movs	r3, #2
 8000396:	464a      	mov	r2, r9
 8000398:	431a      	orrs	r2, r3
 800039a:	4691      	mov	r9, r2
 800039c:	469c      	mov	ip, r3
 800039e:	e778      	b.n	8000292 <__aeabi_fmul+0x5e>
 80003a0:	4653      	mov	r3, sl
 80003a2:	0031      	movs	r1, r6
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d000      	beq.n	80003aa <__aeabi_fmul+0x176>
 80003a8:	e783      	b.n	80002b2 <__aeabi_fmul+0x7e>
 80003aa:	e792      	b.n	80002d2 <__aeabi_fmul+0x9e>
 80003ac:	2303      	movs	r3, #3
 80003ae:	464a      	mov	r2, r9
 80003b0:	431a      	orrs	r2, r3
 80003b2:	4691      	mov	r9, r2
 80003b4:	469c      	mov	ip, r3
 80003b6:	e76c      	b.n	8000292 <__aeabi_fmul+0x5e>
 80003b8:	230c      	movs	r3, #12
 80003ba:	4699      	mov	r9, r3
 80003bc:	3b09      	subs	r3, #9
 80003be:	25ff      	movs	r5, #255	; 0xff
 80003c0:	469a      	mov	sl, r3
 80003c2:	e750      	b.n	8000266 <__aeabi_fmul+0x32>
 80003c4:	0020      	movs	r0, r4
 80003c6:	f001 f887 	bl	80014d8 <__clzsi2>
 80003ca:	2576      	movs	r5, #118	; 0x76
 80003cc:	1f43      	subs	r3, r0, #5
 80003ce:	409c      	lsls	r4, r3
 80003d0:	2300      	movs	r3, #0
 80003d2:	426d      	negs	r5, r5
 80003d4:	4699      	mov	r9, r3
 80003d6:	469a      	mov	sl, r3
 80003d8:	1a2d      	subs	r5, r5, r0
 80003da:	e744      	b.n	8000266 <__aeabi_fmul+0x32>
 80003dc:	4640      	mov	r0, r8
 80003de:	f001 f87b 	bl	80014d8 <__clzsi2>
 80003e2:	4642      	mov	r2, r8
 80003e4:	1f43      	subs	r3, r0, #5
 80003e6:	409a      	lsls	r2, r3
 80003e8:	2300      	movs	r3, #0
 80003ea:	1a2d      	subs	r5, r5, r0
 80003ec:	4690      	mov	r8, r2
 80003ee:	469c      	mov	ip, r3
 80003f0:	3d76      	subs	r5, #118	; 0x76
 80003f2:	e74e      	b.n	8000292 <__aeabi_fmul+0x5e>
 80003f4:	2480      	movs	r4, #128	; 0x80
 80003f6:	2100      	movs	r1, #0
 80003f8:	20ff      	movs	r0, #255	; 0xff
 80003fa:	03e4      	lsls	r4, r4, #15
 80003fc:	e760      	b.n	80002c0 <__aeabi_fmul+0x8c>
 80003fe:	2301      	movs	r3, #1
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2b1b      	cmp	r3, #27
 8000404:	dd00      	ble.n	8000408 <__aeabi_fmul+0x1d4>
 8000406:	e759      	b.n	80002bc <__aeabi_fmul+0x88>
 8000408:	0022      	movs	r2, r4
 800040a:	309e      	adds	r0, #158	; 0x9e
 800040c:	40da      	lsrs	r2, r3
 800040e:	4084      	lsls	r4, r0
 8000410:	0013      	movs	r3, r2
 8000412:	1e62      	subs	r2, r4, #1
 8000414:	4194      	sbcs	r4, r2
 8000416:	431c      	orrs	r4, r3
 8000418:	0763      	lsls	r3, r4, #29
 800041a:	d004      	beq.n	8000426 <__aeabi_fmul+0x1f2>
 800041c:	230f      	movs	r3, #15
 800041e:	4023      	ands	r3, r4
 8000420:	2b04      	cmp	r3, #4
 8000422:	d000      	beq.n	8000426 <__aeabi_fmul+0x1f2>
 8000424:	3404      	adds	r4, #4
 8000426:	0163      	lsls	r3, r4, #5
 8000428:	d51a      	bpl.n	8000460 <__aeabi_fmul+0x22c>
 800042a:	2001      	movs	r0, #1
 800042c:	2400      	movs	r4, #0
 800042e:	e747      	b.n	80002c0 <__aeabi_fmul+0x8c>
 8000430:	2080      	movs	r0, #128	; 0x80
 8000432:	03c0      	lsls	r0, r0, #15
 8000434:	4204      	tst	r4, r0
 8000436:	d009      	beq.n	800044c <__aeabi_fmul+0x218>
 8000438:	4643      	mov	r3, r8
 800043a:	4203      	tst	r3, r0
 800043c:	d106      	bne.n	800044c <__aeabi_fmul+0x218>
 800043e:	4644      	mov	r4, r8
 8000440:	4304      	orrs	r4, r0
 8000442:	0264      	lsls	r4, r4, #9
 8000444:	0039      	movs	r1, r7
 8000446:	20ff      	movs	r0, #255	; 0xff
 8000448:	0a64      	lsrs	r4, r4, #9
 800044a:	e739      	b.n	80002c0 <__aeabi_fmul+0x8c>
 800044c:	2080      	movs	r0, #128	; 0x80
 800044e:	03c0      	lsls	r0, r0, #15
 8000450:	4304      	orrs	r4, r0
 8000452:	0264      	lsls	r4, r4, #9
 8000454:	0031      	movs	r1, r6
 8000456:	20ff      	movs	r0, #255	; 0xff
 8000458:	0a64      	lsrs	r4, r4, #9
 800045a:	e731      	b.n	80002c0 <__aeabi_fmul+0x8c>
 800045c:	0028      	movs	r0, r5
 800045e:	e765      	b.n	800032c <__aeabi_fmul+0xf8>
 8000460:	01a4      	lsls	r4, r4, #6
 8000462:	2000      	movs	r0, #0
 8000464:	0a64      	lsrs	r4, r4, #9
 8000466:	e72b      	b.n	80002c0 <__aeabi_fmul+0x8c>
 8000468:	2080      	movs	r0, #128	; 0x80
 800046a:	03c0      	lsls	r0, r0, #15
 800046c:	4304      	orrs	r4, r0
 800046e:	0264      	lsls	r4, r4, #9
 8000470:	20ff      	movs	r0, #255	; 0xff
 8000472:	0a64      	lsrs	r4, r4, #9
 8000474:	e724      	b.n	80002c0 <__aeabi_fmul+0x8c>
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	08006600 	.word	0x08006600
 800047c:	f7ffffff 	.word	0xf7ffffff

08000480 <__aeabi_fsub>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	46ce      	mov	lr, r9
 8000484:	4647      	mov	r7, r8
 8000486:	0243      	lsls	r3, r0, #9
 8000488:	0a5b      	lsrs	r3, r3, #9
 800048a:	024e      	lsls	r6, r1, #9
 800048c:	00da      	lsls	r2, r3, #3
 800048e:	4694      	mov	ip, r2
 8000490:	0a72      	lsrs	r2, r6, #9
 8000492:	4691      	mov	r9, r2
 8000494:	0045      	lsls	r5, r0, #1
 8000496:	004a      	lsls	r2, r1, #1
 8000498:	b580      	push	{r7, lr}
 800049a:	0e2d      	lsrs	r5, r5, #24
 800049c:	001f      	movs	r7, r3
 800049e:	0fc4      	lsrs	r4, r0, #31
 80004a0:	0e12      	lsrs	r2, r2, #24
 80004a2:	0fc9      	lsrs	r1, r1, #31
 80004a4:	09b6      	lsrs	r6, r6, #6
 80004a6:	2aff      	cmp	r2, #255	; 0xff
 80004a8:	d05b      	beq.n	8000562 <__aeabi_fsub+0xe2>
 80004aa:	2001      	movs	r0, #1
 80004ac:	4041      	eors	r1, r0
 80004ae:	428c      	cmp	r4, r1
 80004b0:	d039      	beq.n	8000526 <__aeabi_fsub+0xa6>
 80004b2:	1aa8      	subs	r0, r5, r2
 80004b4:	2800      	cmp	r0, #0
 80004b6:	dd5a      	ble.n	800056e <__aeabi_fsub+0xee>
 80004b8:	2a00      	cmp	r2, #0
 80004ba:	d06a      	beq.n	8000592 <__aeabi_fsub+0x112>
 80004bc:	2dff      	cmp	r5, #255	; 0xff
 80004be:	d100      	bne.n	80004c2 <__aeabi_fsub+0x42>
 80004c0:	e0d9      	b.n	8000676 <__aeabi_fsub+0x1f6>
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	04d2      	lsls	r2, r2, #19
 80004c6:	4316      	orrs	r6, r2
 80004c8:	281b      	cmp	r0, #27
 80004ca:	dc00      	bgt.n	80004ce <__aeabi_fsub+0x4e>
 80004cc:	e0e9      	b.n	80006a2 <__aeabi_fsub+0x222>
 80004ce:	2001      	movs	r0, #1
 80004d0:	4663      	mov	r3, ip
 80004d2:	1a18      	subs	r0, r3, r0
 80004d4:	0143      	lsls	r3, r0, #5
 80004d6:	d400      	bmi.n	80004da <__aeabi_fsub+0x5a>
 80004d8:	e0b4      	b.n	8000644 <__aeabi_fsub+0x1c4>
 80004da:	0180      	lsls	r0, r0, #6
 80004dc:	0987      	lsrs	r7, r0, #6
 80004de:	0038      	movs	r0, r7
 80004e0:	f000 fffa 	bl	80014d8 <__clzsi2>
 80004e4:	3805      	subs	r0, #5
 80004e6:	4087      	lsls	r7, r0
 80004e8:	4285      	cmp	r5, r0
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_fsub+0x6e>
 80004ec:	e0cc      	b.n	8000688 <__aeabi_fsub+0x208>
 80004ee:	1a2d      	subs	r5, r5, r0
 80004f0:	48b5      	ldr	r0, [pc, #724]	; (80007c8 <__aeabi_fsub+0x348>)
 80004f2:	4038      	ands	r0, r7
 80004f4:	0743      	lsls	r3, r0, #29
 80004f6:	d004      	beq.n	8000502 <__aeabi_fsub+0x82>
 80004f8:	230f      	movs	r3, #15
 80004fa:	4003      	ands	r3, r0
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d000      	beq.n	8000502 <__aeabi_fsub+0x82>
 8000500:	3004      	adds	r0, #4
 8000502:	0143      	lsls	r3, r0, #5
 8000504:	d400      	bmi.n	8000508 <__aeabi_fsub+0x88>
 8000506:	e0a0      	b.n	800064a <__aeabi_fsub+0x1ca>
 8000508:	1c6a      	adds	r2, r5, #1
 800050a:	2dfe      	cmp	r5, #254	; 0xfe
 800050c:	d100      	bne.n	8000510 <__aeabi_fsub+0x90>
 800050e:	e08d      	b.n	800062c <__aeabi_fsub+0x1ac>
 8000510:	0180      	lsls	r0, r0, #6
 8000512:	0a47      	lsrs	r7, r0, #9
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	05d0      	lsls	r0, r2, #23
 8000518:	4338      	orrs	r0, r7
 800051a:	07e4      	lsls	r4, r4, #31
 800051c:	4320      	orrs	r0, r4
 800051e:	bcc0      	pop	{r6, r7}
 8000520:	46b9      	mov	r9, r7
 8000522:	46b0      	mov	r8, r6
 8000524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000526:	1aa8      	subs	r0, r5, r2
 8000528:	4680      	mov	r8, r0
 800052a:	2800      	cmp	r0, #0
 800052c:	dd45      	ble.n	80005ba <__aeabi_fsub+0x13a>
 800052e:	2a00      	cmp	r2, #0
 8000530:	d070      	beq.n	8000614 <__aeabi_fsub+0x194>
 8000532:	2dff      	cmp	r5, #255	; 0xff
 8000534:	d100      	bne.n	8000538 <__aeabi_fsub+0xb8>
 8000536:	e09e      	b.n	8000676 <__aeabi_fsub+0x1f6>
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	04db      	lsls	r3, r3, #19
 800053c:	431e      	orrs	r6, r3
 800053e:	4643      	mov	r3, r8
 8000540:	2b1b      	cmp	r3, #27
 8000542:	dc00      	bgt.n	8000546 <__aeabi_fsub+0xc6>
 8000544:	e0d2      	b.n	80006ec <__aeabi_fsub+0x26c>
 8000546:	2001      	movs	r0, #1
 8000548:	4460      	add	r0, ip
 800054a:	0143      	lsls	r3, r0, #5
 800054c:	d57a      	bpl.n	8000644 <__aeabi_fsub+0x1c4>
 800054e:	3501      	adds	r5, #1
 8000550:	2dff      	cmp	r5, #255	; 0xff
 8000552:	d06b      	beq.n	800062c <__aeabi_fsub+0x1ac>
 8000554:	2301      	movs	r3, #1
 8000556:	4a9d      	ldr	r2, [pc, #628]	; (80007cc <__aeabi_fsub+0x34c>)
 8000558:	4003      	ands	r3, r0
 800055a:	0840      	lsrs	r0, r0, #1
 800055c:	4010      	ands	r0, r2
 800055e:	4318      	orrs	r0, r3
 8000560:	e7c8      	b.n	80004f4 <__aeabi_fsub+0x74>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d020      	beq.n	80005a8 <__aeabi_fsub+0x128>
 8000566:	428c      	cmp	r4, r1
 8000568:	d023      	beq.n	80005b2 <__aeabi_fsub+0x132>
 800056a:	0028      	movs	r0, r5
 800056c:	38ff      	subs	r0, #255	; 0xff
 800056e:	2800      	cmp	r0, #0
 8000570:	d039      	beq.n	80005e6 <__aeabi_fsub+0x166>
 8000572:	1b57      	subs	r7, r2, r5
 8000574:	2d00      	cmp	r5, #0
 8000576:	d000      	beq.n	800057a <__aeabi_fsub+0xfa>
 8000578:	e09d      	b.n	80006b6 <__aeabi_fsub+0x236>
 800057a:	4663      	mov	r3, ip
 800057c:	2b00      	cmp	r3, #0
 800057e:	d100      	bne.n	8000582 <__aeabi_fsub+0x102>
 8000580:	e0db      	b.n	800073a <__aeabi_fsub+0x2ba>
 8000582:	1e7b      	subs	r3, r7, #1
 8000584:	2f01      	cmp	r7, #1
 8000586:	d100      	bne.n	800058a <__aeabi_fsub+0x10a>
 8000588:	e10d      	b.n	80007a6 <__aeabi_fsub+0x326>
 800058a:	2fff      	cmp	r7, #255	; 0xff
 800058c:	d071      	beq.n	8000672 <__aeabi_fsub+0x1f2>
 800058e:	001f      	movs	r7, r3
 8000590:	e098      	b.n	80006c4 <__aeabi_fsub+0x244>
 8000592:	2e00      	cmp	r6, #0
 8000594:	d100      	bne.n	8000598 <__aeabi_fsub+0x118>
 8000596:	e0a7      	b.n	80006e8 <__aeabi_fsub+0x268>
 8000598:	1e42      	subs	r2, r0, #1
 800059a:	2801      	cmp	r0, #1
 800059c:	d100      	bne.n	80005a0 <__aeabi_fsub+0x120>
 800059e:	e0e6      	b.n	800076e <__aeabi_fsub+0x2ee>
 80005a0:	28ff      	cmp	r0, #255	; 0xff
 80005a2:	d068      	beq.n	8000676 <__aeabi_fsub+0x1f6>
 80005a4:	0010      	movs	r0, r2
 80005a6:	e78f      	b.n	80004c8 <__aeabi_fsub+0x48>
 80005a8:	2001      	movs	r0, #1
 80005aa:	4041      	eors	r1, r0
 80005ac:	42a1      	cmp	r1, r4
 80005ae:	d000      	beq.n	80005b2 <__aeabi_fsub+0x132>
 80005b0:	e77f      	b.n	80004b2 <__aeabi_fsub+0x32>
 80005b2:	20ff      	movs	r0, #255	; 0xff
 80005b4:	4240      	negs	r0, r0
 80005b6:	4680      	mov	r8, r0
 80005b8:	44a8      	add	r8, r5
 80005ba:	4640      	mov	r0, r8
 80005bc:	2800      	cmp	r0, #0
 80005be:	d038      	beq.n	8000632 <__aeabi_fsub+0x1b2>
 80005c0:	1b51      	subs	r1, r2, r5
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fsub+0x148>
 80005c6:	e0ae      	b.n	8000726 <__aeabi_fsub+0x2a6>
 80005c8:	2aff      	cmp	r2, #255	; 0xff
 80005ca:	d100      	bne.n	80005ce <__aeabi_fsub+0x14e>
 80005cc:	e0df      	b.n	800078e <__aeabi_fsub+0x30e>
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	4660      	mov	r0, ip
 80005d2:	04db      	lsls	r3, r3, #19
 80005d4:	4318      	orrs	r0, r3
 80005d6:	4684      	mov	ip, r0
 80005d8:	291b      	cmp	r1, #27
 80005da:	dc00      	bgt.n	80005de <__aeabi_fsub+0x15e>
 80005dc:	e0d9      	b.n	8000792 <__aeabi_fsub+0x312>
 80005de:	2001      	movs	r0, #1
 80005e0:	0015      	movs	r5, r2
 80005e2:	1980      	adds	r0, r0, r6
 80005e4:	e7b1      	b.n	800054a <__aeabi_fsub+0xca>
 80005e6:	20fe      	movs	r0, #254	; 0xfe
 80005e8:	1c6a      	adds	r2, r5, #1
 80005ea:	4210      	tst	r0, r2
 80005ec:	d171      	bne.n	80006d2 <__aeabi_fsub+0x252>
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d000      	beq.n	80005f4 <__aeabi_fsub+0x174>
 80005f2:	e0a6      	b.n	8000742 <__aeabi_fsub+0x2c2>
 80005f4:	4663      	mov	r3, ip
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d100      	bne.n	80005fc <__aeabi_fsub+0x17c>
 80005fa:	e0d9      	b.n	80007b0 <__aeabi_fsub+0x330>
 80005fc:	2200      	movs	r2, #0
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d100      	bne.n	8000604 <__aeabi_fsub+0x184>
 8000602:	e788      	b.n	8000516 <__aeabi_fsub+0x96>
 8000604:	1b98      	subs	r0, r3, r6
 8000606:	0143      	lsls	r3, r0, #5
 8000608:	d400      	bmi.n	800060c <__aeabi_fsub+0x18c>
 800060a:	e0e1      	b.n	80007d0 <__aeabi_fsub+0x350>
 800060c:	4663      	mov	r3, ip
 800060e:	000c      	movs	r4, r1
 8000610:	1af0      	subs	r0, r6, r3
 8000612:	e76f      	b.n	80004f4 <__aeabi_fsub+0x74>
 8000614:	2e00      	cmp	r6, #0
 8000616:	d100      	bne.n	800061a <__aeabi_fsub+0x19a>
 8000618:	e0b7      	b.n	800078a <__aeabi_fsub+0x30a>
 800061a:	0002      	movs	r2, r0
 800061c:	3a01      	subs	r2, #1
 800061e:	2801      	cmp	r0, #1
 8000620:	d100      	bne.n	8000624 <__aeabi_fsub+0x1a4>
 8000622:	e09c      	b.n	800075e <__aeabi_fsub+0x2de>
 8000624:	28ff      	cmp	r0, #255	; 0xff
 8000626:	d026      	beq.n	8000676 <__aeabi_fsub+0x1f6>
 8000628:	4690      	mov	r8, r2
 800062a:	e788      	b.n	800053e <__aeabi_fsub+0xbe>
 800062c:	22ff      	movs	r2, #255	; 0xff
 800062e:	2700      	movs	r7, #0
 8000630:	e771      	b.n	8000516 <__aeabi_fsub+0x96>
 8000632:	20fe      	movs	r0, #254	; 0xfe
 8000634:	1c6a      	adds	r2, r5, #1
 8000636:	4210      	tst	r0, r2
 8000638:	d064      	beq.n	8000704 <__aeabi_fsub+0x284>
 800063a:	2aff      	cmp	r2, #255	; 0xff
 800063c:	d0f6      	beq.n	800062c <__aeabi_fsub+0x1ac>
 800063e:	0015      	movs	r5, r2
 8000640:	4466      	add	r6, ip
 8000642:	0870      	lsrs	r0, r6, #1
 8000644:	0743      	lsls	r3, r0, #29
 8000646:	d000      	beq.n	800064a <__aeabi_fsub+0x1ca>
 8000648:	e756      	b.n	80004f8 <__aeabi_fsub+0x78>
 800064a:	08c3      	lsrs	r3, r0, #3
 800064c:	2dff      	cmp	r5, #255	; 0xff
 800064e:	d012      	beq.n	8000676 <__aeabi_fsub+0x1f6>
 8000650:	025b      	lsls	r3, r3, #9
 8000652:	0a5f      	lsrs	r7, r3, #9
 8000654:	b2ea      	uxtb	r2, r5
 8000656:	e75e      	b.n	8000516 <__aeabi_fsub+0x96>
 8000658:	4662      	mov	r2, ip
 800065a:	2a00      	cmp	r2, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_fsub+0x1e0>
 800065e:	e096      	b.n	800078e <__aeabi_fsub+0x30e>
 8000660:	2e00      	cmp	r6, #0
 8000662:	d008      	beq.n	8000676 <__aeabi_fsub+0x1f6>
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	03d2      	lsls	r2, r2, #15
 8000668:	4213      	tst	r3, r2
 800066a:	d004      	beq.n	8000676 <__aeabi_fsub+0x1f6>
 800066c:	4648      	mov	r0, r9
 800066e:	4210      	tst	r0, r2
 8000670:	d101      	bne.n	8000676 <__aeabi_fsub+0x1f6>
 8000672:	000c      	movs	r4, r1
 8000674:	464b      	mov	r3, r9
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0d8      	beq.n	800062c <__aeabi_fsub+0x1ac>
 800067a:	2780      	movs	r7, #128	; 0x80
 800067c:	03ff      	lsls	r7, r7, #15
 800067e:	431f      	orrs	r7, r3
 8000680:	027f      	lsls	r7, r7, #9
 8000682:	22ff      	movs	r2, #255	; 0xff
 8000684:	0a7f      	lsrs	r7, r7, #9
 8000686:	e746      	b.n	8000516 <__aeabi_fsub+0x96>
 8000688:	2320      	movs	r3, #32
 800068a:	003a      	movs	r2, r7
 800068c:	1b45      	subs	r5, r0, r5
 800068e:	0038      	movs	r0, r7
 8000690:	3501      	adds	r5, #1
 8000692:	40ea      	lsrs	r2, r5
 8000694:	1b5d      	subs	r5, r3, r5
 8000696:	40a8      	lsls	r0, r5
 8000698:	1e43      	subs	r3, r0, #1
 800069a:	4198      	sbcs	r0, r3
 800069c:	2500      	movs	r5, #0
 800069e:	4310      	orrs	r0, r2
 80006a0:	e728      	b.n	80004f4 <__aeabi_fsub+0x74>
 80006a2:	2320      	movs	r3, #32
 80006a4:	1a1b      	subs	r3, r3, r0
 80006a6:	0032      	movs	r2, r6
 80006a8:	409e      	lsls	r6, r3
 80006aa:	40c2      	lsrs	r2, r0
 80006ac:	0030      	movs	r0, r6
 80006ae:	1e43      	subs	r3, r0, #1
 80006b0:	4198      	sbcs	r0, r3
 80006b2:	4310      	orrs	r0, r2
 80006b4:	e70c      	b.n	80004d0 <__aeabi_fsub+0x50>
 80006b6:	2aff      	cmp	r2, #255	; 0xff
 80006b8:	d0db      	beq.n	8000672 <__aeabi_fsub+0x1f2>
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	4660      	mov	r0, ip
 80006be:	04db      	lsls	r3, r3, #19
 80006c0:	4318      	orrs	r0, r3
 80006c2:	4684      	mov	ip, r0
 80006c4:	2f1b      	cmp	r7, #27
 80006c6:	dd56      	ble.n	8000776 <__aeabi_fsub+0x2f6>
 80006c8:	2001      	movs	r0, #1
 80006ca:	000c      	movs	r4, r1
 80006cc:	0015      	movs	r5, r2
 80006ce:	1a30      	subs	r0, r6, r0
 80006d0:	e700      	b.n	80004d4 <__aeabi_fsub+0x54>
 80006d2:	4663      	mov	r3, ip
 80006d4:	1b9f      	subs	r7, r3, r6
 80006d6:	017b      	lsls	r3, r7, #5
 80006d8:	d43d      	bmi.n	8000756 <__aeabi_fsub+0x2d6>
 80006da:	2f00      	cmp	r7, #0
 80006dc:	d000      	beq.n	80006e0 <__aeabi_fsub+0x260>
 80006de:	e6fe      	b.n	80004de <__aeabi_fsub+0x5e>
 80006e0:	2400      	movs	r4, #0
 80006e2:	2200      	movs	r2, #0
 80006e4:	2700      	movs	r7, #0
 80006e6:	e716      	b.n	8000516 <__aeabi_fsub+0x96>
 80006e8:	0005      	movs	r5, r0
 80006ea:	e7af      	b.n	800064c <__aeabi_fsub+0x1cc>
 80006ec:	0032      	movs	r2, r6
 80006ee:	4643      	mov	r3, r8
 80006f0:	4641      	mov	r1, r8
 80006f2:	40da      	lsrs	r2, r3
 80006f4:	2320      	movs	r3, #32
 80006f6:	1a5b      	subs	r3, r3, r1
 80006f8:	409e      	lsls	r6, r3
 80006fa:	0030      	movs	r0, r6
 80006fc:	1e43      	subs	r3, r0, #1
 80006fe:	4198      	sbcs	r0, r3
 8000700:	4310      	orrs	r0, r2
 8000702:	e721      	b.n	8000548 <__aeabi_fsub+0xc8>
 8000704:	2d00      	cmp	r5, #0
 8000706:	d1a7      	bne.n	8000658 <__aeabi_fsub+0x1d8>
 8000708:	4663      	mov	r3, ip
 800070a:	2b00      	cmp	r3, #0
 800070c:	d059      	beq.n	80007c2 <__aeabi_fsub+0x342>
 800070e:	2200      	movs	r2, #0
 8000710:	2e00      	cmp	r6, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_fsub+0x296>
 8000714:	e6ff      	b.n	8000516 <__aeabi_fsub+0x96>
 8000716:	0030      	movs	r0, r6
 8000718:	4460      	add	r0, ip
 800071a:	0143      	lsls	r3, r0, #5
 800071c:	d592      	bpl.n	8000644 <__aeabi_fsub+0x1c4>
 800071e:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <__aeabi_fsub+0x348>)
 8000720:	3501      	adds	r5, #1
 8000722:	4018      	ands	r0, r3
 8000724:	e78e      	b.n	8000644 <__aeabi_fsub+0x1c4>
 8000726:	4663      	mov	r3, ip
 8000728:	2b00      	cmp	r3, #0
 800072a:	d047      	beq.n	80007bc <__aeabi_fsub+0x33c>
 800072c:	1e4b      	subs	r3, r1, #1
 800072e:	2901      	cmp	r1, #1
 8000730:	d015      	beq.n	800075e <__aeabi_fsub+0x2de>
 8000732:	29ff      	cmp	r1, #255	; 0xff
 8000734:	d02b      	beq.n	800078e <__aeabi_fsub+0x30e>
 8000736:	0019      	movs	r1, r3
 8000738:	e74e      	b.n	80005d8 <__aeabi_fsub+0x158>
 800073a:	000c      	movs	r4, r1
 800073c:	464b      	mov	r3, r9
 800073e:	003d      	movs	r5, r7
 8000740:	e784      	b.n	800064c <__aeabi_fsub+0x1cc>
 8000742:	4662      	mov	r2, ip
 8000744:	2a00      	cmp	r2, #0
 8000746:	d18b      	bne.n	8000660 <__aeabi_fsub+0x1e0>
 8000748:	2e00      	cmp	r6, #0
 800074a:	d192      	bne.n	8000672 <__aeabi_fsub+0x1f2>
 800074c:	2780      	movs	r7, #128	; 0x80
 800074e:	2400      	movs	r4, #0
 8000750:	22ff      	movs	r2, #255	; 0xff
 8000752:	03ff      	lsls	r7, r7, #15
 8000754:	e6df      	b.n	8000516 <__aeabi_fsub+0x96>
 8000756:	4663      	mov	r3, ip
 8000758:	000c      	movs	r4, r1
 800075a:	1af7      	subs	r7, r6, r3
 800075c:	e6bf      	b.n	80004de <__aeabi_fsub+0x5e>
 800075e:	0030      	movs	r0, r6
 8000760:	4460      	add	r0, ip
 8000762:	2501      	movs	r5, #1
 8000764:	0143      	lsls	r3, r0, #5
 8000766:	d400      	bmi.n	800076a <__aeabi_fsub+0x2ea>
 8000768:	e76c      	b.n	8000644 <__aeabi_fsub+0x1c4>
 800076a:	2502      	movs	r5, #2
 800076c:	e6f2      	b.n	8000554 <__aeabi_fsub+0xd4>
 800076e:	4663      	mov	r3, ip
 8000770:	2501      	movs	r5, #1
 8000772:	1b98      	subs	r0, r3, r6
 8000774:	e6ae      	b.n	80004d4 <__aeabi_fsub+0x54>
 8000776:	2320      	movs	r3, #32
 8000778:	4664      	mov	r4, ip
 800077a:	4660      	mov	r0, ip
 800077c:	40fc      	lsrs	r4, r7
 800077e:	1bdf      	subs	r7, r3, r7
 8000780:	40b8      	lsls	r0, r7
 8000782:	1e43      	subs	r3, r0, #1
 8000784:	4198      	sbcs	r0, r3
 8000786:	4320      	orrs	r0, r4
 8000788:	e79f      	b.n	80006ca <__aeabi_fsub+0x24a>
 800078a:	0005      	movs	r5, r0
 800078c:	e75e      	b.n	800064c <__aeabi_fsub+0x1cc>
 800078e:	464b      	mov	r3, r9
 8000790:	e771      	b.n	8000676 <__aeabi_fsub+0x1f6>
 8000792:	2320      	movs	r3, #32
 8000794:	4665      	mov	r5, ip
 8000796:	4660      	mov	r0, ip
 8000798:	40cd      	lsrs	r5, r1
 800079a:	1a59      	subs	r1, r3, r1
 800079c:	4088      	lsls	r0, r1
 800079e:	1e43      	subs	r3, r0, #1
 80007a0:	4198      	sbcs	r0, r3
 80007a2:	4328      	orrs	r0, r5
 80007a4:	e71c      	b.n	80005e0 <__aeabi_fsub+0x160>
 80007a6:	4663      	mov	r3, ip
 80007a8:	000c      	movs	r4, r1
 80007aa:	2501      	movs	r5, #1
 80007ac:	1af0      	subs	r0, r6, r3
 80007ae:	e691      	b.n	80004d4 <__aeabi_fsub+0x54>
 80007b0:	2e00      	cmp	r6, #0
 80007b2:	d095      	beq.n	80006e0 <__aeabi_fsub+0x260>
 80007b4:	000c      	movs	r4, r1
 80007b6:	464f      	mov	r7, r9
 80007b8:	2200      	movs	r2, #0
 80007ba:	e6ac      	b.n	8000516 <__aeabi_fsub+0x96>
 80007bc:	464b      	mov	r3, r9
 80007be:	000d      	movs	r5, r1
 80007c0:	e744      	b.n	800064c <__aeabi_fsub+0x1cc>
 80007c2:	464f      	mov	r7, r9
 80007c4:	2200      	movs	r2, #0
 80007c6:	e6a6      	b.n	8000516 <__aeabi_fsub+0x96>
 80007c8:	fbffffff 	.word	0xfbffffff
 80007cc:	7dffffff 	.word	0x7dffffff
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_fsub+0x356>
 80007d4:	e736      	b.n	8000644 <__aeabi_fsub+0x1c4>
 80007d6:	2400      	movs	r4, #0
 80007d8:	2700      	movs	r7, #0
 80007da:	e69c      	b.n	8000516 <__aeabi_fsub+0x96>

080007dc <__aeabi_f2iz>:
 80007dc:	0241      	lsls	r1, r0, #9
 80007de:	0042      	lsls	r2, r0, #1
 80007e0:	0fc3      	lsrs	r3, r0, #31
 80007e2:	0a49      	lsrs	r1, r1, #9
 80007e4:	2000      	movs	r0, #0
 80007e6:	0e12      	lsrs	r2, r2, #24
 80007e8:	2a7e      	cmp	r2, #126	; 0x7e
 80007ea:	dd03      	ble.n	80007f4 <__aeabi_f2iz+0x18>
 80007ec:	2a9d      	cmp	r2, #157	; 0x9d
 80007ee:	dd02      	ble.n	80007f6 <__aeabi_f2iz+0x1a>
 80007f0:	4a09      	ldr	r2, [pc, #36]	; (8000818 <__aeabi_f2iz+0x3c>)
 80007f2:	1898      	adds	r0, r3, r2
 80007f4:	4770      	bx	lr
 80007f6:	2080      	movs	r0, #128	; 0x80
 80007f8:	0400      	lsls	r0, r0, #16
 80007fa:	4301      	orrs	r1, r0
 80007fc:	2a95      	cmp	r2, #149	; 0x95
 80007fe:	dc07      	bgt.n	8000810 <__aeabi_f2iz+0x34>
 8000800:	2096      	movs	r0, #150	; 0x96
 8000802:	1a82      	subs	r2, r0, r2
 8000804:	40d1      	lsrs	r1, r2
 8000806:	4248      	negs	r0, r1
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1f3      	bne.n	80007f4 <__aeabi_f2iz+0x18>
 800080c:	0008      	movs	r0, r1
 800080e:	e7f1      	b.n	80007f4 <__aeabi_f2iz+0x18>
 8000810:	3a96      	subs	r2, #150	; 0x96
 8000812:	4091      	lsls	r1, r2
 8000814:	e7f7      	b.n	8000806 <__aeabi_f2iz+0x2a>
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	7fffffff 	.word	0x7fffffff

0800081c <__aeabi_i2f>:
 800081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800081e:	2800      	cmp	r0, #0
 8000820:	d013      	beq.n	800084a <__aeabi_i2f+0x2e>
 8000822:	17c3      	asrs	r3, r0, #31
 8000824:	18c6      	adds	r6, r0, r3
 8000826:	405e      	eors	r6, r3
 8000828:	0fc4      	lsrs	r4, r0, #31
 800082a:	0030      	movs	r0, r6
 800082c:	f000 fe54 	bl	80014d8 <__clzsi2>
 8000830:	239e      	movs	r3, #158	; 0x9e
 8000832:	0005      	movs	r5, r0
 8000834:	1a1b      	subs	r3, r3, r0
 8000836:	2b96      	cmp	r3, #150	; 0x96
 8000838:	dc0f      	bgt.n	800085a <__aeabi_i2f+0x3e>
 800083a:	2808      	cmp	r0, #8
 800083c:	dd01      	ble.n	8000842 <__aeabi_i2f+0x26>
 800083e:	3d08      	subs	r5, #8
 8000840:	40ae      	lsls	r6, r5
 8000842:	0276      	lsls	r6, r6, #9
 8000844:	0a76      	lsrs	r6, r6, #9
 8000846:	b2d8      	uxtb	r0, r3
 8000848:	e002      	b.n	8000850 <__aeabi_i2f+0x34>
 800084a:	2400      	movs	r4, #0
 800084c:	2000      	movs	r0, #0
 800084e:	2600      	movs	r6, #0
 8000850:	05c0      	lsls	r0, r0, #23
 8000852:	4330      	orrs	r0, r6
 8000854:	07e4      	lsls	r4, r4, #31
 8000856:	4320      	orrs	r0, r4
 8000858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800085a:	2b99      	cmp	r3, #153	; 0x99
 800085c:	dd0c      	ble.n	8000878 <__aeabi_i2f+0x5c>
 800085e:	2205      	movs	r2, #5
 8000860:	0031      	movs	r1, r6
 8000862:	1a12      	subs	r2, r2, r0
 8000864:	40d1      	lsrs	r1, r2
 8000866:	000a      	movs	r2, r1
 8000868:	0001      	movs	r1, r0
 800086a:	0030      	movs	r0, r6
 800086c:	311b      	adds	r1, #27
 800086e:	4088      	lsls	r0, r1
 8000870:	1e41      	subs	r1, r0, #1
 8000872:	4188      	sbcs	r0, r1
 8000874:	4302      	orrs	r2, r0
 8000876:	0016      	movs	r6, r2
 8000878:	2d05      	cmp	r5, #5
 800087a:	dc12      	bgt.n	80008a2 <__aeabi_i2f+0x86>
 800087c:	0031      	movs	r1, r6
 800087e:	4f0d      	ldr	r7, [pc, #52]	; (80008b4 <__aeabi_i2f+0x98>)
 8000880:	4039      	ands	r1, r7
 8000882:	0772      	lsls	r2, r6, #29
 8000884:	d009      	beq.n	800089a <__aeabi_i2f+0x7e>
 8000886:	200f      	movs	r0, #15
 8000888:	4030      	ands	r0, r6
 800088a:	2804      	cmp	r0, #4
 800088c:	d005      	beq.n	800089a <__aeabi_i2f+0x7e>
 800088e:	3104      	adds	r1, #4
 8000890:	014a      	lsls	r2, r1, #5
 8000892:	d502      	bpl.n	800089a <__aeabi_i2f+0x7e>
 8000894:	239f      	movs	r3, #159	; 0x9f
 8000896:	4039      	ands	r1, r7
 8000898:	1b5b      	subs	r3, r3, r5
 800089a:	0189      	lsls	r1, r1, #6
 800089c:	0a4e      	lsrs	r6, r1, #9
 800089e:	b2d8      	uxtb	r0, r3
 80008a0:	e7d6      	b.n	8000850 <__aeabi_i2f+0x34>
 80008a2:	1f6a      	subs	r2, r5, #5
 80008a4:	4096      	lsls	r6, r2
 80008a6:	0031      	movs	r1, r6
 80008a8:	4f02      	ldr	r7, [pc, #8]	; (80008b4 <__aeabi_i2f+0x98>)
 80008aa:	4039      	ands	r1, r7
 80008ac:	0772      	lsls	r2, r6, #29
 80008ae:	d0f4      	beq.n	800089a <__aeabi_i2f+0x7e>
 80008b0:	e7e9      	b.n	8000886 <__aeabi_i2f+0x6a>
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	fbffffff 	.word	0xfbffffff

080008b8 <__aeabi_ddiv>:
 80008b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ba:	4657      	mov	r7, sl
 80008bc:	464e      	mov	r6, r9
 80008be:	4645      	mov	r5, r8
 80008c0:	46de      	mov	lr, fp
 80008c2:	b5e0      	push	{r5, r6, r7, lr}
 80008c4:	4681      	mov	r9, r0
 80008c6:	0005      	movs	r5, r0
 80008c8:	030c      	lsls	r4, r1, #12
 80008ca:	0048      	lsls	r0, r1, #1
 80008cc:	4692      	mov	sl, r2
 80008ce:	001f      	movs	r7, r3
 80008d0:	b085      	sub	sp, #20
 80008d2:	0b24      	lsrs	r4, r4, #12
 80008d4:	0d40      	lsrs	r0, r0, #21
 80008d6:	0fce      	lsrs	r6, r1, #31
 80008d8:	2800      	cmp	r0, #0
 80008da:	d100      	bne.n	80008de <__aeabi_ddiv+0x26>
 80008dc:	e156      	b.n	8000b8c <__aeabi_ddiv+0x2d4>
 80008de:	4bd4      	ldr	r3, [pc, #848]	; (8000c30 <__aeabi_ddiv+0x378>)
 80008e0:	4298      	cmp	r0, r3
 80008e2:	d100      	bne.n	80008e6 <__aeabi_ddiv+0x2e>
 80008e4:	e172      	b.n	8000bcc <__aeabi_ddiv+0x314>
 80008e6:	0f6b      	lsrs	r3, r5, #29
 80008e8:	00e4      	lsls	r4, r4, #3
 80008ea:	431c      	orrs	r4, r3
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	041b      	lsls	r3, r3, #16
 80008f0:	4323      	orrs	r3, r4
 80008f2:	4698      	mov	r8, r3
 80008f4:	4bcf      	ldr	r3, [pc, #828]	; (8000c34 <__aeabi_ddiv+0x37c>)
 80008f6:	00ed      	lsls	r5, r5, #3
 80008f8:	469b      	mov	fp, r3
 80008fa:	2300      	movs	r3, #0
 80008fc:	4699      	mov	r9, r3
 80008fe:	4483      	add	fp, r0
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	033c      	lsls	r4, r7, #12
 8000904:	007b      	lsls	r3, r7, #1
 8000906:	4650      	mov	r0, sl
 8000908:	0b24      	lsrs	r4, r4, #12
 800090a:	0d5b      	lsrs	r3, r3, #21
 800090c:	0fff      	lsrs	r7, r7, #31
 800090e:	2b00      	cmp	r3, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_ddiv+0x5c>
 8000912:	e11f      	b.n	8000b54 <__aeabi_ddiv+0x29c>
 8000914:	4ac6      	ldr	r2, [pc, #792]	; (8000c30 <__aeabi_ddiv+0x378>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d100      	bne.n	800091c <__aeabi_ddiv+0x64>
 800091a:	e162      	b.n	8000be2 <__aeabi_ddiv+0x32a>
 800091c:	49c5      	ldr	r1, [pc, #788]	; (8000c34 <__aeabi_ddiv+0x37c>)
 800091e:	0f42      	lsrs	r2, r0, #29
 8000920:	468c      	mov	ip, r1
 8000922:	00e4      	lsls	r4, r4, #3
 8000924:	4659      	mov	r1, fp
 8000926:	4314      	orrs	r4, r2
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	4463      	add	r3, ip
 800092c:	0412      	lsls	r2, r2, #16
 800092e:	1acb      	subs	r3, r1, r3
 8000930:	4314      	orrs	r4, r2
 8000932:	469b      	mov	fp, r3
 8000934:	00c2      	lsls	r2, r0, #3
 8000936:	2000      	movs	r0, #0
 8000938:	0033      	movs	r3, r6
 800093a:	407b      	eors	r3, r7
 800093c:	469a      	mov	sl, r3
 800093e:	464b      	mov	r3, r9
 8000940:	2b0f      	cmp	r3, #15
 8000942:	d827      	bhi.n	8000994 <__aeabi_ddiv+0xdc>
 8000944:	49bc      	ldr	r1, [pc, #752]	; (8000c38 <__aeabi_ddiv+0x380>)
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	58cb      	ldr	r3, [r1, r3]
 800094a:	469f      	mov	pc, r3
 800094c:	46b2      	mov	sl, r6
 800094e:	9b00      	ldr	r3, [sp, #0]
 8000950:	2b02      	cmp	r3, #2
 8000952:	d016      	beq.n	8000982 <__aeabi_ddiv+0xca>
 8000954:	2b03      	cmp	r3, #3
 8000956:	d100      	bne.n	800095a <__aeabi_ddiv+0xa2>
 8000958:	e28e      	b.n	8000e78 <__aeabi_ddiv+0x5c0>
 800095a:	2b01      	cmp	r3, #1
 800095c:	d000      	beq.n	8000960 <__aeabi_ddiv+0xa8>
 800095e:	e0d9      	b.n	8000b14 <__aeabi_ddiv+0x25c>
 8000960:	2300      	movs	r3, #0
 8000962:	2400      	movs	r4, #0
 8000964:	2500      	movs	r5, #0
 8000966:	4652      	mov	r2, sl
 8000968:	051b      	lsls	r3, r3, #20
 800096a:	4323      	orrs	r3, r4
 800096c:	07d2      	lsls	r2, r2, #31
 800096e:	4313      	orrs	r3, r2
 8000970:	0028      	movs	r0, r5
 8000972:	0019      	movs	r1, r3
 8000974:	b005      	add	sp, #20
 8000976:	bcf0      	pop	{r4, r5, r6, r7}
 8000978:	46bb      	mov	fp, r7
 800097a:	46b2      	mov	sl, r6
 800097c:	46a9      	mov	r9, r5
 800097e:	46a0      	mov	r8, r4
 8000980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000982:	2400      	movs	r4, #0
 8000984:	2500      	movs	r5, #0
 8000986:	4baa      	ldr	r3, [pc, #680]	; (8000c30 <__aeabi_ddiv+0x378>)
 8000988:	e7ed      	b.n	8000966 <__aeabi_ddiv+0xae>
 800098a:	46ba      	mov	sl, r7
 800098c:	46a0      	mov	r8, r4
 800098e:	0015      	movs	r5, r2
 8000990:	9000      	str	r0, [sp, #0]
 8000992:	e7dc      	b.n	800094e <__aeabi_ddiv+0x96>
 8000994:	4544      	cmp	r4, r8
 8000996:	d200      	bcs.n	800099a <__aeabi_ddiv+0xe2>
 8000998:	e1c7      	b.n	8000d2a <__aeabi_ddiv+0x472>
 800099a:	d100      	bne.n	800099e <__aeabi_ddiv+0xe6>
 800099c:	e1c2      	b.n	8000d24 <__aeabi_ddiv+0x46c>
 800099e:	2301      	movs	r3, #1
 80009a0:	425b      	negs	r3, r3
 80009a2:	469c      	mov	ip, r3
 80009a4:	002e      	movs	r6, r5
 80009a6:	4640      	mov	r0, r8
 80009a8:	2500      	movs	r5, #0
 80009aa:	44e3      	add	fp, ip
 80009ac:	0223      	lsls	r3, r4, #8
 80009ae:	0e14      	lsrs	r4, r2, #24
 80009b0:	431c      	orrs	r4, r3
 80009b2:	0c1b      	lsrs	r3, r3, #16
 80009b4:	4699      	mov	r9, r3
 80009b6:	0423      	lsls	r3, r4, #16
 80009b8:	0c1f      	lsrs	r7, r3, #16
 80009ba:	0212      	lsls	r2, r2, #8
 80009bc:	4649      	mov	r1, r9
 80009be:	9200      	str	r2, [sp, #0]
 80009c0:	9701      	str	r7, [sp, #4]
 80009c2:	f7ff fc31 	bl	8000228 <__aeabi_uidivmod>
 80009c6:	0002      	movs	r2, r0
 80009c8:	437a      	muls	r2, r7
 80009ca:	040b      	lsls	r3, r1, #16
 80009cc:	0c31      	lsrs	r1, r6, #16
 80009ce:	4680      	mov	r8, r0
 80009d0:	4319      	orrs	r1, r3
 80009d2:	428a      	cmp	r2, r1
 80009d4:	d907      	bls.n	80009e6 <__aeabi_ddiv+0x12e>
 80009d6:	2301      	movs	r3, #1
 80009d8:	425b      	negs	r3, r3
 80009da:	469c      	mov	ip, r3
 80009dc:	1909      	adds	r1, r1, r4
 80009de:	44e0      	add	r8, ip
 80009e0:	428c      	cmp	r4, r1
 80009e2:	d800      	bhi.n	80009e6 <__aeabi_ddiv+0x12e>
 80009e4:	e207      	b.n	8000df6 <__aeabi_ddiv+0x53e>
 80009e6:	1a88      	subs	r0, r1, r2
 80009e8:	4649      	mov	r1, r9
 80009ea:	f7ff fc1d 	bl	8000228 <__aeabi_uidivmod>
 80009ee:	0409      	lsls	r1, r1, #16
 80009f0:	468c      	mov	ip, r1
 80009f2:	0431      	lsls	r1, r6, #16
 80009f4:	4666      	mov	r6, ip
 80009f6:	9a01      	ldr	r2, [sp, #4]
 80009f8:	0c09      	lsrs	r1, r1, #16
 80009fa:	4342      	muls	r2, r0
 80009fc:	0003      	movs	r3, r0
 80009fe:	4331      	orrs	r1, r6
 8000a00:	428a      	cmp	r2, r1
 8000a02:	d904      	bls.n	8000a0e <__aeabi_ddiv+0x156>
 8000a04:	1909      	adds	r1, r1, r4
 8000a06:	3b01      	subs	r3, #1
 8000a08:	428c      	cmp	r4, r1
 8000a0a:	d800      	bhi.n	8000a0e <__aeabi_ddiv+0x156>
 8000a0c:	e1ed      	b.n	8000dea <__aeabi_ddiv+0x532>
 8000a0e:	1a88      	subs	r0, r1, r2
 8000a10:	4642      	mov	r2, r8
 8000a12:	0412      	lsls	r2, r2, #16
 8000a14:	431a      	orrs	r2, r3
 8000a16:	4690      	mov	r8, r2
 8000a18:	4641      	mov	r1, r8
 8000a1a:	9b00      	ldr	r3, [sp, #0]
 8000a1c:	040e      	lsls	r6, r1, #16
 8000a1e:	0c1b      	lsrs	r3, r3, #16
 8000a20:	001f      	movs	r7, r3
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	9b00      	ldr	r3, [sp, #0]
 8000a26:	0c36      	lsrs	r6, r6, #16
 8000a28:	041b      	lsls	r3, r3, #16
 8000a2a:	0c19      	lsrs	r1, r3, #16
 8000a2c:	000b      	movs	r3, r1
 8000a2e:	4373      	muls	r3, r6
 8000a30:	0c12      	lsrs	r2, r2, #16
 8000a32:	437e      	muls	r6, r7
 8000a34:	9103      	str	r1, [sp, #12]
 8000a36:	4351      	muls	r1, r2
 8000a38:	437a      	muls	r2, r7
 8000a3a:	0c1f      	lsrs	r7, r3, #16
 8000a3c:	46bc      	mov	ip, r7
 8000a3e:	1876      	adds	r6, r6, r1
 8000a40:	4466      	add	r6, ip
 8000a42:	42b1      	cmp	r1, r6
 8000a44:	d903      	bls.n	8000a4e <__aeabi_ddiv+0x196>
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	0249      	lsls	r1, r1, #9
 8000a4a:	468c      	mov	ip, r1
 8000a4c:	4462      	add	r2, ip
 8000a4e:	0c31      	lsrs	r1, r6, #16
 8000a50:	188a      	adds	r2, r1, r2
 8000a52:	0431      	lsls	r1, r6, #16
 8000a54:	041e      	lsls	r6, r3, #16
 8000a56:	0c36      	lsrs	r6, r6, #16
 8000a58:	198e      	adds	r6, r1, r6
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d302      	bcc.n	8000a64 <__aeabi_ddiv+0x1ac>
 8000a5e:	d112      	bne.n	8000a86 <__aeabi_ddiv+0x1ce>
 8000a60:	42b5      	cmp	r5, r6
 8000a62:	d210      	bcs.n	8000a86 <__aeabi_ddiv+0x1ce>
 8000a64:	4643      	mov	r3, r8
 8000a66:	1e59      	subs	r1, r3, #1
 8000a68:	9b00      	ldr	r3, [sp, #0]
 8000a6a:	469c      	mov	ip, r3
 8000a6c:	4465      	add	r5, ip
 8000a6e:	001f      	movs	r7, r3
 8000a70:	429d      	cmp	r5, r3
 8000a72:	419b      	sbcs	r3, r3
 8000a74:	425b      	negs	r3, r3
 8000a76:	191b      	adds	r3, r3, r4
 8000a78:	18c0      	adds	r0, r0, r3
 8000a7a:	4284      	cmp	r4, r0
 8000a7c:	d200      	bcs.n	8000a80 <__aeabi_ddiv+0x1c8>
 8000a7e:	e1a0      	b.n	8000dc2 <__aeabi_ddiv+0x50a>
 8000a80:	d100      	bne.n	8000a84 <__aeabi_ddiv+0x1cc>
 8000a82:	e19b      	b.n	8000dbc <__aeabi_ddiv+0x504>
 8000a84:	4688      	mov	r8, r1
 8000a86:	1bae      	subs	r6, r5, r6
 8000a88:	42b5      	cmp	r5, r6
 8000a8a:	41ad      	sbcs	r5, r5
 8000a8c:	1a80      	subs	r0, r0, r2
 8000a8e:	426d      	negs	r5, r5
 8000a90:	1b40      	subs	r0, r0, r5
 8000a92:	4284      	cmp	r4, r0
 8000a94:	d100      	bne.n	8000a98 <__aeabi_ddiv+0x1e0>
 8000a96:	e1d5      	b.n	8000e44 <__aeabi_ddiv+0x58c>
 8000a98:	4649      	mov	r1, r9
 8000a9a:	f7ff fbc5 	bl	8000228 <__aeabi_uidivmod>
 8000a9e:	9a01      	ldr	r2, [sp, #4]
 8000aa0:	040b      	lsls	r3, r1, #16
 8000aa2:	4342      	muls	r2, r0
 8000aa4:	0c31      	lsrs	r1, r6, #16
 8000aa6:	0005      	movs	r5, r0
 8000aa8:	4319      	orrs	r1, r3
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	d900      	bls.n	8000ab0 <__aeabi_ddiv+0x1f8>
 8000aae:	e16c      	b.n	8000d8a <__aeabi_ddiv+0x4d2>
 8000ab0:	1a88      	subs	r0, r1, r2
 8000ab2:	4649      	mov	r1, r9
 8000ab4:	f7ff fbb8 	bl	8000228 <__aeabi_uidivmod>
 8000ab8:	9a01      	ldr	r2, [sp, #4]
 8000aba:	0436      	lsls	r6, r6, #16
 8000abc:	4342      	muls	r2, r0
 8000abe:	0409      	lsls	r1, r1, #16
 8000ac0:	0c36      	lsrs	r6, r6, #16
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	430e      	orrs	r6, r1
 8000ac6:	42b2      	cmp	r2, r6
 8000ac8:	d900      	bls.n	8000acc <__aeabi_ddiv+0x214>
 8000aca:	e153      	b.n	8000d74 <__aeabi_ddiv+0x4bc>
 8000acc:	9803      	ldr	r0, [sp, #12]
 8000ace:	1ab6      	subs	r6, r6, r2
 8000ad0:	0002      	movs	r2, r0
 8000ad2:	042d      	lsls	r5, r5, #16
 8000ad4:	431d      	orrs	r5, r3
 8000ad6:	9f02      	ldr	r7, [sp, #8]
 8000ad8:	042b      	lsls	r3, r5, #16
 8000ada:	0c1b      	lsrs	r3, r3, #16
 8000adc:	435a      	muls	r2, r3
 8000ade:	437b      	muls	r3, r7
 8000ae0:	469c      	mov	ip, r3
 8000ae2:	0c29      	lsrs	r1, r5, #16
 8000ae4:	4348      	muls	r0, r1
 8000ae6:	0c13      	lsrs	r3, r2, #16
 8000ae8:	4484      	add	ip, r0
 8000aea:	4463      	add	r3, ip
 8000aec:	4379      	muls	r1, r7
 8000aee:	4298      	cmp	r0, r3
 8000af0:	d903      	bls.n	8000afa <__aeabi_ddiv+0x242>
 8000af2:	2080      	movs	r0, #128	; 0x80
 8000af4:	0240      	lsls	r0, r0, #9
 8000af6:	4684      	mov	ip, r0
 8000af8:	4461      	add	r1, ip
 8000afa:	0c18      	lsrs	r0, r3, #16
 8000afc:	0412      	lsls	r2, r2, #16
 8000afe:	041b      	lsls	r3, r3, #16
 8000b00:	0c12      	lsrs	r2, r2, #16
 8000b02:	1841      	adds	r1, r0, r1
 8000b04:	189b      	adds	r3, r3, r2
 8000b06:	428e      	cmp	r6, r1
 8000b08:	d200      	bcs.n	8000b0c <__aeabi_ddiv+0x254>
 8000b0a:	e0ff      	b.n	8000d0c <__aeabi_ddiv+0x454>
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_ddiv+0x258>
 8000b0e:	e0fa      	b.n	8000d06 <__aeabi_ddiv+0x44e>
 8000b10:	2301      	movs	r3, #1
 8000b12:	431d      	orrs	r5, r3
 8000b14:	4a49      	ldr	r2, [pc, #292]	; (8000c3c <__aeabi_ddiv+0x384>)
 8000b16:	445a      	add	r2, fp
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	dc00      	bgt.n	8000b1e <__aeabi_ddiv+0x266>
 8000b1c:	e0aa      	b.n	8000c74 <__aeabi_ddiv+0x3bc>
 8000b1e:	076b      	lsls	r3, r5, #29
 8000b20:	d000      	beq.n	8000b24 <__aeabi_ddiv+0x26c>
 8000b22:	e13d      	b.n	8000da0 <__aeabi_ddiv+0x4e8>
 8000b24:	08ed      	lsrs	r5, r5, #3
 8000b26:	4643      	mov	r3, r8
 8000b28:	01db      	lsls	r3, r3, #7
 8000b2a:	d506      	bpl.n	8000b3a <__aeabi_ddiv+0x282>
 8000b2c:	4642      	mov	r2, r8
 8000b2e:	4b44      	ldr	r3, [pc, #272]	; (8000c40 <__aeabi_ddiv+0x388>)
 8000b30:	401a      	ands	r2, r3
 8000b32:	4690      	mov	r8, r2
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	00d2      	lsls	r2, r2, #3
 8000b38:	445a      	add	r2, fp
 8000b3a:	4b42      	ldr	r3, [pc, #264]	; (8000c44 <__aeabi_ddiv+0x38c>)
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dd00      	ble.n	8000b42 <__aeabi_ddiv+0x28a>
 8000b40:	e71f      	b.n	8000982 <__aeabi_ddiv+0xca>
 8000b42:	4643      	mov	r3, r8
 8000b44:	075b      	lsls	r3, r3, #29
 8000b46:	431d      	orrs	r5, r3
 8000b48:	4643      	mov	r3, r8
 8000b4a:	0552      	lsls	r2, r2, #21
 8000b4c:	025c      	lsls	r4, r3, #9
 8000b4e:	0b24      	lsrs	r4, r4, #12
 8000b50:	0d53      	lsrs	r3, r2, #21
 8000b52:	e708      	b.n	8000966 <__aeabi_ddiv+0xae>
 8000b54:	4652      	mov	r2, sl
 8000b56:	4322      	orrs	r2, r4
 8000b58:	d100      	bne.n	8000b5c <__aeabi_ddiv+0x2a4>
 8000b5a:	e07b      	b.n	8000c54 <__aeabi_ddiv+0x39c>
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_ddiv+0x2aa>
 8000b60:	e0fa      	b.n	8000d58 <__aeabi_ddiv+0x4a0>
 8000b62:	0020      	movs	r0, r4
 8000b64:	f000 fcb8 	bl	80014d8 <__clzsi2>
 8000b68:	0002      	movs	r2, r0
 8000b6a:	3a0b      	subs	r2, #11
 8000b6c:	231d      	movs	r3, #29
 8000b6e:	0001      	movs	r1, r0
 8000b70:	1a9b      	subs	r3, r3, r2
 8000b72:	4652      	mov	r2, sl
 8000b74:	3908      	subs	r1, #8
 8000b76:	40da      	lsrs	r2, r3
 8000b78:	408c      	lsls	r4, r1
 8000b7a:	4314      	orrs	r4, r2
 8000b7c:	4652      	mov	r2, sl
 8000b7e:	408a      	lsls	r2, r1
 8000b80:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <__aeabi_ddiv+0x390>)
 8000b82:	4458      	add	r0, fp
 8000b84:	469b      	mov	fp, r3
 8000b86:	4483      	add	fp, r0
 8000b88:	2000      	movs	r0, #0
 8000b8a:	e6d5      	b.n	8000938 <__aeabi_ddiv+0x80>
 8000b8c:	464b      	mov	r3, r9
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	4698      	mov	r8, r3
 8000b92:	d044      	beq.n	8000c1e <__aeabi_ddiv+0x366>
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_ddiv+0x2e2>
 8000b98:	e0ce      	b.n	8000d38 <__aeabi_ddiv+0x480>
 8000b9a:	0020      	movs	r0, r4
 8000b9c:	f000 fc9c 	bl	80014d8 <__clzsi2>
 8000ba0:	0001      	movs	r1, r0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	390b      	subs	r1, #11
 8000ba6:	231d      	movs	r3, #29
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	4649      	mov	r1, r9
 8000bac:	0010      	movs	r0, r2
 8000bae:	40d9      	lsrs	r1, r3
 8000bb0:	3808      	subs	r0, #8
 8000bb2:	4084      	lsls	r4, r0
 8000bb4:	000b      	movs	r3, r1
 8000bb6:	464d      	mov	r5, r9
 8000bb8:	4323      	orrs	r3, r4
 8000bba:	4698      	mov	r8, r3
 8000bbc:	4085      	lsls	r5, r0
 8000bbe:	4823      	ldr	r0, [pc, #140]	; (8000c4c <__aeabi_ddiv+0x394>)
 8000bc0:	1a83      	subs	r3, r0, r2
 8000bc2:	469b      	mov	fp, r3
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	e69a      	b.n	8000902 <__aeabi_ddiv+0x4a>
 8000bcc:	464b      	mov	r3, r9
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	d11d      	bne.n	8000c10 <__aeabi_ddiv+0x358>
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	4699      	mov	r9, r3
 8000bd8:	3b06      	subs	r3, #6
 8000bda:	2500      	movs	r5, #0
 8000bdc:	4683      	mov	fp, r0
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	e68f      	b.n	8000902 <__aeabi_ddiv+0x4a>
 8000be2:	4652      	mov	r2, sl
 8000be4:	4322      	orrs	r2, r4
 8000be6:	d109      	bne.n	8000bfc <__aeabi_ddiv+0x344>
 8000be8:	2302      	movs	r3, #2
 8000bea:	4649      	mov	r1, r9
 8000bec:	4319      	orrs	r1, r3
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <__aeabi_ddiv+0x398>)
 8000bf0:	4689      	mov	r9, r1
 8000bf2:	469c      	mov	ip, r3
 8000bf4:	2400      	movs	r4, #0
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	44e3      	add	fp, ip
 8000bfa:	e69d      	b.n	8000938 <__aeabi_ddiv+0x80>
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	464a      	mov	r2, r9
 8000c00:	431a      	orrs	r2, r3
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <__aeabi_ddiv+0x398>)
 8000c04:	4691      	mov	r9, r2
 8000c06:	469c      	mov	ip, r3
 8000c08:	4652      	mov	r2, sl
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	44e3      	add	fp, ip
 8000c0e:	e693      	b.n	8000938 <__aeabi_ddiv+0x80>
 8000c10:	230c      	movs	r3, #12
 8000c12:	4699      	mov	r9, r3
 8000c14:	3b09      	subs	r3, #9
 8000c16:	46a0      	mov	r8, r4
 8000c18:	4683      	mov	fp, r0
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	e671      	b.n	8000902 <__aeabi_ddiv+0x4a>
 8000c1e:	2304      	movs	r3, #4
 8000c20:	4699      	mov	r9, r3
 8000c22:	2300      	movs	r3, #0
 8000c24:	469b      	mov	fp, r3
 8000c26:	3301      	adds	r3, #1
 8000c28:	2500      	movs	r5, #0
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	e669      	b.n	8000902 <__aeabi_ddiv+0x4a>
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	000007ff 	.word	0x000007ff
 8000c34:	fffffc01 	.word	0xfffffc01
 8000c38:	08006640 	.word	0x08006640
 8000c3c:	000003ff 	.word	0x000003ff
 8000c40:	feffffff 	.word	0xfeffffff
 8000c44:	000007fe 	.word	0x000007fe
 8000c48:	000003f3 	.word	0x000003f3
 8000c4c:	fffffc0d 	.word	0xfffffc0d
 8000c50:	fffff801 	.word	0xfffff801
 8000c54:	4649      	mov	r1, r9
 8000c56:	2301      	movs	r3, #1
 8000c58:	4319      	orrs	r1, r3
 8000c5a:	4689      	mov	r9, r1
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	2001      	movs	r0, #1
 8000c60:	e66a      	b.n	8000938 <__aeabi_ddiv+0x80>
 8000c62:	2300      	movs	r3, #0
 8000c64:	2480      	movs	r4, #128	; 0x80
 8000c66:	469a      	mov	sl, r3
 8000c68:	2500      	movs	r5, #0
 8000c6a:	4b8a      	ldr	r3, [pc, #552]	; (8000e94 <__aeabi_ddiv+0x5dc>)
 8000c6c:	0324      	lsls	r4, r4, #12
 8000c6e:	e67a      	b.n	8000966 <__aeabi_ddiv+0xae>
 8000c70:	2501      	movs	r5, #1
 8000c72:	426d      	negs	r5, r5
 8000c74:	2301      	movs	r3, #1
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	2b38      	cmp	r3, #56	; 0x38
 8000c7a:	dd00      	ble.n	8000c7e <__aeabi_ddiv+0x3c6>
 8000c7c:	e670      	b.n	8000960 <__aeabi_ddiv+0xa8>
 8000c7e:	2b1f      	cmp	r3, #31
 8000c80:	dc00      	bgt.n	8000c84 <__aeabi_ddiv+0x3cc>
 8000c82:	e0bf      	b.n	8000e04 <__aeabi_ddiv+0x54c>
 8000c84:	211f      	movs	r1, #31
 8000c86:	4249      	negs	r1, r1
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	4641      	mov	r1, r8
 8000c8c:	40d1      	lsrs	r1, r2
 8000c8e:	000a      	movs	r2, r1
 8000c90:	2b20      	cmp	r3, #32
 8000c92:	d004      	beq.n	8000c9e <__aeabi_ddiv+0x3e6>
 8000c94:	4641      	mov	r1, r8
 8000c96:	4b80      	ldr	r3, [pc, #512]	; (8000e98 <__aeabi_ddiv+0x5e0>)
 8000c98:	445b      	add	r3, fp
 8000c9a:	4099      	lsls	r1, r3
 8000c9c:	430d      	orrs	r5, r1
 8000c9e:	1e6b      	subs	r3, r5, #1
 8000ca0:	419d      	sbcs	r5, r3
 8000ca2:	2307      	movs	r3, #7
 8000ca4:	432a      	orrs	r2, r5
 8000ca6:	001d      	movs	r5, r3
 8000ca8:	2400      	movs	r4, #0
 8000caa:	4015      	ands	r5, r2
 8000cac:	4213      	tst	r3, r2
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_ddiv+0x3fa>
 8000cb0:	e0d4      	b.n	8000e5c <__aeabi_ddiv+0x5a4>
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4011      	ands	r1, r2
 8000cb8:	2904      	cmp	r1, #4
 8000cba:	d100      	bne.n	8000cbe <__aeabi_ddiv+0x406>
 8000cbc:	e0cb      	b.n	8000e56 <__aeabi_ddiv+0x59e>
 8000cbe:	1d11      	adds	r1, r2, #4
 8000cc0:	4291      	cmp	r1, r2
 8000cc2:	4192      	sbcs	r2, r2
 8000cc4:	4252      	negs	r2, r2
 8000cc6:	189b      	adds	r3, r3, r2
 8000cc8:	000a      	movs	r2, r1
 8000cca:	0219      	lsls	r1, r3, #8
 8000ccc:	d400      	bmi.n	8000cd0 <__aeabi_ddiv+0x418>
 8000cce:	e0c2      	b.n	8000e56 <__aeabi_ddiv+0x59e>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	2400      	movs	r4, #0
 8000cd4:	2500      	movs	r5, #0
 8000cd6:	e646      	b.n	8000966 <__aeabi_ddiv+0xae>
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	4641      	mov	r1, r8
 8000cdc:	031b      	lsls	r3, r3, #12
 8000cde:	4219      	tst	r1, r3
 8000ce0:	d008      	beq.n	8000cf4 <__aeabi_ddiv+0x43c>
 8000ce2:	421c      	tst	r4, r3
 8000ce4:	d106      	bne.n	8000cf4 <__aeabi_ddiv+0x43c>
 8000ce6:	431c      	orrs	r4, r3
 8000ce8:	0324      	lsls	r4, r4, #12
 8000cea:	46ba      	mov	sl, r7
 8000cec:	0015      	movs	r5, r2
 8000cee:	4b69      	ldr	r3, [pc, #420]	; (8000e94 <__aeabi_ddiv+0x5dc>)
 8000cf0:	0b24      	lsrs	r4, r4, #12
 8000cf2:	e638      	b.n	8000966 <__aeabi_ddiv+0xae>
 8000cf4:	2480      	movs	r4, #128	; 0x80
 8000cf6:	4643      	mov	r3, r8
 8000cf8:	0324      	lsls	r4, r4, #12
 8000cfa:	431c      	orrs	r4, r3
 8000cfc:	0324      	lsls	r4, r4, #12
 8000cfe:	46b2      	mov	sl, r6
 8000d00:	4b64      	ldr	r3, [pc, #400]	; (8000e94 <__aeabi_ddiv+0x5dc>)
 8000d02:	0b24      	lsrs	r4, r4, #12
 8000d04:	e62f      	b.n	8000966 <__aeabi_ddiv+0xae>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d100      	bne.n	8000d0c <__aeabi_ddiv+0x454>
 8000d0a:	e703      	b.n	8000b14 <__aeabi_ddiv+0x25c>
 8000d0c:	19a6      	adds	r6, r4, r6
 8000d0e:	1e68      	subs	r0, r5, #1
 8000d10:	42a6      	cmp	r6, r4
 8000d12:	d200      	bcs.n	8000d16 <__aeabi_ddiv+0x45e>
 8000d14:	e08d      	b.n	8000e32 <__aeabi_ddiv+0x57a>
 8000d16:	428e      	cmp	r6, r1
 8000d18:	d200      	bcs.n	8000d1c <__aeabi_ddiv+0x464>
 8000d1a:	e0a3      	b.n	8000e64 <__aeabi_ddiv+0x5ac>
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_ddiv+0x468>
 8000d1e:	e0b3      	b.n	8000e88 <__aeabi_ddiv+0x5d0>
 8000d20:	0005      	movs	r5, r0
 8000d22:	e6f5      	b.n	8000b10 <__aeabi_ddiv+0x258>
 8000d24:	42aa      	cmp	r2, r5
 8000d26:	d900      	bls.n	8000d2a <__aeabi_ddiv+0x472>
 8000d28:	e639      	b.n	800099e <__aeabi_ddiv+0xe6>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	07de      	lsls	r6, r3, #31
 8000d2e:	0858      	lsrs	r0, r3, #1
 8000d30:	086b      	lsrs	r3, r5, #1
 8000d32:	431e      	orrs	r6, r3
 8000d34:	07ed      	lsls	r5, r5, #31
 8000d36:	e639      	b.n	80009ac <__aeabi_ddiv+0xf4>
 8000d38:	4648      	mov	r0, r9
 8000d3a:	f000 fbcd 	bl	80014d8 <__clzsi2>
 8000d3e:	0001      	movs	r1, r0
 8000d40:	0002      	movs	r2, r0
 8000d42:	3115      	adds	r1, #21
 8000d44:	3220      	adds	r2, #32
 8000d46:	291c      	cmp	r1, #28
 8000d48:	dc00      	bgt.n	8000d4c <__aeabi_ddiv+0x494>
 8000d4a:	e72c      	b.n	8000ba6 <__aeabi_ddiv+0x2ee>
 8000d4c:	464b      	mov	r3, r9
 8000d4e:	3808      	subs	r0, #8
 8000d50:	4083      	lsls	r3, r0
 8000d52:	2500      	movs	r5, #0
 8000d54:	4698      	mov	r8, r3
 8000d56:	e732      	b.n	8000bbe <__aeabi_ddiv+0x306>
 8000d58:	f000 fbbe 	bl	80014d8 <__clzsi2>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	001a      	movs	r2, r3
 8000d60:	3215      	adds	r2, #21
 8000d62:	3020      	adds	r0, #32
 8000d64:	2a1c      	cmp	r2, #28
 8000d66:	dc00      	bgt.n	8000d6a <__aeabi_ddiv+0x4b2>
 8000d68:	e700      	b.n	8000b6c <__aeabi_ddiv+0x2b4>
 8000d6a:	4654      	mov	r4, sl
 8000d6c:	3b08      	subs	r3, #8
 8000d6e:	2200      	movs	r2, #0
 8000d70:	409c      	lsls	r4, r3
 8000d72:	e705      	b.n	8000b80 <__aeabi_ddiv+0x2c8>
 8000d74:	1936      	adds	r6, r6, r4
 8000d76:	3b01      	subs	r3, #1
 8000d78:	42b4      	cmp	r4, r6
 8000d7a:	d900      	bls.n	8000d7e <__aeabi_ddiv+0x4c6>
 8000d7c:	e6a6      	b.n	8000acc <__aeabi_ddiv+0x214>
 8000d7e:	42b2      	cmp	r2, r6
 8000d80:	d800      	bhi.n	8000d84 <__aeabi_ddiv+0x4cc>
 8000d82:	e6a3      	b.n	8000acc <__aeabi_ddiv+0x214>
 8000d84:	1e83      	subs	r3, r0, #2
 8000d86:	1936      	adds	r6, r6, r4
 8000d88:	e6a0      	b.n	8000acc <__aeabi_ddiv+0x214>
 8000d8a:	1909      	adds	r1, r1, r4
 8000d8c:	3d01      	subs	r5, #1
 8000d8e:	428c      	cmp	r4, r1
 8000d90:	d900      	bls.n	8000d94 <__aeabi_ddiv+0x4dc>
 8000d92:	e68d      	b.n	8000ab0 <__aeabi_ddiv+0x1f8>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	d800      	bhi.n	8000d9a <__aeabi_ddiv+0x4e2>
 8000d98:	e68a      	b.n	8000ab0 <__aeabi_ddiv+0x1f8>
 8000d9a:	1e85      	subs	r5, r0, #2
 8000d9c:	1909      	adds	r1, r1, r4
 8000d9e:	e687      	b.n	8000ab0 <__aeabi_ddiv+0x1f8>
 8000da0:	230f      	movs	r3, #15
 8000da2:	402b      	ands	r3, r5
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d100      	bne.n	8000daa <__aeabi_ddiv+0x4f2>
 8000da8:	e6bc      	b.n	8000b24 <__aeabi_ddiv+0x26c>
 8000daa:	2305      	movs	r3, #5
 8000dac:	425b      	negs	r3, r3
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	419b      	sbcs	r3, r3
 8000db2:	3504      	adds	r5, #4
 8000db4:	425b      	negs	r3, r3
 8000db6:	08ed      	lsrs	r5, r5, #3
 8000db8:	4498      	add	r8, r3
 8000dba:	e6b4      	b.n	8000b26 <__aeabi_ddiv+0x26e>
 8000dbc:	42af      	cmp	r7, r5
 8000dbe:	d900      	bls.n	8000dc2 <__aeabi_ddiv+0x50a>
 8000dc0:	e660      	b.n	8000a84 <__aeabi_ddiv+0x1cc>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	d804      	bhi.n	8000dd0 <__aeabi_ddiv+0x518>
 8000dc6:	d000      	beq.n	8000dca <__aeabi_ddiv+0x512>
 8000dc8:	e65c      	b.n	8000a84 <__aeabi_ddiv+0x1cc>
 8000dca:	42ae      	cmp	r6, r5
 8000dcc:	d800      	bhi.n	8000dd0 <__aeabi_ddiv+0x518>
 8000dce:	e659      	b.n	8000a84 <__aeabi_ddiv+0x1cc>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	469c      	mov	ip, r3
 8000dd6:	9b00      	ldr	r3, [sp, #0]
 8000dd8:	44e0      	add	r8, ip
 8000dda:	469c      	mov	ip, r3
 8000ddc:	4465      	add	r5, ip
 8000dde:	429d      	cmp	r5, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	425b      	negs	r3, r3
 8000de4:	191b      	adds	r3, r3, r4
 8000de6:	18c0      	adds	r0, r0, r3
 8000de8:	e64d      	b.n	8000a86 <__aeabi_ddiv+0x1ce>
 8000dea:	428a      	cmp	r2, r1
 8000dec:	d800      	bhi.n	8000df0 <__aeabi_ddiv+0x538>
 8000dee:	e60e      	b.n	8000a0e <__aeabi_ddiv+0x156>
 8000df0:	1e83      	subs	r3, r0, #2
 8000df2:	1909      	adds	r1, r1, r4
 8000df4:	e60b      	b.n	8000a0e <__aeabi_ddiv+0x156>
 8000df6:	428a      	cmp	r2, r1
 8000df8:	d800      	bhi.n	8000dfc <__aeabi_ddiv+0x544>
 8000dfa:	e5f4      	b.n	80009e6 <__aeabi_ddiv+0x12e>
 8000dfc:	1e83      	subs	r3, r0, #2
 8000dfe:	4698      	mov	r8, r3
 8000e00:	1909      	adds	r1, r1, r4
 8000e02:	e5f0      	b.n	80009e6 <__aeabi_ddiv+0x12e>
 8000e04:	4925      	ldr	r1, [pc, #148]	; (8000e9c <__aeabi_ddiv+0x5e4>)
 8000e06:	0028      	movs	r0, r5
 8000e08:	4459      	add	r1, fp
 8000e0a:	408d      	lsls	r5, r1
 8000e0c:	4642      	mov	r2, r8
 8000e0e:	408a      	lsls	r2, r1
 8000e10:	1e69      	subs	r1, r5, #1
 8000e12:	418d      	sbcs	r5, r1
 8000e14:	4641      	mov	r1, r8
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	40d9      	lsrs	r1, r3
 8000e1a:	4302      	orrs	r2, r0
 8000e1c:	432a      	orrs	r2, r5
 8000e1e:	000b      	movs	r3, r1
 8000e20:	0751      	lsls	r1, r2, #29
 8000e22:	d100      	bne.n	8000e26 <__aeabi_ddiv+0x56e>
 8000e24:	e751      	b.n	8000cca <__aeabi_ddiv+0x412>
 8000e26:	210f      	movs	r1, #15
 8000e28:	4011      	ands	r1, r2
 8000e2a:	2904      	cmp	r1, #4
 8000e2c:	d000      	beq.n	8000e30 <__aeabi_ddiv+0x578>
 8000e2e:	e746      	b.n	8000cbe <__aeabi_ddiv+0x406>
 8000e30:	e74b      	b.n	8000cca <__aeabi_ddiv+0x412>
 8000e32:	0005      	movs	r5, r0
 8000e34:	428e      	cmp	r6, r1
 8000e36:	d000      	beq.n	8000e3a <__aeabi_ddiv+0x582>
 8000e38:	e66a      	b.n	8000b10 <__aeabi_ddiv+0x258>
 8000e3a:	9a00      	ldr	r2, [sp, #0]
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_ddiv+0x58a>
 8000e40:	e666      	b.n	8000b10 <__aeabi_ddiv+0x258>
 8000e42:	e667      	b.n	8000b14 <__aeabi_ddiv+0x25c>
 8000e44:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <__aeabi_ddiv+0x5e8>)
 8000e46:	445a      	add	r2, fp
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	dc00      	bgt.n	8000e4e <__aeabi_ddiv+0x596>
 8000e4c:	e710      	b.n	8000c70 <__aeabi_ddiv+0x3b8>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	2500      	movs	r5, #0
 8000e52:	4498      	add	r8, r3
 8000e54:	e667      	b.n	8000b26 <__aeabi_ddiv+0x26e>
 8000e56:	075d      	lsls	r5, r3, #29
 8000e58:	025b      	lsls	r3, r3, #9
 8000e5a:	0b1c      	lsrs	r4, r3, #12
 8000e5c:	08d2      	lsrs	r2, r2, #3
 8000e5e:	2300      	movs	r3, #0
 8000e60:	4315      	orrs	r5, r2
 8000e62:	e580      	b.n	8000966 <__aeabi_ddiv+0xae>
 8000e64:	9800      	ldr	r0, [sp, #0]
 8000e66:	3d02      	subs	r5, #2
 8000e68:	0042      	lsls	r2, r0, #1
 8000e6a:	4282      	cmp	r2, r0
 8000e6c:	41bf      	sbcs	r7, r7
 8000e6e:	427f      	negs	r7, r7
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	1936      	adds	r6, r6, r4
 8000e74:	9200      	str	r2, [sp, #0]
 8000e76:	e7dd      	b.n	8000e34 <__aeabi_ddiv+0x57c>
 8000e78:	2480      	movs	r4, #128	; 0x80
 8000e7a:	4643      	mov	r3, r8
 8000e7c:	0324      	lsls	r4, r4, #12
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	0324      	lsls	r4, r4, #12
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__aeabi_ddiv+0x5dc>)
 8000e84:	0b24      	lsrs	r4, r4, #12
 8000e86:	e56e      	b.n	8000966 <__aeabi_ddiv+0xae>
 8000e88:	9a00      	ldr	r2, [sp, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d3ea      	bcc.n	8000e64 <__aeabi_ddiv+0x5ac>
 8000e8e:	0005      	movs	r5, r0
 8000e90:	e7d3      	b.n	8000e3a <__aeabi_ddiv+0x582>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	000007ff 	.word	0x000007ff
 8000e98:	0000043e 	.word	0x0000043e
 8000e9c:	0000041e 	.word	0x0000041e
 8000ea0:	000003ff 	.word	0x000003ff

08000ea4 <__aeabi_dmul>:
 8000ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea6:	4657      	mov	r7, sl
 8000ea8:	464e      	mov	r6, r9
 8000eaa:	4645      	mov	r5, r8
 8000eac:	46de      	mov	lr, fp
 8000eae:	b5e0      	push	{r5, r6, r7, lr}
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	030c      	lsls	r4, r1, #12
 8000eb4:	004b      	lsls	r3, r1, #1
 8000eb6:	0006      	movs	r6, r0
 8000eb8:	4692      	mov	sl, r2
 8000eba:	b087      	sub	sp, #28
 8000ebc:	0b24      	lsrs	r4, r4, #12
 8000ebe:	0d5b      	lsrs	r3, r3, #21
 8000ec0:	0fcf      	lsrs	r7, r1, #31
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_dmul+0x24>
 8000ec6:	e15c      	b.n	8001182 <__aeabi_dmul+0x2de>
 8000ec8:	4ad9      	ldr	r2, [pc, #868]	; (8001230 <__aeabi_dmul+0x38c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_dmul+0x2c>
 8000ece:	e175      	b.n	80011bc <__aeabi_dmul+0x318>
 8000ed0:	0f42      	lsrs	r2, r0, #29
 8000ed2:	00e4      	lsls	r4, r4, #3
 8000ed4:	4314      	orrs	r4, r2
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	0412      	lsls	r2, r2, #16
 8000eda:	4314      	orrs	r4, r2
 8000edc:	4ad5      	ldr	r2, [pc, #852]	; (8001234 <__aeabi_dmul+0x390>)
 8000ede:	00c5      	lsls	r5, r0, #3
 8000ee0:	4694      	mov	ip, r2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	4699      	mov	r9, r3
 8000eea:	469b      	mov	fp, r3
 8000eec:	4643      	mov	r3, r8
 8000eee:	4642      	mov	r2, r8
 8000ef0:	031e      	lsls	r6, r3, #12
 8000ef2:	0fd2      	lsrs	r2, r2, #31
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	4690      	mov	r8, r2
 8000efa:	0b36      	lsrs	r6, r6, #12
 8000efc:	0d5b      	lsrs	r3, r3, #21
 8000efe:	d100      	bne.n	8000f02 <__aeabi_dmul+0x5e>
 8000f00:	e120      	b.n	8001144 <__aeabi_dmul+0x2a0>
 8000f02:	4acb      	ldr	r2, [pc, #812]	; (8001230 <__aeabi_dmul+0x38c>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d100      	bne.n	8000f0a <__aeabi_dmul+0x66>
 8000f08:	e162      	b.n	80011d0 <__aeabi_dmul+0x32c>
 8000f0a:	49ca      	ldr	r1, [pc, #808]	; (8001234 <__aeabi_dmul+0x390>)
 8000f0c:	0f42      	lsrs	r2, r0, #29
 8000f0e:	468c      	mov	ip, r1
 8000f10:	9900      	ldr	r1, [sp, #0]
 8000f12:	4463      	add	r3, ip
 8000f14:	00f6      	lsls	r6, r6, #3
 8000f16:	468c      	mov	ip, r1
 8000f18:	4316      	orrs	r6, r2
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	449c      	add	ip, r3
 8000f1e:	0412      	lsls	r2, r2, #16
 8000f20:	4663      	mov	r3, ip
 8000f22:	4316      	orrs	r6, r2
 8000f24:	00c2      	lsls	r2, r0, #3
 8000f26:	2000      	movs	r0, #0
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	9900      	ldr	r1, [sp, #0]
 8000f2c:	4643      	mov	r3, r8
 8000f2e:	3101      	adds	r1, #1
 8000f30:	468c      	mov	ip, r1
 8000f32:	4649      	mov	r1, r9
 8000f34:	407b      	eors	r3, r7
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	290f      	cmp	r1, #15
 8000f3a:	d826      	bhi.n	8000f8a <__aeabi_dmul+0xe6>
 8000f3c:	4bbe      	ldr	r3, [pc, #760]	; (8001238 <__aeabi_dmul+0x394>)
 8000f3e:	0089      	lsls	r1, r1, #2
 8000f40:	5859      	ldr	r1, [r3, r1]
 8000f42:	468f      	mov	pc, r1
 8000f44:	4643      	mov	r3, r8
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	0034      	movs	r4, r6
 8000f4a:	0015      	movs	r5, r2
 8000f4c:	4683      	mov	fp, r0
 8000f4e:	465b      	mov	r3, fp
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d016      	beq.n	8000f82 <__aeabi_dmul+0xde>
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dmul+0xb6>
 8000f58:	e203      	b.n	8001362 <__aeabi_dmul+0x4be>
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_dmul+0xbc>
 8000f5e:	e0cd      	b.n	80010fc <__aeabi_dmul+0x258>
 8000f60:	2200      	movs	r2, #0
 8000f62:	2400      	movs	r4, #0
 8000f64:	2500      	movs	r5, #0
 8000f66:	9b01      	ldr	r3, [sp, #4]
 8000f68:	0512      	lsls	r2, r2, #20
 8000f6a:	4322      	orrs	r2, r4
 8000f6c:	07db      	lsls	r3, r3, #31
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	0028      	movs	r0, r5
 8000f72:	0011      	movs	r1, r2
 8000f74:	b007      	add	sp, #28
 8000f76:	bcf0      	pop	{r4, r5, r6, r7}
 8000f78:	46bb      	mov	fp, r7
 8000f7a:	46b2      	mov	sl, r6
 8000f7c:	46a9      	mov	r9, r5
 8000f7e:	46a0      	mov	r8, r4
 8000f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f82:	2400      	movs	r4, #0
 8000f84:	2500      	movs	r5, #0
 8000f86:	4aaa      	ldr	r2, [pc, #680]	; (8001230 <__aeabi_dmul+0x38c>)
 8000f88:	e7ed      	b.n	8000f66 <__aeabi_dmul+0xc2>
 8000f8a:	0c28      	lsrs	r0, r5, #16
 8000f8c:	042d      	lsls	r5, r5, #16
 8000f8e:	0c2d      	lsrs	r5, r5, #16
 8000f90:	002b      	movs	r3, r5
 8000f92:	0c11      	lsrs	r1, r2, #16
 8000f94:	0412      	lsls	r2, r2, #16
 8000f96:	0c12      	lsrs	r2, r2, #16
 8000f98:	4353      	muls	r3, r2
 8000f9a:	4698      	mov	r8, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	002f      	movs	r7, r5
 8000fa0:	4343      	muls	r3, r0
 8000fa2:	4699      	mov	r9, r3
 8000fa4:	434f      	muls	r7, r1
 8000fa6:	444f      	add	r7, r9
 8000fa8:	46bb      	mov	fp, r7
 8000faa:	4647      	mov	r7, r8
 8000fac:	000b      	movs	r3, r1
 8000fae:	0c3f      	lsrs	r7, r7, #16
 8000fb0:	46ba      	mov	sl, r7
 8000fb2:	4343      	muls	r3, r0
 8000fb4:	44da      	add	sl, fp
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	45d1      	cmp	r9, sl
 8000fba:	d904      	bls.n	8000fc6 <__aeabi_dmul+0x122>
 8000fbc:	2780      	movs	r7, #128	; 0x80
 8000fbe:	027f      	lsls	r7, r7, #9
 8000fc0:	46b9      	mov	r9, r7
 8000fc2:	444b      	add	r3, r9
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	4653      	mov	r3, sl
 8000fc8:	0c1b      	lsrs	r3, r3, #16
 8000fca:	469b      	mov	fp, r3
 8000fcc:	4653      	mov	r3, sl
 8000fce:	041f      	lsls	r7, r3, #16
 8000fd0:	4643      	mov	r3, r8
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	0c1b      	lsrs	r3, r3, #16
 8000fd6:	4698      	mov	r8, r3
 8000fd8:	003b      	movs	r3, r7
 8000fda:	4443      	add	r3, r8
 8000fdc:	9304      	str	r3, [sp, #16]
 8000fde:	0c33      	lsrs	r3, r6, #16
 8000fe0:	0436      	lsls	r6, r6, #16
 8000fe2:	0c36      	lsrs	r6, r6, #16
 8000fe4:	4698      	mov	r8, r3
 8000fe6:	0033      	movs	r3, r6
 8000fe8:	4343      	muls	r3, r0
 8000fea:	4699      	mov	r9, r3
 8000fec:	4643      	mov	r3, r8
 8000fee:	4343      	muls	r3, r0
 8000ff0:	002f      	movs	r7, r5
 8000ff2:	469a      	mov	sl, r3
 8000ff4:	4643      	mov	r3, r8
 8000ff6:	4377      	muls	r7, r6
 8000ff8:	435d      	muls	r5, r3
 8000ffa:	0c38      	lsrs	r0, r7, #16
 8000ffc:	444d      	add	r5, r9
 8000ffe:	1945      	adds	r5, r0, r5
 8001000:	45a9      	cmp	r9, r5
 8001002:	d903      	bls.n	800100c <__aeabi_dmul+0x168>
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	025b      	lsls	r3, r3, #9
 8001008:	4699      	mov	r9, r3
 800100a:	44ca      	add	sl, r9
 800100c:	043f      	lsls	r7, r7, #16
 800100e:	0c28      	lsrs	r0, r5, #16
 8001010:	0c3f      	lsrs	r7, r7, #16
 8001012:	042d      	lsls	r5, r5, #16
 8001014:	19ed      	adds	r5, r5, r7
 8001016:	0c27      	lsrs	r7, r4, #16
 8001018:	0424      	lsls	r4, r4, #16
 800101a:	0c24      	lsrs	r4, r4, #16
 800101c:	0003      	movs	r3, r0
 800101e:	0020      	movs	r0, r4
 8001020:	4350      	muls	r0, r2
 8001022:	437a      	muls	r2, r7
 8001024:	4691      	mov	r9, r2
 8001026:	003a      	movs	r2, r7
 8001028:	4453      	add	r3, sl
 800102a:	9305      	str	r3, [sp, #20]
 800102c:	0c03      	lsrs	r3, r0, #16
 800102e:	469a      	mov	sl, r3
 8001030:	434a      	muls	r2, r1
 8001032:	4361      	muls	r1, r4
 8001034:	4449      	add	r1, r9
 8001036:	4451      	add	r1, sl
 8001038:	44ab      	add	fp, r5
 800103a:	4589      	cmp	r9, r1
 800103c:	d903      	bls.n	8001046 <__aeabi_dmul+0x1a2>
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	025b      	lsls	r3, r3, #9
 8001042:	4699      	mov	r9, r3
 8001044:	444a      	add	r2, r9
 8001046:	0400      	lsls	r0, r0, #16
 8001048:	0c0b      	lsrs	r3, r1, #16
 800104a:	0c00      	lsrs	r0, r0, #16
 800104c:	0409      	lsls	r1, r1, #16
 800104e:	1809      	adds	r1, r1, r0
 8001050:	0020      	movs	r0, r4
 8001052:	4699      	mov	r9, r3
 8001054:	4643      	mov	r3, r8
 8001056:	4370      	muls	r0, r6
 8001058:	435c      	muls	r4, r3
 800105a:	437e      	muls	r6, r7
 800105c:	435f      	muls	r7, r3
 800105e:	0c03      	lsrs	r3, r0, #16
 8001060:	4698      	mov	r8, r3
 8001062:	19a4      	adds	r4, r4, r6
 8001064:	4444      	add	r4, r8
 8001066:	444a      	add	r2, r9
 8001068:	9703      	str	r7, [sp, #12]
 800106a:	42a6      	cmp	r6, r4
 800106c:	d904      	bls.n	8001078 <__aeabi_dmul+0x1d4>
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	025b      	lsls	r3, r3, #9
 8001072:	4698      	mov	r8, r3
 8001074:	4447      	add	r7, r8
 8001076:	9703      	str	r7, [sp, #12]
 8001078:	0423      	lsls	r3, r4, #16
 800107a:	9e02      	ldr	r6, [sp, #8]
 800107c:	469a      	mov	sl, r3
 800107e:	9b05      	ldr	r3, [sp, #20]
 8001080:	445e      	add	r6, fp
 8001082:	4698      	mov	r8, r3
 8001084:	42ae      	cmp	r6, r5
 8001086:	41ad      	sbcs	r5, r5
 8001088:	1876      	adds	r6, r6, r1
 800108a:	428e      	cmp	r6, r1
 800108c:	4189      	sbcs	r1, r1
 800108e:	0400      	lsls	r0, r0, #16
 8001090:	0c00      	lsrs	r0, r0, #16
 8001092:	4450      	add	r0, sl
 8001094:	4440      	add	r0, r8
 8001096:	426d      	negs	r5, r5
 8001098:	1947      	adds	r7, r0, r5
 800109a:	46b8      	mov	r8, r7
 800109c:	4693      	mov	fp, r2
 800109e:	4249      	negs	r1, r1
 80010a0:	4689      	mov	r9, r1
 80010a2:	44c3      	add	fp, r8
 80010a4:	44d9      	add	r9, fp
 80010a6:	4298      	cmp	r0, r3
 80010a8:	4180      	sbcs	r0, r0
 80010aa:	45a8      	cmp	r8, r5
 80010ac:	41ad      	sbcs	r5, r5
 80010ae:	4593      	cmp	fp, r2
 80010b0:	4192      	sbcs	r2, r2
 80010b2:	4589      	cmp	r9, r1
 80010b4:	4189      	sbcs	r1, r1
 80010b6:	426d      	negs	r5, r5
 80010b8:	4240      	negs	r0, r0
 80010ba:	4328      	orrs	r0, r5
 80010bc:	0c24      	lsrs	r4, r4, #16
 80010be:	4252      	negs	r2, r2
 80010c0:	4249      	negs	r1, r1
 80010c2:	430a      	orrs	r2, r1
 80010c4:	9b03      	ldr	r3, [sp, #12]
 80010c6:	1900      	adds	r0, r0, r4
 80010c8:	1880      	adds	r0, r0, r2
 80010ca:	18c7      	adds	r7, r0, r3
 80010cc:	464b      	mov	r3, r9
 80010ce:	0ddc      	lsrs	r4, r3, #23
 80010d0:	9b04      	ldr	r3, [sp, #16]
 80010d2:	0275      	lsls	r5, r6, #9
 80010d4:	431d      	orrs	r5, r3
 80010d6:	1e6a      	subs	r2, r5, #1
 80010d8:	4195      	sbcs	r5, r2
 80010da:	464b      	mov	r3, r9
 80010dc:	0df6      	lsrs	r6, r6, #23
 80010de:	027f      	lsls	r7, r7, #9
 80010e0:	4335      	orrs	r5, r6
 80010e2:	025a      	lsls	r2, r3, #9
 80010e4:	433c      	orrs	r4, r7
 80010e6:	4315      	orrs	r5, r2
 80010e8:	01fb      	lsls	r3, r7, #7
 80010ea:	d400      	bmi.n	80010ee <__aeabi_dmul+0x24a>
 80010ec:	e11c      	b.n	8001328 <__aeabi_dmul+0x484>
 80010ee:	2101      	movs	r1, #1
 80010f0:	086a      	lsrs	r2, r5, #1
 80010f2:	400d      	ands	r5, r1
 80010f4:	4315      	orrs	r5, r2
 80010f6:	07e2      	lsls	r2, r4, #31
 80010f8:	4315      	orrs	r5, r2
 80010fa:	0864      	lsrs	r4, r4, #1
 80010fc:	494f      	ldr	r1, [pc, #316]	; (800123c <__aeabi_dmul+0x398>)
 80010fe:	4461      	add	r1, ip
 8001100:	2900      	cmp	r1, #0
 8001102:	dc00      	bgt.n	8001106 <__aeabi_dmul+0x262>
 8001104:	e0b0      	b.n	8001268 <__aeabi_dmul+0x3c4>
 8001106:	076b      	lsls	r3, r5, #29
 8001108:	d009      	beq.n	800111e <__aeabi_dmul+0x27a>
 800110a:	220f      	movs	r2, #15
 800110c:	402a      	ands	r2, r5
 800110e:	2a04      	cmp	r2, #4
 8001110:	d005      	beq.n	800111e <__aeabi_dmul+0x27a>
 8001112:	1d2a      	adds	r2, r5, #4
 8001114:	42aa      	cmp	r2, r5
 8001116:	41ad      	sbcs	r5, r5
 8001118:	426d      	negs	r5, r5
 800111a:	1964      	adds	r4, r4, r5
 800111c:	0015      	movs	r5, r2
 800111e:	01e3      	lsls	r3, r4, #7
 8001120:	d504      	bpl.n	800112c <__aeabi_dmul+0x288>
 8001122:	2180      	movs	r1, #128	; 0x80
 8001124:	4a46      	ldr	r2, [pc, #280]	; (8001240 <__aeabi_dmul+0x39c>)
 8001126:	00c9      	lsls	r1, r1, #3
 8001128:	4014      	ands	r4, r2
 800112a:	4461      	add	r1, ip
 800112c:	4a45      	ldr	r2, [pc, #276]	; (8001244 <__aeabi_dmul+0x3a0>)
 800112e:	4291      	cmp	r1, r2
 8001130:	dd00      	ble.n	8001134 <__aeabi_dmul+0x290>
 8001132:	e726      	b.n	8000f82 <__aeabi_dmul+0xde>
 8001134:	0762      	lsls	r2, r4, #29
 8001136:	08ed      	lsrs	r5, r5, #3
 8001138:	0264      	lsls	r4, r4, #9
 800113a:	0549      	lsls	r1, r1, #21
 800113c:	4315      	orrs	r5, r2
 800113e:	0b24      	lsrs	r4, r4, #12
 8001140:	0d4a      	lsrs	r2, r1, #21
 8001142:	e710      	b.n	8000f66 <__aeabi_dmul+0xc2>
 8001144:	4652      	mov	r2, sl
 8001146:	4332      	orrs	r2, r6
 8001148:	d100      	bne.n	800114c <__aeabi_dmul+0x2a8>
 800114a:	e07f      	b.n	800124c <__aeabi_dmul+0x3a8>
 800114c:	2e00      	cmp	r6, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_dmul+0x2ae>
 8001150:	e0dc      	b.n	800130c <__aeabi_dmul+0x468>
 8001152:	0030      	movs	r0, r6
 8001154:	f000 f9c0 	bl	80014d8 <__clzsi2>
 8001158:	0002      	movs	r2, r0
 800115a:	3a0b      	subs	r2, #11
 800115c:	231d      	movs	r3, #29
 800115e:	0001      	movs	r1, r0
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	4652      	mov	r2, sl
 8001164:	3908      	subs	r1, #8
 8001166:	40da      	lsrs	r2, r3
 8001168:	408e      	lsls	r6, r1
 800116a:	4316      	orrs	r6, r2
 800116c:	4652      	mov	r2, sl
 800116e:	408a      	lsls	r2, r1
 8001170:	9b00      	ldr	r3, [sp, #0]
 8001172:	4935      	ldr	r1, [pc, #212]	; (8001248 <__aeabi_dmul+0x3a4>)
 8001174:	1a18      	subs	r0, r3, r0
 8001176:	0003      	movs	r3, r0
 8001178:	468c      	mov	ip, r1
 800117a:	4463      	add	r3, ip
 800117c:	2000      	movs	r0, #0
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	e6d3      	b.n	8000f2a <__aeabi_dmul+0x86>
 8001182:	0025      	movs	r5, r4
 8001184:	4305      	orrs	r5, r0
 8001186:	d04a      	beq.n	800121e <__aeabi_dmul+0x37a>
 8001188:	2c00      	cmp	r4, #0
 800118a:	d100      	bne.n	800118e <__aeabi_dmul+0x2ea>
 800118c:	e0b0      	b.n	80012f0 <__aeabi_dmul+0x44c>
 800118e:	0020      	movs	r0, r4
 8001190:	f000 f9a2 	bl	80014d8 <__clzsi2>
 8001194:	0001      	movs	r1, r0
 8001196:	0002      	movs	r2, r0
 8001198:	390b      	subs	r1, #11
 800119a:	231d      	movs	r3, #29
 800119c:	0010      	movs	r0, r2
 800119e:	1a5b      	subs	r3, r3, r1
 80011a0:	0031      	movs	r1, r6
 80011a2:	0035      	movs	r5, r6
 80011a4:	3808      	subs	r0, #8
 80011a6:	4084      	lsls	r4, r0
 80011a8:	40d9      	lsrs	r1, r3
 80011aa:	4085      	lsls	r5, r0
 80011ac:	430c      	orrs	r4, r1
 80011ae:	4826      	ldr	r0, [pc, #152]	; (8001248 <__aeabi_dmul+0x3a4>)
 80011b0:	1a83      	subs	r3, r0, r2
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2300      	movs	r3, #0
 80011b6:	4699      	mov	r9, r3
 80011b8:	469b      	mov	fp, r3
 80011ba:	e697      	b.n	8000eec <__aeabi_dmul+0x48>
 80011bc:	0005      	movs	r5, r0
 80011be:	4325      	orrs	r5, r4
 80011c0:	d126      	bne.n	8001210 <__aeabi_dmul+0x36c>
 80011c2:	2208      	movs	r2, #8
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2302      	movs	r3, #2
 80011c8:	2400      	movs	r4, #0
 80011ca:	4691      	mov	r9, r2
 80011cc:	469b      	mov	fp, r3
 80011ce:	e68d      	b.n	8000eec <__aeabi_dmul+0x48>
 80011d0:	4652      	mov	r2, sl
 80011d2:	9b00      	ldr	r3, [sp, #0]
 80011d4:	4332      	orrs	r2, r6
 80011d6:	d110      	bne.n	80011fa <__aeabi_dmul+0x356>
 80011d8:	4915      	ldr	r1, [pc, #84]	; (8001230 <__aeabi_dmul+0x38c>)
 80011da:	2600      	movs	r6, #0
 80011dc:	468c      	mov	ip, r1
 80011de:	4463      	add	r3, ip
 80011e0:	4649      	mov	r1, r9
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2302      	movs	r3, #2
 80011e6:	4319      	orrs	r1, r3
 80011e8:	4689      	mov	r9, r1
 80011ea:	2002      	movs	r0, #2
 80011ec:	e69d      	b.n	8000f2a <__aeabi_dmul+0x86>
 80011ee:	465b      	mov	r3, fp
 80011f0:	9701      	str	r7, [sp, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d000      	beq.n	80011f8 <__aeabi_dmul+0x354>
 80011f6:	e6ad      	b.n	8000f54 <__aeabi_dmul+0xb0>
 80011f8:	e6c3      	b.n	8000f82 <__aeabi_dmul+0xde>
 80011fa:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <__aeabi_dmul+0x38c>)
 80011fc:	2003      	movs	r0, #3
 80011fe:	4694      	mov	ip, r2
 8001200:	4463      	add	r3, ip
 8001202:	464a      	mov	r2, r9
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2303      	movs	r3, #3
 8001208:	431a      	orrs	r2, r3
 800120a:	4691      	mov	r9, r2
 800120c:	4652      	mov	r2, sl
 800120e:	e68c      	b.n	8000f2a <__aeabi_dmul+0x86>
 8001210:	220c      	movs	r2, #12
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2303      	movs	r3, #3
 8001216:	0005      	movs	r5, r0
 8001218:	4691      	mov	r9, r2
 800121a:	469b      	mov	fp, r3
 800121c:	e666      	b.n	8000eec <__aeabi_dmul+0x48>
 800121e:	2304      	movs	r3, #4
 8001220:	4699      	mov	r9, r3
 8001222:	2300      	movs	r3, #0
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	2400      	movs	r4, #0
 800122a:	469b      	mov	fp, r3
 800122c:	e65e      	b.n	8000eec <__aeabi_dmul+0x48>
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	000007ff 	.word	0x000007ff
 8001234:	fffffc01 	.word	0xfffffc01
 8001238:	08006680 	.word	0x08006680
 800123c:	000003ff 	.word	0x000003ff
 8001240:	feffffff 	.word	0xfeffffff
 8001244:	000007fe 	.word	0x000007fe
 8001248:	fffffc0d 	.word	0xfffffc0d
 800124c:	4649      	mov	r1, r9
 800124e:	2301      	movs	r3, #1
 8001250:	4319      	orrs	r1, r3
 8001252:	4689      	mov	r9, r1
 8001254:	2600      	movs	r6, #0
 8001256:	2001      	movs	r0, #1
 8001258:	e667      	b.n	8000f2a <__aeabi_dmul+0x86>
 800125a:	2300      	movs	r3, #0
 800125c:	2480      	movs	r4, #128	; 0x80
 800125e:	2500      	movs	r5, #0
 8001260:	4a43      	ldr	r2, [pc, #268]	; (8001370 <__aeabi_dmul+0x4cc>)
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	0324      	lsls	r4, r4, #12
 8001266:	e67e      	b.n	8000f66 <__aeabi_dmul+0xc2>
 8001268:	2001      	movs	r0, #1
 800126a:	1a40      	subs	r0, r0, r1
 800126c:	2838      	cmp	r0, #56	; 0x38
 800126e:	dd00      	ble.n	8001272 <__aeabi_dmul+0x3ce>
 8001270:	e676      	b.n	8000f60 <__aeabi_dmul+0xbc>
 8001272:	281f      	cmp	r0, #31
 8001274:	dd5b      	ble.n	800132e <__aeabi_dmul+0x48a>
 8001276:	221f      	movs	r2, #31
 8001278:	0023      	movs	r3, r4
 800127a:	4252      	negs	r2, r2
 800127c:	1a51      	subs	r1, r2, r1
 800127e:	40cb      	lsrs	r3, r1
 8001280:	0019      	movs	r1, r3
 8001282:	2820      	cmp	r0, #32
 8001284:	d003      	beq.n	800128e <__aeabi_dmul+0x3ea>
 8001286:	4a3b      	ldr	r2, [pc, #236]	; (8001374 <__aeabi_dmul+0x4d0>)
 8001288:	4462      	add	r2, ip
 800128a:	4094      	lsls	r4, r2
 800128c:	4325      	orrs	r5, r4
 800128e:	1e6a      	subs	r2, r5, #1
 8001290:	4195      	sbcs	r5, r2
 8001292:	002a      	movs	r2, r5
 8001294:	430a      	orrs	r2, r1
 8001296:	2107      	movs	r1, #7
 8001298:	000d      	movs	r5, r1
 800129a:	2400      	movs	r4, #0
 800129c:	4015      	ands	r5, r2
 800129e:	4211      	tst	r1, r2
 80012a0:	d05b      	beq.n	800135a <__aeabi_dmul+0x4b6>
 80012a2:	210f      	movs	r1, #15
 80012a4:	2400      	movs	r4, #0
 80012a6:	4011      	ands	r1, r2
 80012a8:	2904      	cmp	r1, #4
 80012aa:	d053      	beq.n	8001354 <__aeabi_dmul+0x4b0>
 80012ac:	1d11      	adds	r1, r2, #4
 80012ae:	4291      	cmp	r1, r2
 80012b0:	4192      	sbcs	r2, r2
 80012b2:	4252      	negs	r2, r2
 80012b4:	18a4      	adds	r4, r4, r2
 80012b6:	000a      	movs	r2, r1
 80012b8:	0223      	lsls	r3, r4, #8
 80012ba:	d54b      	bpl.n	8001354 <__aeabi_dmul+0x4b0>
 80012bc:	2201      	movs	r2, #1
 80012be:	2400      	movs	r4, #0
 80012c0:	2500      	movs	r5, #0
 80012c2:	e650      	b.n	8000f66 <__aeabi_dmul+0xc2>
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	031b      	lsls	r3, r3, #12
 80012c8:	421c      	tst	r4, r3
 80012ca:	d009      	beq.n	80012e0 <__aeabi_dmul+0x43c>
 80012cc:	421e      	tst	r6, r3
 80012ce:	d107      	bne.n	80012e0 <__aeabi_dmul+0x43c>
 80012d0:	4333      	orrs	r3, r6
 80012d2:	031c      	lsls	r4, r3, #12
 80012d4:	4643      	mov	r3, r8
 80012d6:	0015      	movs	r5, r2
 80012d8:	0b24      	lsrs	r4, r4, #12
 80012da:	4a25      	ldr	r2, [pc, #148]	; (8001370 <__aeabi_dmul+0x4cc>)
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	e642      	b.n	8000f66 <__aeabi_dmul+0xc2>
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	0312      	lsls	r2, r2, #12
 80012e4:	4314      	orrs	r4, r2
 80012e6:	0324      	lsls	r4, r4, #12
 80012e8:	4a21      	ldr	r2, [pc, #132]	; (8001370 <__aeabi_dmul+0x4cc>)
 80012ea:	0b24      	lsrs	r4, r4, #12
 80012ec:	9701      	str	r7, [sp, #4]
 80012ee:	e63a      	b.n	8000f66 <__aeabi_dmul+0xc2>
 80012f0:	f000 f8f2 	bl	80014d8 <__clzsi2>
 80012f4:	0001      	movs	r1, r0
 80012f6:	0002      	movs	r2, r0
 80012f8:	3115      	adds	r1, #21
 80012fa:	3220      	adds	r2, #32
 80012fc:	291c      	cmp	r1, #28
 80012fe:	dc00      	bgt.n	8001302 <__aeabi_dmul+0x45e>
 8001300:	e74b      	b.n	800119a <__aeabi_dmul+0x2f6>
 8001302:	0034      	movs	r4, r6
 8001304:	3808      	subs	r0, #8
 8001306:	2500      	movs	r5, #0
 8001308:	4084      	lsls	r4, r0
 800130a:	e750      	b.n	80011ae <__aeabi_dmul+0x30a>
 800130c:	f000 f8e4 	bl	80014d8 <__clzsi2>
 8001310:	0003      	movs	r3, r0
 8001312:	001a      	movs	r2, r3
 8001314:	3215      	adds	r2, #21
 8001316:	3020      	adds	r0, #32
 8001318:	2a1c      	cmp	r2, #28
 800131a:	dc00      	bgt.n	800131e <__aeabi_dmul+0x47a>
 800131c:	e71e      	b.n	800115c <__aeabi_dmul+0x2b8>
 800131e:	4656      	mov	r6, sl
 8001320:	3b08      	subs	r3, #8
 8001322:	2200      	movs	r2, #0
 8001324:	409e      	lsls	r6, r3
 8001326:	e723      	b.n	8001170 <__aeabi_dmul+0x2cc>
 8001328:	9b00      	ldr	r3, [sp, #0]
 800132a:	469c      	mov	ip, r3
 800132c:	e6e6      	b.n	80010fc <__aeabi_dmul+0x258>
 800132e:	4912      	ldr	r1, [pc, #72]	; (8001378 <__aeabi_dmul+0x4d4>)
 8001330:	0022      	movs	r2, r4
 8001332:	4461      	add	r1, ip
 8001334:	002e      	movs	r6, r5
 8001336:	408d      	lsls	r5, r1
 8001338:	408a      	lsls	r2, r1
 800133a:	40c6      	lsrs	r6, r0
 800133c:	1e69      	subs	r1, r5, #1
 800133e:	418d      	sbcs	r5, r1
 8001340:	4332      	orrs	r2, r6
 8001342:	432a      	orrs	r2, r5
 8001344:	40c4      	lsrs	r4, r0
 8001346:	0753      	lsls	r3, r2, #29
 8001348:	d0b6      	beq.n	80012b8 <__aeabi_dmul+0x414>
 800134a:	210f      	movs	r1, #15
 800134c:	4011      	ands	r1, r2
 800134e:	2904      	cmp	r1, #4
 8001350:	d1ac      	bne.n	80012ac <__aeabi_dmul+0x408>
 8001352:	e7b1      	b.n	80012b8 <__aeabi_dmul+0x414>
 8001354:	0765      	lsls	r5, r4, #29
 8001356:	0264      	lsls	r4, r4, #9
 8001358:	0b24      	lsrs	r4, r4, #12
 800135a:	08d2      	lsrs	r2, r2, #3
 800135c:	4315      	orrs	r5, r2
 800135e:	2200      	movs	r2, #0
 8001360:	e601      	b.n	8000f66 <__aeabi_dmul+0xc2>
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	0312      	lsls	r2, r2, #12
 8001366:	4314      	orrs	r4, r2
 8001368:	0324      	lsls	r4, r4, #12
 800136a:	4a01      	ldr	r2, [pc, #4]	; (8001370 <__aeabi_dmul+0x4cc>)
 800136c:	0b24      	lsrs	r4, r4, #12
 800136e:	e5fa      	b.n	8000f66 <__aeabi_dmul+0xc2>
 8001370:	000007ff 	.word	0x000007ff
 8001374:	0000043e 	.word	0x0000043e
 8001378:	0000041e 	.word	0x0000041e

0800137c <__aeabi_ui2d>:
 800137c:	b510      	push	{r4, lr}
 800137e:	1e04      	subs	r4, r0, #0
 8001380:	d010      	beq.n	80013a4 <__aeabi_ui2d+0x28>
 8001382:	f000 f8a9 	bl	80014d8 <__clzsi2>
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <__aeabi_ui2d+0x48>)
 8001388:	1a1b      	subs	r3, r3, r0
 800138a:	280a      	cmp	r0, #10
 800138c:	dc11      	bgt.n	80013b2 <__aeabi_ui2d+0x36>
 800138e:	220b      	movs	r2, #11
 8001390:	0021      	movs	r1, r4
 8001392:	1a12      	subs	r2, r2, r0
 8001394:	40d1      	lsrs	r1, r2
 8001396:	3015      	adds	r0, #21
 8001398:	030a      	lsls	r2, r1, #12
 800139a:	055b      	lsls	r3, r3, #21
 800139c:	4084      	lsls	r4, r0
 800139e:	0b12      	lsrs	r2, r2, #12
 80013a0:	0d5b      	lsrs	r3, r3, #21
 80013a2:	e001      	b.n	80013a8 <__aeabi_ui2d+0x2c>
 80013a4:	2300      	movs	r3, #0
 80013a6:	2200      	movs	r2, #0
 80013a8:	051b      	lsls	r3, r3, #20
 80013aa:	4313      	orrs	r3, r2
 80013ac:	0020      	movs	r0, r4
 80013ae:	0019      	movs	r1, r3
 80013b0:	bd10      	pop	{r4, pc}
 80013b2:	0022      	movs	r2, r4
 80013b4:	380b      	subs	r0, #11
 80013b6:	4082      	lsls	r2, r0
 80013b8:	055b      	lsls	r3, r3, #21
 80013ba:	0312      	lsls	r2, r2, #12
 80013bc:	2400      	movs	r4, #0
 80013be:	0b12      	lsrs	r2, r2, #12
 80013c0:	0d5b      	lsrs	r3, r3, #21
 80013c2:	e7f1      	b.n	80013a8 <__aeabi_ui2d+0x2c>
 80013c4:	0000041e 	.word	0x0000041e

080013c8 <__aeabi_d2f>:
 80013c8:	0002      	movs	r2, r0
 80013ca:	004b      	lsls	r3, r1, #1
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	0d5b      	lsrs	r3, r3, #21
 80013d0:	030c      	lsls	r4, r1, #12
 80013d2:	4e3d      	ldr	r6, [pc, #244]	; (80014c8 <__aeabi_d2f+0x100>)
 80013d4:	0a64      	lsrs	r4, r4, #9
 80013d6:	0f40      	lsrs	r0, r0, #29
 80013d8:	1c5f      	adds	r7, r3, #1
 80013da:	0fc9      	lsrs	r1, r1, #31
 80013dc:	4304      	orrs	r4, r0
 80013de:	00d5      	lsls	r5, r2, #3
 80013e0:	4237      	tst	r7, r6
 80013e2:	d00a      	beq.n	80013fa <__aeabi_d2f+0x32>
 80013e4:	4839      	ldr	r0, [pc, #228]	; (80014cc <__aeabi_d2f+0x104>)
 80013e6:	181e      	adds	r6, r3, r0
 80013e8:	2efe      	cmp	r6, #254	; 0xfe
 80013ea:	dd16      	ble.n	800141a <__aeabi_d2f+0x52>
 80013ec:	20ff      	movs	r0, #255	; 0xff
 80013ee:	2400      	movs	r4, #0
 80013f0:	05c0      	lsls	r0, r0, #23
 80013f2:	4320      	orrs	r0, r4
 80013f4:	07c9      	lsls	r1, r1, #31
 80013f6:	4308      	orrs	r0, r1
 80013f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <__aeabi_d2f+0x44>
 80013fe:	432c      	orrs	r4, r5
 8001400:	d026      	beq.n	8001450 <__aeabi_d2f+0x88>
 8001402:	2205      	movs	r2, #5
 8001404:	0192      	lsls	r2, r2, #6
 8001406:	0a54      	lsrs	r4, r2, #9
 8001408:	b2d8      	uxtb	r0, r3
 800140a:	e7f1      	b.n	80013f0 <__aeabi_d2f+0x28>
 800140c:	4325      	orrs	r5, r4
 800140e:	d0ed      	beq.n	80013ec <__aeabi_d2f+0x24>
 8001410:	2080      	movs	r0, #128	; 0x80
 8001412:	03c0      	lsls	r0, r0, #15
 8001414:	4304      	orrs	r4, r0
 8001416:	20ff      	movs	r0, #255	; 0xff
 8001418:	e7ea      	b.n	80013f0 <__aeabi_d2f+0x28>
 800141a:	2e00      	cmp	r6, #0
 800141c:	dd1b      	ble.n	8001456 <__aeabi_d2f+0x8e>
 800141e:	0192      	lsls	r2, r2, #6
 8001420:	1e53      	subs	r3, r2, #1
 8001422:	419a      	sbcs	r2, r3
 8001424:	00e4      	lsls	r4, r4, #3
 8001426:	0f6d      	lsrs	r5, r5, #29
 8001428:	4322      	orrs	r2, r4
 800142a:	432a      	orrs	r2, r5
 800142c:	0753      	lsls	r3, r2, #29
 800142e:	d048      	beq.n	80014c2 <__aeabi_d2f+0xfa>
 8001430:	230f      	movs	r3, #15
 8001432:	4013      	ands	r3, r2
 8001434:	2b04      	cmp	r3, #4
 8001436:	d000      	beq.n	800143a <__aeabi_d2f+0x72>
 8001438:	3204      	adds	r2, #4
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	04db      	lsls	r3, r3, #19
 800143e:	4013      	ands	r3, r2
 8001440:	d03f      	beq.n	80014c2 <__aeabi_d2f+0xfa>
 8001442:	1c70      	adds	r0, r6, #1
 8001444:	2efe      	cmp	r6, #254	; 0xfe
 8001446:	d0d1      	beq.n	80013ec <__aeabi_d2f+0x24>
 8001448:	0192      	lsls	r2, r2, #6
 800144a:	0a54      	lsrs	r4, r2, #9
 800144c:	b2c0      	uxtb	r0, r0
 800144e:	e7cf      	b.n	80013f0 <__aeabi_d2f+0x28>
 8001450:	2000      	movs	r0, #0
 8001452:	2400      	movs	r4, #0
 8001454:	e7cc      	b.n	80013f0 <__aeabi_d2f+0x28>
 8001456:	0032      	movs	r2, r6
 8001458:	3217      	adds	r2, #23
 800145a:	db22      	blt.n	80014a2 <__aeabi_d2f+0xda>
 800145c:	2080      	movs	r0, #128	; 0x80
 800145e:	0400      	lsls	r0, r0, #16
 8001460:	4320      	orrs	r0, r4
 8001462:	241e      	movs	r4, #30
 8001464:	1ba4      	subs	r4, r4, r6
 8001466:	2c1f      	cmp	r4, #31
 8001468:	dd1d      	ble.n	80014a6 <__aeabi_d2f+0xde>
 800146a:	2202      	movs	r2, #2
 800146c:	4252      	negs	r2, r2
 800146e:	1b96      	subs	r6, r2, r6
 8001470:	0002      	movs	r2, r0
 8001472:	40f2      	lsrs	r2, r6
 8001474:	0016      	movs	r6, r2
 8001476:	2c20      	cmp	r4, #32
 8001478:	d004      	beq.n	8001484 <__aeabi_d2f+0xbc>
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <__aeabi_d2f+0x108>)
 800147c:	4694      	mov	ip, r2
 800147e:	4463      	add	r3, ip
 8001480:	4098      	lsls	r0, r3
 8001482:	4305      	orrs	r5, r0
 8001484:	002a      	movs	r2, r5
 8001486:	1e53      	subs	r3, r2, #1
 8001488:	419a      	sbcs	r2, r3
 800148a:	4332      	orrs	r2, r6
 800148c:	2600      	movs	r6, #0
 800148e:	0753      	lsls	r3, r2, #29
 8001490:	d1ce      	bne.n	8001430 <__aeabi_d2f+0x68>
 8001492:	2480      	movs	r4, #128	; 0x80
 8001494:	0013      	movs	r3, r2
 8001496:	04e4      	lsls	r4, r4, #19
 8001498:	2001      	movs	r0, #1
 800149a:	4023      	ands	r3, r4
 800149c:	4222      	tst	r2, r4
 800149e:	d1d3      	bne.n	8001448 <__aeabi_d2f+0x80>
 80014a0:	e7b0      	b.n	8001404 <__aeabi_d2f+0x3c>
 80014a2:	2300      	movs	r3, #0
 80014a4:	e7ad      	b.n	8001402 <__aeabi_d2f+0x3a>
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <__aeabi_d2f+0x10c>)
 80014a8:	4694      	mov	ip, r2
 80014aa:	002a      	movs	r2, r5
 80014ac:	40e2      	lsrs	r2, r4
 80014ae:	0014      	movs	r4, r2
 80014b0:	002a      	movs	r2, r5
 80014b2:	4463      	add	r3, ip
 80014b4:	409a      	lsls	r2, r3
 80014b6:	4098      	lsls	r0, r3
 80014b8:	1e55      	subs	r5, r2, #1
 80014ba:	41aa      	sbcs	r2, r5
 80014bc:	4302      	orrs	r2, r0
 80014be:	4322      	orrs	r2, r4
 80014c0:	e7e4      	b.n	800148c <__aeabi_d2f+0xc4>
 80014c2:	0033      	movs	r3, r6
 80014c4:	e79e      	b.n	8001404 <__aeabi_d2f+0x3c>
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	000007fe 	.word	0x000007fe
 80014cc:	fffffc80 	.word	0xfffffc80
 80014d0:	fffffca2 	.word	0xfffffca2
 80014d4:	fffffc82 	.word	0xfffffc82

080014d8 <__clzsi2>:
 80014d8:	211c      	movs	r1, #28
 80014da:	2301      	movs	r3, #1
 80014dc:	041b      	lsls	r3, r3, #16
 80014de:	4298      	cmp	r0, r3
 80014e0:	d301      	bcc.n	80014e6 <__clzsi2+0xe>
 80014e2:	0c00      	lsrs	r0, r0, #16
 80014e4:	3910      	subs	r1, #16
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	4298      	cmp	r0, r3
 80014ea:	d301      	bcc.n	80014f0 <__clzsi2+0x18>
 80014ec:	0a00      	lsrs	r0, r0, #8
 80014ee:	3908      	subs	r1, #8
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	4298      	cmp	r0, r3
 80014f4:	d301      	bcc.n	80014fa <__clzsi2+0x22>
 80014f6:	0900      	lsrs	r0, r0, #4
 80014f8:	3904      	subs	r1, #4
 80014fa:	a202      	add	r2, pc, #8	; (adr r2, 8001504 <__clzsi2+0x2c>)
 80014fc:	5c10      	ldrb	r0, [r2, r0]
 80014fe:	1840      	adds	r0, r0, r1
 8001500:	4770      	bx	lr
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	02020304 	.word	0x02020304
 8001508:	01010101 	.word	0x01010101
	...

08001514 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM3) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d102      	bne.n	800152c <HAL_TIM_PeriodElapsedCallback+0x18>
		T_100ms=255;
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001528:	22ff      	movs	r2, #255	; 0xff
 800152a:	701a      	strb	r2, [r3, #0]
	}
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b002      	add	sp, #8
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40000400 	.word	0x40000400
 8001538:	20000014 	.word	0x20000014

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f000 fea7 	bl	8002294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f95f 	bl	8001808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 fa4d 	bl	80019e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800154e:	f000 f9b3 	bl	80018b8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001552:	f000 f9f1 	bl	8001938 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001556:	4b94      	ldr	r3, [pc, #592]	; (80017a8 <main+0x26c>)
 8001558:	0018      	movs	r0, r3
 800155a:	f003 ffbf 	bl	80054dc <HAL_TIM_Base_Start_IT>

  SSD1306_Init (); // initialize the display
 800155e:	f000 fa6f 	bl	8001a40 <SSD1306_Init>

 HAL_I2C_Master_Transmit(&hi2c1, AHT10_ADRESS, &AHT10_InitComand,1,1000);
 8001562:	4a92      	ldr	r2, [pc, #584]	; (80017ac <main+0x270>)
 8001564:	4892      	ldr	r0, [pc, #584]	; (80017b0 <main+0x274>)
 8001566:	23fa      	movs	r3, #250	; 0xfa
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2301      	movs	r3, #1
 800156e:	2170      	movs	r1, #112	; 0x70
 8001570:	f001 fa4e 	bl	8002a10 <HAL_I2C_Master_Transmit>
 HAL_Delay(100);
 8001574:	2064      	movs	r0, #100	; 0x64
 8001576:	f000 fef1 	bl	800235c <HAL_Delay>
 HAL_I2C_Master_Transmit(&hi2c1, AHT10_ADRESS, &AHT10_SoftResetComand,1,1000);
 800157a:	4a8e      	ldr	r2, [pc, #568]	; (80017b4 <main+0x278>)
 800157c:	488c      	ldr	r0, [pc, #560]	; (80017b0 <main+0x274>)
 800157e:	23fa      	movs	r3, #250	; 0xfa
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	2170      	movs	r1, #112	; 0x70
 8001588:	f001 fa42 	bl	8002a10 <HAL_I2C_Master_Transmit>
 HAL_Delay(100);
 800158c:	2064      	movs	r0, #100	; 0x64
 800158e:	f000 fee5 	bl	800235c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (T_100ms) {
 8001592:	4b89      	ldr	r3, [pc, #548]	; (80017b8 <main+0x27c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d078      	beq.n	800168c <main+0x150>
		if (AHT10_Switcher)
 800159a:	4b88      	ldr	r3, [pc, #544]	; (80017bc <main+0x280>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <main+0x74>
		{
			HAL_I2C_Master_Transmit_IT(&hi2c1, AHT10_ADRESS, &AHT10_TmpHumdComand,1);
 80015a2:	4a87      	ldr	r2, [pc, #540]	; (80017c0 <main+0x284>)
 80015a4:	4882      	ldr	r0, [pc, #520]	; (80017b0 <main+0x274>)
 80015a6:	2301      	movs	r3, #1
 80015a8:	2170      	movs	r1, #112	; 0x70
 80015aa:	f001 fb39 	bl	8002c20 <HAL_I2C_Master_Transmit_IT>
 80015ae:	e064      	b.n	800167a <main+0x13e>
		}
		else
		{

			HAL_I2C_Master_Receive_IT(&hi2c1, AHT10_ADRESS, (uint8_t*)AHT10_RX_Data, 6);
 80015b0:	4a84      	ldr	r2, [pc, #528]	; (80017c4 <main+0x288>)
 80015b2:	487f      	ldr	r0, [pc, #508]	; (80017b0 <main+0x274>)
 80015b4:	2306      	movs	r3, #6
 80015b6:	2170      	movs	r1, #112	; 0x70
 80015b8:	f001 fbae 	bl	8002d18 <HAL_I2C_Master_Receive_IT>

			if (~AHT10_RX_Data[0]& 0X80)
 80015bc:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <main+0x288>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db59      	blt.n	800167a <main+0x13e>
			{
				/* Convert to Temperature in °C */
				AHT10_ADC_Raw = (((uint32_t)AHT10_RX_Data[3] & 15) << 16) | ((uint32_t)AHT10_RX_Data[4] << 8) | AHT10_RX_Data[5];
 80015c6:	4b7f      	ldr	r3, [pc, #508]	; (80017c4 <main+0x288>)
 80015c8:	78db      	ldrb	r3, [r3, #3]
 80015ca:	041a      	lsls	r2, r3, #16
 80015cc:	23f0      	movs	r3, #240	; 0xf0
 80015ce:	031b      	lsls	r3, r3, #12
 80015d0:	401a      	ands	r2, r3
 80015d2:	4b7c      	ldr	r3, [pc, #496]	; (80017c4 <main+0x288>)
 80015d4:	791b      	ldrb	r3, [r3, #4]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	4313      	orrs	r3, r2
 80015da:	4a7a      	ldr	r2, [pc, #488]	; (80017c4 <main+0x288>)
 80015dc:	7952      	ldrb	r2, [r2, #5]
 80015de:	431a      	orrs	r2, r3
 80015e0:	4b79      	ldr	r3, [pc, #484]	; (80017c8 <main+0x28c>)
 80015e2:	601a      	str	r2, [r3, #0]
				AHT10_Temperature = (float)(AHT10_ADC_Raw * 200.00 / 1048576.00) - 50.00;
 80015e4:	4b78      	ldr	r3, [pc, #480]	; (80017c8 <main+0x28c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff fec7 	bl	800137c <__aeabi_ui2d>
 80015ee:	2200      	movs	r2, #0
 80015f0:	4b76      	ldr	r3, [pc, #472]	; (80017cc <main+0x290>)
 80015f2:	f7ff fc57 	bl	8000ea4 <__aeabi_dmul>
 80015f6:	0002      	movs	r2, r0
 80015f8:	000b      	movs	r3, r1
 80015fa:	0010      	movs	r0, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	2200      	movs	r2, #0
 8001600:	4b73      	ldr	r3, [pc, #460]	; (80017d0 <main+0x294>)
 8001602:	f7ff f959 	bl	80008b8 <__aeabi_ddiv>
 8001606:	0002      	movs	r2, r0
 8001608:	000b      	movs	r3, r1
 800160a:	0010      	movs	r0, r2
 800160c:	0019      	movs	r1, r3
 800160e:	f7ff fedb 	bl	80013c8 <__aeabi_d2f>
 8001612:	1c03      	adds	r3, r0, #0
 8001614:	496f      	ldr	r1, [pc, #444]	; (80017d4 <main+0x298>)
 8001616:	1c18      	adds	r0, r3, #0
 8001618:	f7fe ff32 	bl	8000480 <__aeabi_fsub>
 800161c:	1c03      	adds	r3, r0, #0
 800161e:	1c1a      	adds	r2, r3, #0
 8001620:	4b6d      	ldr	r3, [pc, #436]	; (80017d8 <main+0x29c>)
 8001622:	601a      	str	r2, [r3, #0]
				/* Convert to Relative Humidity in % */
				AHT10_ADC_Raw = ((uint32_t)AHT10_RX_Data[1] << 12) | ((uint32_t)AHT10_RX_Data[2] << 4) | (AHT10_RX_Data[3] >> 4);
 8001624:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <main+0x288>)
 8001626:	785b      	ldrb	r3, [r3, #1]
 8001628:	031a      	lsls	r2, r3, #12
 800162a:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <main+0x288>)
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4313      	orrs	r3, r2
 8001632:	4a64      	ldr	r2, [pc, #400]	; (80017c4 <main+0x288>)
 8001634:	78d2      	ldrb	r2, [r2, #3]
 8001636:	0912      	lsrs	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	431a      	orrs	r2, r3
 800163c:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <main+0x28c>)
 800163e:	601a      	str	r2, [r3, #0]
				AHT10_Humidity = (float)(AHT10_ADC_Raw*100.00/1048576.00);
 8001640:	4b61      	ldr	r3, [pc, #388]	; (80017c8 <main+0x28c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff fe99 	bl	800137c <__aeabi_ui2d>
 800164a:	2200      	movs	r2, #0
 800164c:	4b63      	ldr	r3, [pc, #396]	; (80017dc <main+0x2a0>)
 800164e:	f7ff fc29 	bl	8000ea4 <__aeabi_dmul>
 8001652:	0002      	movs	r2, r0
 8001654:	000b      	movs	r3, r1
 8001656:	0010      	movs	r0, r2
 8001658:	0019      	movs	r1, r3
 800165a:	2200      	movs	r2, #0
 800165c:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <main+0x294>)
 800165e:	f7ff f92b 	bl	80008b8 <__aeabi_ddiv>
 8001662:	0002      	movs	r2, r0
 8001664:	000b      	movs	r3, r1
 8001666:	0010      	movs	r0, r2
 8001668:	0019      	movs	r1, r3
 800166a:	f7ff fead 	bl	80013c8 <__aeabi_d2f>
 800166e:	1c02      	adds	r2, r0, #0
 8001670:	4b5b      	ldr	r3, [pc, #364]	; (80017e0 <main+0x2a4>)
 8001672:	601a      	str	r2, [r3, #0]
				SendToLCD=1;
 8001674:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <main+0x2a8>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
			}


		}

		AHT10_Switcher = ~AHT10_Switcher; /* Invert */
 800167a:	4b50      	ldr	r3, [pc, #320]	; (80017bc <main+0x280>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	43db      	mvns	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b4e      	ldr	r3, [pc, #312]	; (80017bc <main+0x280>)
 8001684:	701a      	strb	r2, [r3, #0]
		T_100ms = 0; /* Nulify */
 8001686:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <main+0x27c>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
	  }


if (SendToLCD==1) {
 800168c:	4b55      	ldr	r3, [pc, #340]	; (80017e4 <main+0x2a8>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d000      	beq.n	8001696 <main+0x15a>
 8001694:	e77d      	b.n	8001592 <main+0x56>


	sprintf(Title,"Temp:");
 8001696:	4a54      	ldr	r2, [pc, #336]	; (80017e8 <main+0x2ac>)
 8001698:	4b54      	ldr	r3, [pc, #336]	; (80017ec <main+0x2b0>)
 800169a:	0011      	movs	r1, r2
 800169c:	0018      	movs	r0, r3
 800169e:	f004 fb1d 	bl	8005cdc <siprintf>

	SSD1306_GotoXY (0,0); // goto 10, 10
 80016a2:	2100      	movs	r1, #0
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 fb4b 	bl	8001d40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)Title, &Font_7x10, 1);
 80016aa:	4951      	ldr	r1, [pc, #324]	; (80017f0 <main+0x2b4>)
 80016ac:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <main+0x2b0>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	0018      	movs	r0, r3
 80016b2:	f000 fbdf 	bl	8001e74 <SSD1306_Puts>

	sprintf(TempText,"%d.%01u", (int) AHT10_Temperature, (int) ((AHT10_Temperature - (int) AHT10_Temperature ) * 100) );
 80016b6:	4b48      	ldr	r3, [pc, #288]	; (80017d8 <main+0x29c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	1c18      	adds	r0, r3, #0
 80016bc:	f7ff f88e 	bl	80007dc <__aeabi_f2iz>
 80016c0:	0005      	movs	r5, r0
 80016c2:	4b45      	ldr	r3, [pc, #276]	; (80017d8 <main+0x29c>)
 80016c4:	681c      	ldr	r4, [r3, #0]
 80016c6:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <main+0x29c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	1c18      	adds	r0, r3, #0
 80016cc:	f7ff f886 	bl	80007dc <__aeabi_f2iz>
 80016d0:	0003      	movs	r3, r0
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff f8a2 	bl	800081c <__aeabi_i2f>
 80016d8:	1c03      	adds	r3, r0, #0
 80016da:	1c19      	adds	r1, r3, #0
 80016dc:	1c20      	adds	r0, r4, #0
 80016de:	f7fe fecf 	bl	8000480 <__aeabi_fsub>
 80016e2:	1c03      	adds	r3, r0, #0
 80016e4:	4943      	ldr	r1, [pc, #268]	; (80017f4 <main+0x2b8>)
 80016e6:	1c18      	adds	r0, r3, #0
 80016e8:	f7fe fda4 	bl	8000234 <__aeabi_fmul>
 80016ec:	1c03      	adds	r3, r0, #0
 80016ee:	1c18      	adds	r0, r3, #0
 80016f0:	f7ff f874 	bl	80007dc <__aeabi_f2iz>
 80016f4:	0003      	movs	r3, r0
 80016f6:	4940      	ldr	r1, [pc, #256]	; (80017f8 <main+0x2bc>)
 80016f8:	4840      	ldr	r0, [pc, #256]	; (80017fc <main+0x2c0>)
 80016fa:	002a      	movs	r2, r5
 80016fc:	f004 faee 	bl	8005cdc <siprintf>
	SSD1306_GotoXY (10,10); // goto 10, 10
 8001700:	210a      	movs	r1, #10
 8001702:	200a      	movs	r0, #10
 8001704:	f000 fb1c 	bl	8001d40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)TempText, &Font_11x18, 1);
 8001708:	493d      	ldr	r1, [pc, #244]	; (8001800 <main+0x2c4>)
 800170a:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <main+0x2c0>)
 800170c:	2201      	movs	r2, #1
 800170e:	0018      	movs	r0, r3
 8001710:	f000 fbb0 	bl	8001e74 <SSD1306_Puts>

	sprintf(Title,"Hum:");
 8001714:	4a3b      	ldr	r2, [pc, #236]	; (8001804 <main+0x2c8>)
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <main+0x2b0>)
 8001718:	0011      	movs	r1, r2
 800171a:	0018      	movs	r0, r3
 800171c:	f004 fade 	bl	8005cdc <siprintf>

	SSD1306_GotoXY (0,30); // goto 10, 10
 8001720:	211e      	movs	r1, #30
 8001722:	2000      	movs	r0, #0
 8001724:	f000 fb0c 	bl	8001d40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)Title, &Font_7x10, 1);
 8001728:	4931      	ldr	r1, [pc, #196]	; (80017f0 <main+0x2b4>)
 800172a:	4b30      	ldr	r3, [pc, #192]	; (80017ec <main+0x2b0>)
 800172c:	2201      	movs	r2, #1
 800172e:	0018      	movs	r0, r3
 8001730:	f000 fba0 	bl	8001e74 <SSD1306_Puts>


	sprintf(TempText,"%d.%01u", (int) AHT10_Humidity, (int) ((AHT10_Humidity - (int) AHT10_Humidity ) * 100) );
 8001734:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <main+0x2a4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	1c18      	adds	r0, r3, #0
 800173a:	f7ff f84f 	bl	80007dc <__aeabi_f2iz>
 800173e:	0005      	movs	r5, r0
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <main+0x2a4>)
 8001742:	681c      	ldr	r4, [r3, #0]
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <main+0x2a4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	1c18      	adds	r0, r3, #0
 800174a:	f7ff f847 	bl	80007dc <__aeabi_f2iz>
 800174e:	0003      	movs	r3, r0
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff f863 	bl	800081c <__aeabi_i2f>
 8001756:	1c03      	adds	r3, r0, #0
 8001758:	1c19      	adds	r1, r3, #0
 800175a:	1c20      	adds	r0, r4, #0
 800175c:	f7fe fe90 	bl	8000480 <__aeabi_fsub>
 8001760:	1c03      	adds	r3, r0, #0
 8001762:	4924      	ldr	r1, [pc, #144]	; (80017f4 <main+0x2b8>)
 8001764:	1c18      	adds	r0, r3, #0
 8001766:	f7fe fd65 	bl	8000234 <__aeabi_fmul>
 800176a:	1c03      	adds	r3, r0, #0
 800176c:	1c18      	adds	r0, r3, #0
 800176e:	f7ff f835 	bl	80007dc <__aeabi_f2iz>
 8001772:	0003      	movs	r3, r0
 8001774:	4920      	ldr	r1, [pc, #128]	; (80017f8 <main+0x2bc>)
 8001776:	4821      	ldr	r0, [pc, #132]	; (80017fc <main+0x2c0>)
 8001778:	002a      	movs	r2, r5
 800177a:	f004 faaf 	bl	8005cdc <siprintf>
	SSD1306_GotoXY (10, 40);
 800177e:	2128      	movs	r1, #40	; 0x28
 8001780:	200a      	movs	r0, #10
 8001782:	f000 fadd 	bl	8001d40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)TempText, &Font_11x18, 1);
 8001786:	491e      	ldr	r1, [pc, #120]	; (8001800 <main+0x2c4>)
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <main+0x2c0>)
 800178a:	2201      	movs	r2, #1
 800178c:	0018      	movs	r0, r3
 800178e:	f000 fb71 	bl	8001e74 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8001792:	f000 fa19 	bl	8001bc8 <SSD1306_UpdateScreen>

	HAL_Delay(1000);
 8001796:	23fa      	movs	r3, #250	; 0xfa
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	0018      	movs	r0, r3
 800179c:	f000 fdde 	bl	800235c <HAL_Delay>
	SendToLCD=0;
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <main+0x2a8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
	  if (T_100ms) {
 80017a6:	e6f4      	b.n	8001592 <main+0x56>
 80017a8:	200000f0 	.word	0x200000f0
 80017ac:	20000010 	.word	0x20000010
 80017b0:	200000a4 	.word	0x200000a4
 80017b4:	20000011 	.word	0x20000011
 80017b8:	20000014 	.word	0x20000014
 80017bc:	20000013 	.word	0x20000013
 80017c0:	20000012 	.word	0x20000012
 80017c4:	20000138 	.word	0x20000138
 80017c8:	20000140 	.word	0x20000140
 80017cc:	40690000 	.word	0x40690000
 80017d0:	41300000 	.word	0x41300000
 80017d4:	42480000 	.word	0x42480000
 80017d8:	20000144 	.word	0x20000144
 80017dc:	40590000 	.word	0x40590000
 80017e0:	20000148 	.word	0x20000148
 80017e4:	2000015a 	.word	0x2000015a
 80017e8:	080065c8 	.word	0x080065c8
 80017ec:	20000150 	.word	0x20000150
 80017f0:	20000000 	.word	0x20000000
 80017f4:	42c80000 	.word	0x42c80000
 80017f8:	080065d0 	.word	0x080065d0
 80017fc:	2000014c 	.word	0x2000014c
 8001800:	20000008 	.word	0x20000008
 8001804:	080065d8 	.word	0x080065d8

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b095      	sub	sp, #84	; 0x54
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	2420      	movs	r4, #32
 8001810:	193b      	adds	r3, r7, r4
 8001812:	0018      	movs	r0, r3
 8001814:	2330      	movs	r3, #48	; 0x30
 8001816:	001a      	movs	r2, r3
 8001818:	2100      	movs	r1, #0
 800181a:	f004 fa57 	bl	8005ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181e:	2310      	movs	r3, #16
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	0018      	movs	r0, r3
 8001824:	2310      	movs	r3, #16
 8001826:	001a      	movs	r2, r3
 8001828:	2100      	movs	r1, #0
 800182a:	f004 fa4f 	bl	8005ccc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800182e:	003b      	movs	r3, r7
 8001830:	0018      	movs	r0, r3
 8001832:	2310      	movs	r3, #16
 8001834:	001a      	movs	r2, r3
 8001836:	2100      	movs	r1, #0
 8001838:	f004 fa48 	bl	8005ccc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800183c:	0021      	movs	r1, r4
 800183e:	187b      	adds	r3, r7, r1
 8001840:	2202      	movs	r2, #2
 8001842:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001844:	187b      	adds	r3, r7, r1
 8001846:	2201      	movs	r2, #1
 8001848:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184a:	187b      	adds	r3, r7, r1
 800184c:	2210      	movs	r2, #16
 800184e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001850:	187b      	adds	r3, r7, r1
 8001852:	2200      	movs	r2, #0
 8001854:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001856:	187b      	adds	r3, r7, r1
 8001858:	0018      	movs	r0, r3
 800185a:	f003 f8d5 	bl	8004a08 <HAL_RCC_OscConfig>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001862:	f000 f8e7 	bl	8001a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001866:	2110      	movs	r1, #16
 8001868:	187b      	adds	r3, r7, r1
 800186a:	2207      	movs	r2, #7
 800186c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001874:	187b      	adds	r3, r7, r1
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800187a:	187b      	adds	r3, r7, r1
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001880:	187b      	adds	r3, r7, r1
 8001882:	2100      	movs	r1, #0
 8001884:	0018      	movs	r0, r3
 8001886:	f003 fbd9 	bl	800503c <HAL_RCC_ClockConfig>
 800188a:	1e03      	subs	r3, r0, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800188e:	f000 f8d1 	bl	8001a34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001892:	003b      	movs	r3, r7
 8001894:	2220      	movs	r2, #32
 8001896:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001898:	003b      	movs	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189e:	003b      	movs	r3, r7
 80018a0:	0018      	movs	r0, r3
 80018a2:	f003 fcfd 	bl	80052a0 <HAL_RCCEx_PeriphCLKConfig>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018aa:	f000 f8c3 	bl	8001a34 <Error_Handler>
  }
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b015      	add	sp, #84	; 0x54
 80018b4:	bd90      	pop	{r4, r7, pc}
	...

080018b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <MX_I2C1_Init+0x74>)
 80018be:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <MX_I2C1_Init+0x78>)
 80018c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_I2C1_Init+0x74>)
 80018c4:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <MX_I2C1_Init+0x7c>)
 80018c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_I2C1_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <MX_I2C1_Init+0x74>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_I2C1_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_I2C1_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_I2C1_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_I2C1_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_I2C1_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_I2C1_Init+0x74>)
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 fff5 	bl	80028e4 <HAL_I2C_Init>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d001      	beq.n	8001902 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018fe:	f000 f899 	bl	8001a34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <MX_I2C1_Init+0x74>)
 8001904:	2100      	movs	r1, #0
 8001906:	0018      	movs	r0, r3
 8001908:	f002 ffe6 	bl	80048d8 <HAL_I2CEx_ConfigAnalogFilter>
 800190c:	1e03      	subs	r3, r0, #0
 800190e:	d001      	beq.n	8001914 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001910:	f000 f890 	bl	8001a34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <MX_I2C1_Init+0x74>)
 8001916:	2100      	movs	r1, #0
 8001918:	0018      	movs	r0, r3
 800191a:	f003 f829 	bl	8004970 <HAL_I2CEx_ConfigDigitalFilter>
 800191e:	1e03      	subs	r3, r0, #0
 8001920:	d001      	beq.n	8001926 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001922:	f000 f887 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200000a4 	.word	0x200000a4
 8001930:	40005400 	.word	0x40005400
 8001934:	0000020b 	.word	0x0000020b

08001938 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193e:	2308      	movs	r3, #8
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	0018      	movs	r0, r3
 8001944:	2310      	movs	r3, #16
 8001946:	001a      	movs	r2, r3
 8001948:	2100      	movs	r1, #0
 800194a:	f004 f9bf 	bl	8005ccc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194e:	003b      	movs	r3, r7
 8001950:	0018      	movs	r0, r3
 8001952:	2308      	movs	r3, #8
 8001954:	001a      	movs	r2, r3
 8001956:	2100      	movs	r1, #0
 8001958:	f004 f9b8 	bl	8005ccc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <MX_TIM3_Init+0xa0>)
 800195e:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <MX_TIM3_Init+0xa4>)
 8001960:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <MX_TIM3_Init+0xa0>)
 8001964:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <MX_TIM3_Init+0xa8>)
 8001966:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <MX_TIM3_Init+0xa0>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <MX_TIM3_Init+0xa0>)
 8001970:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <MX_TIM3_Init+0xac>)
 8001972:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <MX_TIM3_Init+0xa0>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <MX_TIM3_Init+0xa0>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <MX_TIM3_Init+0xa0>)
 8001982:	0018      	movs	r0, r3
 8001984:	f003 fd5a 	bl	800543c <HAL_TIM_Base_Init>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800198c:	f000 f852 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	2108      	movs	r1, #8
 8001992:	187b      	adds	r3, r7, r1
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0152      	lsls	r2, r2, #5
 8001998:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800199a:	187a      	adds	r2, r7, r1
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_TIM3_Init+0xa0>)
 800199e:	0011      	movs	r1, r2
 80019a0:	0018      	movs	r0, r3
 80019a2:	f003 fefd 	bl	80057a0 <HAL_TIM_ConfigClockSource>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80019aa:	f000 f843 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ae:	003b      	movs	r3, r7
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	003b      	movs	r3, r7
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ba:	003a      	movs	r2, r7
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_TIM3_Init+0xa0>)
 80019be:	0011      	movs	r1, r2
 80019c0:	0018      	movs	r0, r3
 80019c2:	f004 f8f1 	bl	8005ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80019c6:	1e03      	subs	r3, r0, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80019ca:	f000 f833 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b006      	add	sp, #24
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	200000f0 	.word	0x200000f0
 80019dc:	40000400 	.word	0x40000400
 80019e0:	0000031f 	.word	0x0000031f
 80019e4:	000003e7 	.word	0x000003e7

080019e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <MX_GPIO_Init+0x48>)
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_GPIO_Init+0x48>)
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	0289      	lsls	r1, r1, #10
 80019f8:	430a      	orrs	r2, r1
 80019fa:	615a      	str	r2, [r3, #20]
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_GPIO_Init+0x48>)
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	029b      	lsls	r3, r3, #10
 8001a04:	4013      	ands	r3, r2
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_GPIO_Init+0x48>)
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MX_GPIO_Init+0x48>)
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	02c9      	lsls	r1, r1, #11
 8001a14:	430a      	orrs	r2, r1
 8001a16:	615a      	str	r2, [r3, #20]
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <MX_GPIO_Init+0x48>)
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	02db      	lsls	r3, r3, #11
 8001a20:	4013      	ands	r3, r2
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]

}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	40021000 	.word	0x40021000

08001a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a38:	b672      	cpsid	i
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <Error_Handler+0x8>
	...

08001a40 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001a46:	f000 fa3b 	bl	8001ec0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 3, 20000) != HAL_OK) {
 8001a4a:	4b5b      	ldr	r3, [pc, #364]	; (8001bb8 <SSD1306_Init+0x178>)
 8001a4c:	485b      	ldr	r0, [pc, #364]	; (8001bbc <SSD1306_Init+0x17c>)
 8001a4e:	2203      	movs	r2, #3
 8001a50:	2178      	movs	r1, #120	; 0x78
 8001a52:	f001 f9dd 	bl	8002e10 <HAL_I2C_IsDeviceReady>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d001      	beq.n	8001a5e <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e0a8      	b.n	8001bb0 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001a5e:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <SSD1306_Init+0x180>)
 8001a60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a62:	e002      	b.n	8001a6a <SSD1306_Init+0x2a>
		p--;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f9      	bne.n	8001a64 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001a70:	22ae      	movs	r2, #174	; 0xae
 8001a72:	2100      	movs	r1, #0
 8001a74:	2078      	movs	r0, #120	; 0x78
 8001a76:	f000 faa3 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2078      	movs	r0, #120	; 0x78
 8001a80:	f000 fa9e 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a84:	2210      	movs	r2, #16
 8001a86:	2100      	movs	r1, #0
 8001a88:	2078      	movs	r0, #120	; 0x78
 8001a8a:	f000 fa99 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a8e:	22b0      	movs	r2, #176	; 0xb0
 8001a90:	2100      	movs	r1, #0
 8001a92:	2078      	movs	r0, #120	; 0x78
 8001a94:	f000 fa94 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001a98:	22c8      	movs	r2, #200	; 0xc8
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2078      	movs	r0, #120	; 0x78
 8001a9e:	f000 fa8f 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2078      	movs	r0, #120	; 0x78
 8001aa8:	f000 fa8a 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001aac:	2210      	movs	r2, #16
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2078      	movs	r0, #120	; 0x78
 8001ab2:	f000 fa85 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001ab6:	2240      	movs	r2, #64	; 0x40
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2078      	movs	r0, #120	; 0x78
 8001abc:	f000 fa80 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001ac0:	2281      	movs	r2, #129	; 0x81
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2078      	movs	r0, #120	; 0x78
 8001ac6:	f000 fa7b 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001aca:	22ff      	movs	r2, #255	; 0xff
 8001acc:	2100      	movs	r1, #0
 8001ace:	2078      	movs	r0, #120	; 0x78
 8001ad0:	f000 fa76 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001ad4:	22a1      	movs	r2, #161	; 0xa1
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2078      	movs	r0, #120	; 0x78
 8001ada:	f000 fa71 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001ade:	22a6      	movs	r2, #166	; 0xa6
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2078      	movs	r0, #120	; 0x78
 8001ae4:	f000 fa6c 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001ae8:	22a8      	movs	r2, #168	; 0xa8
 8001aea:	2100      	movs	r1, #0
 8001aec:	2078      	movs	r0, #120	; 0x78
 8001aee:	f000 fa67 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001af2:	223f      	movs	r2, #63	; 0x3f
 8001af4:	2100      	movs	r1, #0
 8001af6:	2078      	movs	r0, #120	; 0x78
 8001af8:	f000 fa62 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001afc:	22a4      	movs	r2, #164	; 0xa4
 8001afe:	2100      	movs	r1, #0
 8001b00:	2078      	movs	r0, #120	; 0x78
 8001b02:	f000 fa5d 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001b06:	22d3      	movs	r2, #211	; 0xd3
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2078      	movs	r0, #120	; 0x78
 8001b0c:	f000 fa58 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001b10:	2200      	movs	r2, #0
 8001b12:	2100      	movs	r1, #0
 8001b14:	2078      	movs	r0, #120	; 0x78
 8001b16:	f000 fa53 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b1a:	22d5      	movs	r2, #213	; 0xd5
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2078      	movs	r0, #120	; 0x78
 8001b20:	f000 fa4e 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001b24:	22f0      	movs	r2, #240	; 0xf0
 8001b26:	2100      	movs	r1, #0
 8001b28:	2078      	movs	r0, #120	; 0x78
 8001b2a:	f000 fa49 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001b2e:	22d9      	movs	r2, #217	; 0xd9
 8001b30:	2100      	movs	r1, #0
 8001b32:	2078      	movs	r0, #120	; 0x78
 8001b34:	f000 fa44 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001b38:	2222      	movs	r2, #34	; 0x22
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2078      	movs	r0, #120	; 0x78
 8001b3e:	f000 fa3f 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001b42:	22da      	movs	r2, #218	; 0xda
 8001b44:	2100      	movs	r1, #0
 8001b46:	2078      	movs	r0, #120	; 0x78
 8001b48:	f000 fa3a 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001b4c:	2212      	movs	r2, #18
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2078      	movs	r0, #120	; 0x78
 8001b52:	f000 fa35 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001b56:	22db      	movs	r2, #219	; 0xdb
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2078      	movs	r0, #120	; 0x78
 8001b5c:	f000 fa30 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001b60:	2220      	movs	r2, #32
 8001b62:	2100      	movs	r1, #0
 8001b64:	2078      	movs	r0, #120	; 0x78
 8001b66:	f000 fa2b 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001b6a:	228d      	movs	r2, #141	; 0x8d
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2078      	movs	r0, #120	; 0x78
 8001b70:	f000 fa26 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001b74:	2214      	movs	r2, #20
 8001b76:	2100      	movs	r1, #0
 8001b78:	2078      	movs	r0, #120	; 0x78
 8001b7a:	f000 fa21 	bl	8001fc0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001b7e:	22af      	movs	r2, #175	; 0xaf
 8001b80:	2100      	movs	r1, #0
 8001b82:	2078      	movs	r0, #120	; 0x78
 8001b84:	f000 fa1c 	bl	8001fc0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001b88:	222e      	movs	r2, #46	; 0x2e
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2078      	movs	r0, #120	; 0x78
 8001b8e:	f000 fa17 	bl	8001fc0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f000 f84c 	bl	8001c30 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001b98:	f000 f816 	bl	8001bc8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <SSD1306_Init+0x184>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <SSD1306_Init+0x184>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <SSD1306_Init+0x184>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	00004e20 	.word	0x00004e20
 8001bbc:	200000a4 	.word	0x200000a4
 8001bc0:	000009c4 	.word	0x000009c4
 8001bc4:	2000055c 	.word	0x2000055c

08001bc8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	e021      	b.n	8001c1a <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	3b50      	subs	r3, #80	; 0x50
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	001a      	movs	r2, r3
 8001be0:	2100      	movs	r1, #0
 8001be2:	2078      	movs	r0, #120	; 0x78
 8001be4:	f000 f9ec 	bl	8001fc0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	2078      	movs	r0, #120	; 0x78
 8001bee:	f000 f9e7 	bl	8001fc0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2078      	movs	r0, #120	; 0x78
 8001bf8:	f000 f9e2 	bl	8001fc0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001bfc:	1dfb      	adds	r3, r7, #7
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	01da      	lsls	r2, r3, #7
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <SSD1306_UpdateScreen+0x64>)
 8001c04:	18d2      	adds	r2, r2, r3
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	2140      	movs	r1, #64	; 0x40
 8001c0a:	2078      	movs	r0, #120	; 0x78
 8001c0c:	f000 f96c 	bl	8001ee8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001c10:	1dfb      	adds	r3, r7, #7
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	1dfb      	adds	r3, r7, #7
 8001c16:	3201      	adds	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b07      	cmp	r3, #7
 8001c20:	d9d9      	bls.n	8001bd6 <SSD1306_UpdateScreen+0xe>
	}
}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000015c 	.word	0x2000015c

08001c30 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	0002      	movs	r2, r0
 8001c38:	1dfb      	adds	r3, r7, #7
 8001c3a:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c3c:	1dfb      	adds	r3, r7, #7
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <SSD1306_Fill+0x18>
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <SSD1306_Fill+0x1a>
 8001c48:	23ff      	movs	r3, #255	; 0xff
 8001c4a:	2280      	movs	r2, #128	; 0x80
 8001c4c:	00d2      	lsls	r2, r2, #3
 8001c4e:	4804      	ldr	r0, [pc, #16]	; (8001c60 <SSD1306_Fill+0x30>)
 8001c50:	0019      	movs	r1, r3
 8001c52:	f004 f83b 	bl	8005ccc <memset>
}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b002      	add	sp, #8
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	2000015c 	.word	0x2000015c

08001c64 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	0004      	movs	r4, r0
 8001c6c:	0008      	movs	r0, r1
 8001c6e:	0011      	movs	r1, r2
 8001c70:	1dbb      	adds	r3, r7, #6
 8001c72:	1c22      	adds	r2, r4, #0
 8001c74:	801a      	strh	r2, [r3, #0]
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	1c02      	adds	r2, r0, #0
 8001c7a:	801a      	strh	r2, [r3, #0]
 8001c7c:	1cfb      	adds	r3, r7, #3
 8001c7e:	1c0a      	adds	r2, r1, #0
 8001c80:	701a      	strb	r2, [r3, #0]
	if (
 8001c82:	1dbb      	adds	r3, r7, #6
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	2b7f      	cmp	r3, #127	; 0x7f
 8001c88:	d852      	bhi.n	8001d30 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c90:	d84e      	bhi.n	8001d30 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <SSD1306_DrawPixel+0xd4>)
 8001c94:	791b      	ldrb	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8001c9a:	1cfb      	adds	r3, r7, #3
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	425a      	negs	r2, r3
 8001ca0:	4153      	adcs	r3, r2
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	1cfb      	adds	r3, r7, #3
 8001ca6:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001ca8:	1cfb      	adds	r3, r7, #3
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d11e      	bne.n	8001cee <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cb0:	1dbb      	adds	r3, r7, #6
 8001cb2:	881a      	ldrh	r2, [r3, #0]
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	b298      	uxth	r0, r3
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	01db      	lsls	r3, r3, #7
 8001cc0:	18d3      	adds	r3, r2, r3
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <SSD1306_DrawPixel+0xd8>)
 8001cc4:	5cd3      	ldrb	r3, [r2, r3]
 8001cc6:	b25a      	sxtb	r2, r3
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	2107      	movs	r1, #7
 8001cce:	400b      	ands	r3, r1
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4099      	lsls	r1, r3
 8001cd4:	000b      	movs	r3, r1
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b259      	sxtb	r1, r3
 8001cdc:	1dbb      	adds	r3, r7, #6
 8001cde:	881a      	ldrh	r2, [r3, #0]
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	01db      	lsls	r3, r3, #7
 8001ce4:	18d3      	adds	r3, r2, r3
 8001ce6:	b2c9      	uxtb	r1, r1
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <SSD1306_DrawPixel+0xd8>)
 8001cea:	54d1      	strb	r1, [r2, r3]
 8001cec:	e021      	b.n	8001d32 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001cee:	1dbb      	adds	r3, r7, #6
 8001cf0:	881a      	ldrh	r2, [r3, #0]
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	08db      	lsrs	r3, r3, #3
 8001cf8:	b298      	uxth	r0, r3
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	01db      	lsls	r3, r3, #7
 8001cfe:	18d3      	adds	r3, r2, r3
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <SSD1306_DrawPixel+0xd8>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	1d3a      	adds	r2, r7, #4
 8001d08:	8812      	ldrh	r2, [r2, #0]
 8001d0a:	2107      	movs	r1, #7
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4091      	lsls	r1, r2
 8001d12:	000a      	movs	r2, r1
 8001d14:	b252      	sxtb	r2, r2
 8001d16:	43d2      	mvns	r2, r2
 8001d18:	b252      	sxtb	r2, r2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b259      	sxtb	r1, r3
 8001d1e:	1dbb      	adds	r3, r7, #6
 8001d20:	881a      	ldrh	r2, [r3, #0]
 8001d22:	0003      	movs	r3, r0
 8001d24:	01db      	lsls	r3, r3, #7
 8001d26:	18d3      	adds	r3, r2, r3
 8001d28:	b2c9      	uxtb	r1, r1
 8001d2a:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <SSD1306_DrawPixel+0xd8>)
 8001d2c:	54d1      	strb	r1, [r2, r3]
 8001d2e:	e000      	b.n	8001d32 <SSD1306_DrawPixel+0xce>
		return;
 8001d30:	46c0      	nop			; (mov r8, r8)
	}
}
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b003      	add	sp, #12
 8001d36:	bd90      	pop	{r4, r7, pc}
 8001d38:	2000055c 	.word	0x2000055c
 8001d3c:	2000015c 	.word	0x2000015c

08001d40 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	0002      	movs	r2, r0
 8001d48:	1dbb      	adds	r3, r7, #6
 8001d4a:	801a      	strh	r2, [r3, #0]
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	1c0a      	adds	r2, r1, #0
 8001d50:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <SSD1306_GotoXY+0x2c>)
 8001d54:	1dba      	adds	r2, r7, #6
 8001d56:	8812      	ldrh	r2, [r2, #0]
 8001d58:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SSD1306_GotoXY+0x2c>)
 8001d5c:	1d3a      	adds	r2, r7, #4
 8001d5e:	8812      	ldrh	r2, [r2, #0]
 8001d60:	805a      	strh	r2, [r3, #2]
}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b002      	add	sp, #8
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	2000055c 	.word	0x2000055c

08001d70 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6039      	str	r1, [r7, #0]
 8001d78:	0011      	movs	r1, r2
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	1c02      	adds	r2, r0, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	1dbb      	adds	r3, r7, #6
 8001d82:	1c0a      	adds	r2, r1, #0
 8001d84:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d86:	4b3a      	ldr	r3, [pc, #232]	; (8001e70 <SSD1306_Putc+0x100>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	18d3      	adds	r3, r2, r3
	if (
 8001d92:	2b7f      	cmp	r3, #127	; 0x7f
 8001d94:	dc07      	bgt.n	8001da6 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <SSD1306_Putc+0x100>)
 8001d98:	885b      	ldrh	r3, [r3, #2]
 8001d9a:	001a      	movs	r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001da2:	2b3f      	cmp	r3, #63	; 0x3f
 8001da4:	dd01      	ble.n	8001daa <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e05e      	b.n	8001e68 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e04a      	b.n	8001e46 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	3b20      	subs	r3, #32
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	7849      	ldrb	r1, [r1, #1]
 8001dbe:	434b      	muls	r3, r1
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	18cb      	adds	r3, r1, r3
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	18d3      	adds	r3, r2, r3
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	e02f      	b.n	8001e34 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	4013      	ands	r3, r2
 8001de0:	d011      	beq.n	8001e06 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <SSD1306_Putc+0x100>)
 8001de4:	881a      	ldrh	r2, [r3, #0]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	18d3      	adds	r3, r2, r3
 8001dec:	b298      	uxth	r0, r3
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <SSD1306_Putc+0x100>)
 8001df0:	885a      	ldrh	r2, [r3, #2]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	18d3      	adds	r3, r2, r3
 8001df8:	b299      	uxth	r1, r3
 8001dfa:	1dbb      	adds	r3, r7, #6
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	001a      	movs	r2, r3
 8001e00:	f7ff ff30 	bl	8001c64 <SSD1306_DrawPixel>
 8001e04:	e013      	b.n	8001e2e <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <SSD1306_Putc+0x100>)
 8001e08:	881a      	ldrh	r2, [r3, #0]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	18d3      	adds	r3, r2, r3
 8001e10:	b298      	uxth	r0, r3
 8001e12:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <SSD1306_Putc+0x100>)
 8001e14:	885a      	ldrh	r2, [r3, #2]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	18d3      	adds	r3, r2, r3
 8001e1c:	b299      	uxth	r1, r3
 8001e1e:	1dbb      	adds	r3, r7, #6
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	425a      	negs	r2, r3
 8001e24:	4153      	adcs	r3, r2
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	001a      	movs	r2, r3
 8001e2a:	f7ff ff1b 	bl	8001c64 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	3301      	adds	r3, #1
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	001a      	movs	r2, r3
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d3c9      	bcc.n	8001dd4 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	3301      	adds	r3, #1
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	785b      	ldrb	r3, [r3, #1]
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d3ae      	bcc.n	8001db0 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <SSD1306_Putc+0x100>)
 8001e54:	881a      	ldrh	r2, [r3, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	18d3      	adds	r3, r2, r3
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <SSD1306_Putc+0x100>)
 8001e62:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001e64:	1dfb      	adds	r3, r7, #7
 8001e66:	781b      	ldrb	r3, [r3, #0]
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b006      	add	sp, #24
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000055c 	.word	0x2000055c

08001e74 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8001e82:	e013      	b.n	8001eac <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	7818      	ldrb	r0, [r3, #0]
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	0019      	movs	r1, r3
 8001e90:	f7ff ff6e 	bl	8001d70 <SSD1306_Putc>
 8001e94:	0003      	movs	r3, r0
 8001e96:	001a      	movs	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d002      	beq.n	8001ea6 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	e008      	b.n	8001eb8 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1e7      	bne.n	8001e84 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b004      	add	sp, #16
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <ssd1306_I2C_Init+0x24>)
 8001ec8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001eca:	e002      	b.n	8001ed2 <ssd1306_I2C_Init+0x12>
		p--;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f9      	bne.n	8001ecc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b002      	add	sp, #8
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	0003d090 	.word	0x0003d090

08001ee8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ee8:	b5b0      	push	{r4, r5, r7, lr}
 8001eea:	b0c6      	sub	sp, #280	; 0x118
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	0004      	movs	r4, r0
 8001ef0:	0008      	movs	r0, r1
 8001ef2:	603a      	str	r2, [r7, #0]
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <ssd1306_I2C_WriteMulti+0xc4>)
 8001ef8:	2588      	movs	r5, #136	; 0x88
 8001efa:	006d      	lsls	r5, r5, #1
 8001efc:	195b      	adds	r3, r3, r5
 8001efe:	19db      	adds	r3, r3, r7
 8001f00:	1c22      	adds	r2, r4, #0
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001f06:	002c      	movs	r4, r5
 8001f08:	191b      	adds	r3, r3, r4
 8001f0a:	19db      	adds	r3, r3, r7
 8001f0c:	1c02      	adds	r2, r0, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <ssd1306_I2C_WriteMulti+0xcc>)
 8001f12:	0020      	movs	r0, r4
 8001f14:	181b      	adds	r3, r3, r0
 8001f16:	19db      	adds	r3, r3, r7
 8001f18:	1c0a      	adds	r2, r1, #0
 8001f1a:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001f1c:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <ssd1306_I2C_WriteMulti+0xd0>)
 8001f1e:	181b      	adds	r3, r3, r0
 8001f20:	19db      	adds	r3, r3, r7
 8001f22:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001f24:	1812      	adds	r2, r2, r0
 8001f26:	19d2      	adds	r2, r2, r7
 8001f28:	7812      	ldrb	r2, [r2, #0]
 8001f2a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	33ff      	adds	r3, #255	; 0xff
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
 8001f36:	e014      	b.n	8001f62 <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8001f38:	2010      	movs	r0, #16
 8001f3a:	30ff      	adds	r0, #255	; 0xff
 8001f3c:	183b      	adds	r3, r7, r0
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	18d2      	adds	r2, r2, r3
 8001f44:	183b      	adds	r3, r7, r0
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	7811      	ldrb	r1, [r2, #0]
 8001f4c:	4a1a      	ldr	r2, [pc, #104]	; (8001fb8 <ssd1306_I2C_WriteMulti+0xd0>)
 8001f4e:	2488      	movs	r4, #136	; 0x88
 8001f50:	0064      	lsls	r4, r4, #1
 8001f52:	1912      	adds	r2, r2, r4
 8001f54:	19d2      	adds	r2, r2, r7
 8001f56:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001f58:	183b      	adds	r3, r7, r0
 8001f5a:	781a      	ldrb	r2, [r3, #0]
 8001f5c:	183b      	adds	r3, r7, r0
 8001f5e:	3201      	adds	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	2310      	movs	r3, #16
 8001f64:	33ff      	adds	r3, #255	; 0xff
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <ssd1306_I2C_WriteMulti+0xcc>)
 8001f6e:	2188      	movs	r1, #136	; 0x88
 8001f70:	0049      	lsls	r1, r1, #1
 8001f72:	1852      	adds	r2, r2, r1
 8001f74:	19d2      	adds	r2, r2, r7
 8001f76:	8812      	ldrh	r2, [r2, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d8dd      	bhi.n	8001f38 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <ssd1306_I2C_WriteMulti+0xc4>)
 8001f7e:	000a      	movs	r2, r1
 8001f80:	189b      	adds	r3, r3, r2
 8001f82:	19db      	adds	r3, r3, r7
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b299      	uxth	r1, r3
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <ssd1306_I2C_WriteMulti+0xcc>)
 8001f8a:	189b      	adds	r3, r3, r2
 8001f8c:	19db      	adds	r3, r3, r7
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	220c      	movs	r2, #12
 8001f96:	18ba      	adds	r2, r7, r2
 8001f98:	4808      	ldr	r0, [pc, #32]	; (8001fbc <ssd1306_I2C_WriteMulti+0xd4>)
 8001f9a:	240a      	movs	r4, #10
 8001f9c:	9400      	str	r4, [sp, #0]
 8001f9e:	f000 fd37 	bl	8002a10 <HAL_I2C_Master_Transmit>
}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b044      	add	sp, #272	; 0x110
 8001fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	fffffef7 	.word	0xfffffef7
 8001fb0:	fffffef6 	.word	0xfffffef6
 8001fb4:	fffffef4 	.word	0xfffffef4
 8001fb8:	fffffefc 	.word	0xfffffefc
 8001fbc:	200000a4 	.word	0x200000a4

08001fc0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	0004      	movs	r4, r0
 8001fc8:	0008      	movs	r0, r1
 8001fca:	0011      	movs	r1, r2
 8001fcc:	1dfb      	adds	r3, r7, #7
 8001fce:	1c22      	adds	r2, r4, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	1dbb      	adds	r3, r7, #6
 8001fd4:	1c02      	adds	r2, r0, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	1d7b      	adds	r3, r7, #5
 8001fda:	1c0a      	adds	r2, r1, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8001fde:	200c      	movs	r0, #12
 8001fe0:	183b      	adds	r3, r7, r0
 8001fe2:	1dba      	adds	r2, r7, #6
 8001fe4:	7812      	ldrb	r2, [r2, #0]
 8001fe6:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8001fe8:	183b      	adds	r3, r7, r0
 8001fea:	1d7a      	adds	r2, r7, #5
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b299      	uxth	r1, r3
 8001ff6:	183a      	adds	r2, r7, r0
 8001ff8:	4804      	ldr	r0, [pc, #16]	; (800200c <ssd1306_I2C_Write+0x4c>)
 8001ffa:	230a      	movs	r3, #10
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2302      	movs	r3, #2
 8002000:	f000 fd06 	bl	8002a10 <HAL_I2C_Master_Transmit>
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b005      	add	sp, #20
 800200a:	bd90      	pop	{r4, r7, pc}
 800200c:	200000a4 	.word	0x200000a4

08002010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_MspInit+0x44>)
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_MspInit+0x44>)
 800201c:	2101      	movs	r1, #1
 800201e:	430a      	orrs	r2, r1
 8002020:	619a      	str	r2, [r3, #24]
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_MspInit+0x44>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2201      	movs	r2, #1
 8002028:	4013      	ands	r3, r2
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_MspInit+0x44>)
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_MspInit+0x44>)
 8002034:	2180      	movs	r1, #128	; 0x80
 8002036:	0549      	lsls	r1, r1, #21
 8002038:	430a      	orrs	r2, r1
 800203a:	61da      	str	r2, [r3, #28]
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_MspInit+0x44>)
 800203e:	69da      	ldr	r2, [r3, #28]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	055b      	lsls	r3, r3, #21
 8002044:	4013      	ands	r3, r2
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	46bd      	mov	sp, r7
 800204e:	b002      	add	sp, #8
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	40021000 	.word	0x40021000

08002058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b08b      	sub	sp, #44	; 0x2c
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	2414      	movs	r4, #20
 8002062:	193b      	adds	r3, r7, r4
 8002064:	0018      	movs	r0, r3
 8002066:	2314      	movs	r3, #20
 8002068:	001a      	movs	r2, r3
 800206a:	2100      	movs	r1, #0
 800206c:	f003 fe2e 	bl	8005ccc <memset>
  if(hi2c->Instance==I2C1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a20      	ldr	r2, [pc, #128]	; (80020f8 <HAL_I2C_MspInit+0xa0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d13a      	bne.n	80020f0 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_I2C_MspInit+0xa4>)
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <HAL_I2C_MspInit+0xa4>)
 8002080:	2180      	movs	r1, #128	; 0x80
 8002082:	02c9      	lsls	r1, r1, #11
 8002084:	430a      	orrs	r2, r1
 8002086:	615a      	str	r2, [r3, #20]
 8002088:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_I2C_MspInit+0xa4>)
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	02db      	lsls	r3, r3, #11
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002096:	193b      	adds	r3, r7, r4
 8002098:	22c0      	movs	r2, #192	; 0xc0
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800209e:	0021      	movs	r1, r4
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	2212      	movs	r2, #18
 80020a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	187b      	adds	r3, r7, r1
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	2203      	movs	r2, #3
 80020b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	2201      	movs	r2, #1
 80020b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	4a11      	ldr	r2, [pc, #68]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 80020bc:	0019      	movs	r1, r3
 80020be:	0010      	movs	r0, r2
 80020c0:	f000 faa0 	bl	8002604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_I2C_MspInit+0xa4>)
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_I2C_MspInit+0xa4>)
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	0389      	lsls	r1, r1, #14
 80020ce:	430a      	orrs	r2, r1
 80020d0:	61da      	str	r2, [r3, #28]
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_I2C_MspInit+0xa4>)
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	039b      	lsls	r3, r3, #14
 80020da:	4013      	ands	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2017      	movs	r0, #23
 80020e6:	f000 fa09 	bl	80024fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80020ea:	2017      	movs	r0, #23
 80020ec:	f000 fa1b 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b00b      	add	sp, #44	; 0x2c
 80020f6:	bd90      	pop	{r4, r7, pc}
 80020f8:	40005400 	.word	0x40005400
 80020fc:	40021000 	.word	0x40021000
 8002100:	48000400 	.word	0x48000400

08002104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <HAL_TIM_Base_MspInit+0x44>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d113      	bne.n	800213e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_TIM_Base_MspInit+0x48>)
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_TIM_Base_MspInit+0x48>)
 800211c:	2102      	movs	r1, #2
 800211e:	430a      	orrs	r2, r1
 8002120:	61da      	str	r2, [r3, #28]
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_TIM_Base_MspInit+0x48>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	2202      	movs	r2, #2
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	2010      	movs	r0, #16
 8002134:	f000 f9e2 	bl	80024fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002138:	2010      	movs	r0, #16
 800213a:	f000 f9f4 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46bd      	mov	sp, r7
 8002142:	b004      	add	sp, #16
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	40000400 	.word	0x40000400
 800214c:	40021000 	.word	0x40021000

08002150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <NMI_Handler+0x4>

08002156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <HardFault_Handler+0x4>

0800215c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002174:	f000 f8d6 	bl	8002324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <TIM3_IRQHandler+0x14>)
 8002186:	0018      	movs	r0, r3
 8002188:	f003 f9f4 	bl	8005574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	200000f0 	.word	0x200000f0

08002198 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <I2C1_IRQHandler+0x2c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	23e0      	movs	r3, #224	; 0xe0
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4013      	ands	r3, r2
 80021a8:	d004      	beq.n	80021b4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <I2C1_IRQHandler+0x2c>)
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 ff63 	bl	8003078 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80021b2:	e003      	b.n	80021bc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <I2C1_IRQHandler+0x2c>)
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 ff44 	bl	8003044 <HAL_I2C_EV_IRQHandler>
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	200000a4 	.word	0x200000a4

080021c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d0:	4a14      	ldr	r2, [pc, #80]	; (8002224 <_sbrk+0x5c>)
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <_sbrk+0x60>)
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021dc:	4b13      	ldr	r3, [pc, #76]	; (800222c <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <_sbrk+0x64>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <_sbrk+0x68>)
 80021e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	18d3      	adds	r3, r2, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d207      	bcs.n	8002208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f8:	f003 fd3e 	bl	8005c78 <__errno>
 80021fc:	0003      	movs	r3, r0
 80021fe:	220c      	movs	r2, #12
 8002200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002202:	2301      	movs	r3, #1
 8002204:	425b      	negs	r3, r3
 8002206:	e009      	b.n	800221c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <_sbrk+0x64>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800220e:	4b07      	ldr	r3, [pc, #28]	; (800222c <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	18d2      	adds	r2, r2, r3
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <_sbrk+0x64>)
 8002218:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	b006      	add	sp, #24
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20002000 	.word	0x20002000
 8002228:	00000400 	.word	0x00000400
 800222c:	20000564 	.word	0x20000564
 8002230:	20000580 	.word	0x20000580

08002234 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002240:	480d      	ldr	r0, [pc, #52]	; (8002278 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002242:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002244:	480d      	ldr	r0, [pc, #52]	; (800227c <LoopForever+0x6>)
  ldr r1, =_edata
 8002246:	490e      	ldr	r1, [pc, #56]	; (8002280 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002248:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <LoopForever+0xe>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <LoopForever+0x12>)
  ldr r4, =_ebss
 800225c:	4c0b      	ldr	r4, [pc, #44]	; (800228c <LoopForever+0x16>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800226a:	f7ff ffe3 	bl	8002234 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800226e:	f003 fd09 	bl	8005c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002272:	f7ff f963 	bl	800153c <main>

08002276 <LoopForever>:

LoopForever:
    b LoopForever
 8002276:	e7fe      	b.n	8002276 <LoopForever>
  ldr   r0, =_estack
 8002278:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002284:	08007bd4 	.word	0x08007bd4
  ldr r2, =_sbss
 8002288:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800228c:	2000057c 	.word	0x2000057c

08002290 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC1_IRQHandler>
	...

08002294 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <HAL_Init+0x24>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_Init+0x24>)
 800229e:	2110      	movs	r1, #16
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f809 	bl	80022bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022aa:	f7ff feb1 	bl	8002010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	40022000 	.word	0x40022000

080022bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_InitTick+0x5c>)
 80022c6:	681c      	ldr	r4, [r3, #0]
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <HAL_InitTick+0x60>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	0019      	movs	r1, r3
 80022ce:	23fa      	movs	r3, #250	; 0xfa
 80022d0:	0098      	lsls	r0, r3, #2
 80022d2:	f7fd ff23 	bl	800011c <__udivsi3>
 80022d6:	0003      	movs	r3, r0
 80022d8:	0019      	movs	r1, r3
 80022da:	0020      	movs	r0, r4
 80022dc:	f7fd ff1e 	bl	800011c <__udivsi3>
 80022e0:	0003      	movs	r3, r0
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 f92f 	bl	8002546 <HAL_SYSTICK_Config>
 80022e8:	1e03      	subs	r3, r0, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e00f      	b.n	8002310 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d80b      	bhi.n	800230e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	2301      	movs	r3, #1
 80022fa:	425b      	negs	r3, r3
 80022fc:	2200      	movs	r2, #0
 80022fe:	0018      	movs	r0, r3
 8002300:	f000 f8fc 	bl	80024fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_InitTick+0x64>)
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b003      	add	sp, #12
 8002316:	bd90      	pop	{r4, r7, pc}
 8002318:	20000018 	.word	0x20000018
 800231c:	20000020 	.word	0x20000020
 8002320:	2000001c 	.word	0x2000001c

08002324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_IncTick+0x1c>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	001a      	movs	r2, r3
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_IncTick+0x20>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	18d2      	adds	r2, r2, r3
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_IncTick+0x20>)
 8002336:	601a      	str	r2, [r3, #0]
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	20000020 	.word	0x20000020
 8002344:	20000568 	.word	0x20000568

08002348 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b02      	ldr	r3, [pc, #8]	; (8002358 <HAL_GetTick+0x10>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	20000568 	.word	0x20000568

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff fff0 	bl	8002348 <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3301      	adds	r3, #1
 8002374:	d005      	beq.n	8002382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_Delay+0x44>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	001a      	movs	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	189b      	adds	r3, r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	f7ff ffe0 	bl	8002348 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d8f7      	bhi.n	8002384 <HAL_Delay+0x28>
  {
  }
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	b004      	add	sp, #16
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	20000020 	.word	0x20000020

080023a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	0002      	movs	r2, r0
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023b0:	1dfb      	adds	r3, r7, #7
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b7f      	cmp	r3, #127	; 0x7f
 80023b6:	d809      	bhi.n	80023cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b8:	1dfb      	adds	r3, r7, #7
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	001a      	movs	r2, r3
 80023be:	231f      	movs	r3, #31
 80023c0:	401a      	ands	r2, r3
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <__NVIC_EnableIRQ+0x30>)
 80023c4:	2101      	movs	r1, #1
 80023c6:	4091      	lsls	r1, r2
 80023c8:	000a      	movs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
  }
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	0002      	movs	r2, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	1dfb      	adds	r3, r7, #7
 80023e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b7f      	cmp	r3, #127	; 0x7f
 80023ec:	d828      	bhi.n	8002440 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023ee:	4a2f      	ldr	r2, [pc, #188]	; (80024ac <__NVIC_SetPriority+0xd4>)
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b25b      	sxtb	r3, r3
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	33c0      	adds	r3, #192	; 0xc0
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	589b      	ldr	r3, [r3, r2]
 80023fe:	1dfa      	adds	r2, r7, #7
 8002400:	7812      	ldrb	r2, [r2, #0]
 8002402:	0011      	movs	r1, r2
 8002404:	2203      	movs	r2, #3
 8002406:	400a      	ands	r2, r1
 8002408:	00d2      	lsls	r2, r2, #3
 800240a:	21ff      	movs	r1, #255	; 0xff
 800240c:	4091      	lsls	r1, r2
 800240e:	000a      	movs	r2, r1
 8002410:	43d2      	mvns	r2, r2
 8002412:	401a      	ands	r2, r3
 8002414:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	019b      	lsls	r3, r3, #6
 800241a:	22ff      	movs	r2, #255	; 0xff
 800241c:	401a      	ands	r2, r3
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	0018      	movs	r0, r3
 8002424:	2303      	movs	r3, #3
 8002426:	4003      	ands	r3, r0
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800242c:	481f      	ldr	r0, [pc, #124]	; (80024ac <__NVIC_SetPriority+0xd4>)
 800242e:	1dfb      	adds	r3, r7, #7
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b25b      	sxtb	r3, r3
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	430a      	orrs	r2, r1
 8002438:	33c0      	adds	r3, #192	; 0xc0
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800243e:	e031      	b.n	80024a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <__NVIC_SetPriority+0xd8>)
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	0019      	movs	r1, r3
 8002448:	230f      	movs	r3, #15
 800244a:	400b      	ands	r3, r1
 800244c:	3b08      	subs	r3, #8
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3306      	adds	r3, #6
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	18d3      	adds	r3, r2, r3
 8002456:	3304      	adds	r3, #4
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1dfa      	adds	r2, r7, #7
 800245c:	7812      	ldrb	r2, [r2, #0]
 800245e:	0011      	movs	r1, r2
 8002460:	2203      	movs	r2, #3
 8002462:	400a      	ands	r2, r1
 8002464:	00d2      	lsls	r2, r2, #3
 8002466:	21ff      	movs	r1, #255	; 0xff
 8002468:	4091      	lsls	r1, r2
 800246a:	000a      	movs	r2, r1
 800246c:	43d2      	mvns	r2, r2
 800246e:	401a      	ands	r2, r3
 8002470:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	019b      	lsls	r3, r3, #6
 8002476:	22ff      	movs	r2, #255	; 0xff
 8002478:	401a      	ands	r2, r3
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	0018      	movs	r0, r3
 8002480:	2303      	movs	r3, #3
 8002482:	4003      	ands	r3, r0
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002488:	4809      	ldr	r0, [pc, #36]	; (80024b0 <__NVIC_SetPriority+0xd8>)
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	001c      	movs	r4, r3
 8002490:	230f      	movs	r3, #15
 8002492:	4023      	ands	r3, r4
 8002494:	3b08      	subs	r3, #8
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	430a      	orrs	r2, r1
 800249a:	3306      	adds	r3, #6
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	18c3      	adds	r3, r0, r3
 80024a0:	3304      	adds	r3, #4
 80024a2:	601a      	str	r2, [r3, #0]
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b003      	add	sp, #12
 80024aa:	bd90      	pop	{r4, r7, pc}
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1e5a      	subs	r2, r3, #1
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	045b      	lsls	r3, r3, #17
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d301      	bcc.n	80024cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c8:	2301      	movs	r3, #1
 80024ca:	e010      	b.n	80024ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <SysTick_Config+0x44>)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	3a01      	subs	r2, #1
 80024d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d4:	2301      	movs	r3, #1
 80024d6:	425b      	negs	r3, r3
 80024d8:	2103      	movs	r1, #3
 80024da:	0018      	movs	r0, r3
 80024dc:	f7ff ff7c 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <SysTick_Config+0x44>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e6:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <SysTick_Config+0x44>)
 80024e8:	2207      	movs	r2, #7
 80024ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b002      	add	sp, #8
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	e000e010 	.word	0xe000e010

080024fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	210f      	movs	r1, #15
 8002508:	187b      	adds	r3, r7, r1
 800250a:	1c02      	adds	r2, r0, #0
 800250c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	187b      	adds	r3, r7, r1
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b25b      	sxtb	r3, r3
 8002516:	0011      	movs	r1, r2
 8002518:	0018      	movs	r0, r3
 800251a:	f7ff ff5d 	bl	80023d8 <__NVIC_SetPriority>
}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	0002      	movs	r2, r0
 800252e:	1dfb      	adds	r3, r7, #7
 8002530:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002532:	1dfb      	adds	r3, r7, #7
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b25b      	sxtb	r3, r3
 8002538:	0018      	movs	r0, r3
 800253a:	f7ff ff33 	bl	80023a4 <__NVIC_EnableIRQ>
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	0018      	movs	r0, r3
 8002552:	f7ff ffaf 	bl	80024b4 <SysTick_Config>
 8002556:	0003      	movs	r3, r0
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002568:	210f      	movs	r1, #15
 800256a:	187b      	adds	r3, r7, r1
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2221      	movs	r2, #33	; 0x21
 8002574:	5c9b      	ldrb	r3, [r3, r2]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d006      	beq.n	800258a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2204      	movs	r2, #4
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002582:	187b      	adds	r3, r7, r1
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	e028      	b.n	80025dc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	210e      	movs	r1, #14
 8002596:	438a      	bics	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	438a      	bics	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	2101      	movs	r1, #1
 80025b4:	4091      	lsls	r1, r2
 80025b6:	000a      	movs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2221      	movs	r2, #33	; 0x21
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	0010      	movs	r0, r2
 80025da:	4798      	blx	r3
    } 
  }
  return status;
 80025dc:	230f      	movs	r3, #15
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	781b      	ldrb	r3, [r3, #0]
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2221      	movs	r2, #33	; 0x21
 80025f6:	5c9b      	ldrb	r3, [r3, r2]
 80025f8:	b2db      	uxtb	r3, r3
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b002      	add	sp, #8
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002612:	e14f      	b.n	80028b4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4091      	lsls	r1, r2
 800261e:	000a      	movs	r2, r1
 8002620:	4013      	ands	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d100      	bne.n	800262c <HAL_GPIO_Init+0x28>
 800262a:	e140      	b.n	80028ae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2203      	movs	r2, #3
 8002632:	4013      	ands	r3, r2
 8002634:	2b01      	cmp	r3, #1
 8002636:	d005      	beq.n	8002644 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2203      	movs	r2, #3
 800263e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002640:	2b02      	cmp	r3, #2
 8002642:	d130      	bne.n	80026a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	409a      	lsls	r2, r3
 8002652:	0013      	movs	r3, r2
 8002654:	43da      	mvns	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	409a      	lsls	r2, r3
 8002666:	0013      	movs	r3, r2
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800267a:	2201      	movs	r2, #1
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
 8002680:	0013      	movs	r3, r2
 8002682:	43da      	mvns	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	2201      	movs	r2, #1
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
 8002698:	0013      	movs	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2203      	movs	r2, #3
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d017      	beq.n	80026e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	2203      	movs	r2, #3
 80026be:	409a      	lsls	r2, r3
 80026c0:	0013      	movs	r3, r2
 80026c2:	43da      	mvns	r2, r3
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	409a      	lsls	r2, r3
 80026d4:	0013      	movs	r3, r2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2203      	movs	r2, #3
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d123      	bne.n	8002736 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	08da      	lsrs	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3208      	adds	r2, #8
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	58d3      	ldr	r3, [r2, r3]
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2207      	movs	r2, #7
 8002700:	4013      	ands	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	409a      	lsls	r2, r3
 8002708:	0013      	movs	r3, r2
 800270a:	43da      	mvns	r2, r3
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2107      	movs	r1, #7
 800271a:	400b      	ands	r3, r1
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	409a      	lsls	r2, r3
 8002720:	0013      	movs	r3, r2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	08da      	lsrs	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3208      	adds	r2, #8
 8002730:	0092      	lsls	r2, r2, #2
 8002732:	6939      	ldr	r1, [r7, #16]
 8002734:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	409a      	lsls	r2, r3
 8002744:	0013      	movs	r3, r2
 8002746:	43da      	mvns	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2203      	movs	r2, #3
 8002754:	401a      	ands	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	409a      	lsls	r2, r3
 800275c:	0013      	movs	r3, r2
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	23c0      	movs	r3, #192	; 0xc0
 8002770:	029b      	lsls	r3, r3, #10
 8002772:	4013      	ands	r3, r2
 8002774:	d100      	bne.n	8002778 <HAL_GPIO_Init+0x174>
 8002776:	e09a      	b.n	80028ae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002778:	4b54      	ldr	r3, [pc, #336]	; (80028cc <HAL_GPIO_Init+0x2c8>)
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_GPIO_Init+0x2c8>)
 800277e:	2101      	movs	r1, #1
 8002780:	430a      	orrs	r2, r1
 8002782:	619a      	str	r2, [r3, #24]
 8002784:	4b51      	ldr	r3, [pc, #324]	; (80028cc <HAL_GPIO_Init+0x2c8>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2201      	movs	r2, #1
 800278a:	4013      	ands	r3, r2
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002790:	4a4f      	ldr	r2, [pc, #316]	; (80028d0 <HAL_GPIO_Init+0x2cc>)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	589b      	ldr	r3, [r3, r2]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2203      	movs	r2, #3
 80027a2:	4013      	ands	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	409a      	lsls	r2, r3
 80027aa:	0013      	movs	r3, r2
 80027ac:	43da      	mvns	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	2390      	movs	r3, #144	; 0x90
 80027b8:	05db      	lsls	r3, r3, #23
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d013      	beq.n	80027e6 <HAL_GPIO_Init+0x1e2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a44      	ldr	r2, [pc, #272]	; (80028d4 <HAL_GPIO_Init+0x2d0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00d      	beq.n	80027e2 <HAL_GPIO_Init+0x1de>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a43      	ldr	r2, [pc, #268]	; (80028d8 <HAL_GPIO_Init+0x2d4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d007      	beq.n	80027de <HAL_GPIO_Init+0x1da>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a42      	ldr	r2, [pc, #264]	; (80028dc <HAL_GPIO_Init+0x2d8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d101      	bne.n	80027da <HAL_GPIO_Init+0x1d6>
 80027d6:	2303      	movs	r3, #3
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x1e4>
 80027da:	2305      	movs	r3, #5
 80027dc:	e004      	b.n	80027e8 <HAL_GPIO_Init+0x1e4>
 80027de:	2302      	movs	r3, #2
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_Init+0x1e4>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x1e4>
 80027e6:	2300      	movs	r3, #0
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	2103      	movs	r1, #3
 80027ec:	400a      	ands	r2, r1
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4093      	lsls	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027f8:	4935      	ldr	r1, [pc, #212]	; (80028d0 <HAL_GPIO_Init+0x2cc>)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002806:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <HAL_GPIO_Init+0x2dc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	43da      	mvns	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	025b      	lsls	r3, r3, #9
 800281e:	4013      	ands	r3, r2
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800282a:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_GPIO_Init+0x2dc>)
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_GPIO_Init+0x2dc>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43da      	mvns	r2, r3
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	029b      	lsls	r3, r3, #10
 8002848:	4013      	ands	r3, r2
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_GPIO_Init+0x2dc>)
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285a:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <HAL_GPIO_Init+0x2dc>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43da      	mvns	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	035b      	lsls	r3, r3, #13
 8002872:	4013      	ands	r3, r2
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_GPIO_Init+0x2dc>)
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_GPIO_Init+0x2dc>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	43da      	mvns	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	039b      	lsls	r3, r3, #14
 800289c:	4013      	ands	r3, r2
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_GPIO_Init+0x2dc>)
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	3301      	adds	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	40da      	lsrs	r2, r3
 80028bc:	1e13      	subs	r3, r2, #0
 80028be:	d000      	beq.n	80028c2 <HAL_GPIO_Init+0x2be>
 80028c0:	e6a8      	b.n	8002614 <HAL_GPIO_Init+0x10>
  } 
}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b006      	add	sp, #24
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010000 	.word	0x40010000
 80028d4:	48000400 	.word	0x48000400
 80028d8:	48000800 	.word	0x48000800
 80028dc:	48000c00 	.word	0x48000c00
 80028e0:	40010400 	.word	0x40010400

080028e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e082      	b.n	80029fc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2241      	movs	r2, #65	; 0x41
 80028fa:	5c9b      	ldrb	r3, [r3, r2]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d107      	bne.n	8002912 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2240      	movs	r2, #64	; 0x40
 8002906:	2100      	movs	r1, #0
 8002908:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f7ff fba3 	bl	8002058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2241      	movs	r2, #65	; 0x41
 8002916:	2124      	movs	r1, #36	; 0x24
 8002918:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2101      	movs	r1, #1
 8002926:	438a      	bics	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4934      	ldr	r1, [pc, #208]	; (8002a04 <HAL_I2C_Init+0x120>)
 8002934:	400a      	ands	r2, r1
 8002936:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4931      	ldr	r1, [pc, #196]	; (8002a08 <HAL_I2C_Init+0x124>)
 8002944:	400a      	ands	r2, r1
 8002946:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d108      	bne.n	8002962 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	0209      	lsls	r1, r1, #8
 800295c:	430a      	orrs	r2, r1
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	e007      	b.n	8002972 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2184      	movs	r1, #132	; 0x84
 800296c:	0209      	lsls	r1, r1, #8
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d104      	bne.n	8002984 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	491f      	ldr	r1, [pc, #124]	; (8002a0c <HAL_I2C_Init+0x128>)
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	491a      	ldr	r1, [pc, #104]	; (8002a08 <HAL_I2C_Init+0x124>)
 80029a0:	400a      	ands	r2, r1
 80029a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69d9      	ldr	r1, [r3, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1a      	ldr	r2, [r3, #32]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	430a      	orrs	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2241      	movs	r2, #65	; 0x41
 80029e8:	2120      	movs	r1, #32
 80029ea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2242      	movs	r2, #66	; 0x42
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	f0ffffff 	.word	0xf0ffffff
 8002a08:	ffff7fff 	.word	0xffff7fff
 8002a0c:	02008000 	.word	0x02008000

08002a10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	0008      	movs	r0, r1
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	230a      	movs	r3, #10
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	1c02      	adds	r2, r0, #0
 8002a24:	801a      	strh	r2, [r3, #0]
 8002a26:	2308      	movs	r3, #8
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	1c0a      	adds	r2, r1, #0
 8002a2c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2241      	movs	r2, #65	; 0x41
 8002a32:	5c9b      	ldrb	r3, [r3, r2]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d000      	beq.n	8002a3c <HAL_I2C_Master_Transmit+0x2c>
 8002a3a:	e0e7      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2240      	movs	r2, #64	; 0x40
 8002a40:	5c9b      	ldrb	r3, [r3, r2]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_I2C_Master_Transmit+0x3a>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e0e1      	b.n	8002c0e <HAL_I2C_Master_Transmit+0x1fe>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2240      	movs	r2, #64	; 0x40
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a52:	f7ff fc79 	bl	8002348 <HAL_GetTick>
 8002a56:	0003      	movs	r3, r0
 8002a58:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	0219      	lsls	r1, r3, #8
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2319      	movs	r3, #25
 8002a66:	2201      	movs	r2, #1
 8002a68:	f001 fd00 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 8002a6c:	1e03      	subs	r3, r0, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0cc      	b.n	8002c0e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2241      	movs	r2, #65	; 0x41
 8002a78:	2121      	movs	r1, #33	; 0x21
 8002a7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2242      	movs	r2, #66	; 0x42
 8002a80:	2110      	movs	r1, #16
 8002a82:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2208      	movs	r2, #8
 8002a94:	18ba      	adds	r2, r7, r2
 8002a96:	8812      	ldrh	r2, [r2, #0]
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2bff      	cmp	r3, #255	; 0xff
 8002aa8:	d911      	bls.n	8002ace <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	045c      	lsls	r4, r3, #17
 8002aba:	230a      	movs	r3, #10
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	8819      	ldrh	r1, [r3, #0]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	4b55      	ldr	r3, [pc, #340]	; (8002c18 <HAL_I2C_Master_Transmit+0x208>)
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	0023      	movs	r3, r4
 8002ac8:	f001 fe04 	bl	80046d4 <I2C_TransferConfig>
 8002acc:	e075      	b.n	8002bba <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	049c      	lsls	r4, r3, #18
 8002ae2:	230a      	movs	r3, #10
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	8819      	ldrh	r1, [r3, #0]
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	4b4b      	ldr	r3, [pc, #300]	; (8002c18 <HAL_I2C_Master_Transmit+0x208>)
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	0023      	movs	r3, r4
 8002af0:	f001 fdf0 	bl	80046d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002af4:	e061      	b.n	8002bba <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f001 fcf4 	bl	80044ea <I2C_WaitOnTXISFlagUntilTimeout>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e081      	b.n	8002c0e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d03a      	beq.n	8002bba <HAL_I2C_Master_Transmit+0x1aa>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d136      	bne.n	8002bba <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	0013      	movs	r3, r2
 8002b56:	2200      	movs	r2, #0
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	f001 fc87 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 8002b5e:	1e03      	subs	r3, r0, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e053      	b.n	8002c0e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2bff      	cmp	r3, #255	; 0xff
 8002b6e:	d911      	bls.n	8002b94 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	22ff      	movs	r2, #255	; 0xff
 8002b74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	045c      	lsls	r4, r3, #17
 8002b80:	230a      	movs	r3, #10
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	8819      	ldrh	r1, [r3, #0]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	0023      	movs	r3, r4
 8002b8e:	f001 fda1 	bl	80046d4 <I2C_TransferConfig>
 8002b92:	e012      	b.n	8002bba <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	049c      	lsls	r4, r3, #18
 8002ba8:	230a      	movs	r3, #10
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	8819      	ldrh	r1, [r3, #0]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	0023      	movs	r3, r4
 8002bb6:	f001 fd8d 	bl	80046d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d198      	bne.n	8002af6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f001 fccc 	bl	8004568 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e01a      	b.n	8002c0e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	490c      	ldr	r1, [pc, #48]	; (8002c1c <HAL_I2C_Master_Transmit+0x20c>)
 8002bec:	400a      	ands	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2241      	movs	r2, #65	; 0x41
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2242      	movs	r2, #66	; 0x42
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2240      	movs	r2, #64	; 0x40
 8002c04:	2100      	movs	r1, #0
 8002c06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
  }
}
 8002c0e:	0018      	movs	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b007      	add	sp, #28
 8002c14:	bd90      	pop	{r4, r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	80002000 	.word	0x80002000
 8002c1c:	fe00e800 	.word	0xfe00e800

08002c20 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	0008      	movs	r0, r1
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	230a      	movs	r3, #10
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	1c02      	adds	r2, r0, #0
 8002c34:	801a      	strh	r2, [r3, #0]
 8002c36:	2308      	movs	r3, #8
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	1c0a      	adds	r2, r1, #0
 8002c3c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2241      	movs	r2, #65	; 0x41
 8002c42:	5c9b      	ldrb	r3, [r3, r2]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d15b      	bne.n	8002d02 <HAL_I2C_Master_Transmit_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	401a      	ands	r2, r3
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2C_Master_Transmit_IT+0x42>
    {
      return HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e050      	b.n	8002d04 <HAL_I2C_Master_Transmit_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2240      	movs	r2, #64	; 0x40
 8002c66:	5c9b      	ldrb	r3, [r3, r2]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_I2C_Master_Transmit_IT+0x50>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e049      	b.n	8002d04 <HAL_I2C_Master_Transmit_IT+0xe4>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2240      	movs	r2, #64	; 0x40
 8002c74:	2101      	movs	r1, #1
 8002c76:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2241      	movs	r2, #65	; 0x41
 8002c7c:	2121      	movs	r1, #33	; 0x21
 8002c7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2242      	movs	r2, #66	; 0x42
 8002c84:	2110      	movs	r1, #16
 8002c86:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2208      	movs	r2, #8
 8002c98:	18ba      	adds	r2, r7, r2
 8002c9a:	8812      	ldrh	r2, [r2, #0]
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <HAL_I2C_Master_Transmit_IT+0xec>)
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a1a      	ldr	r2, [pc, #104]	; (8002d10 <HAL_I2C_Master_Transmit_IT+0xf0>)
 8002ca8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2bff      	cmp	r3, #255	; 0xff
 8002cb2:	d906      	bls.n	8002cc2 <HAL_I2C_Master_Transmit_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	22ff      	movs	r2, #255	; 0xff
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	045b      	lsls	r3, r3, #17
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e007      	b.n	8002cd2 <HAL_I2C_Master_Transmit_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	049b      	lsls	r3, r3, #18
 8002cd0:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	697c      	ldr	r4, [r7, #20]
 8002cda:	230a      	movs	r3, #10
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	8819      	ldrh	r1, [r3, #0]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <HAL_I2C_Master_Transmit_IT+0xf4>)
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	0023      	movs	r3, r4
 8002ce8:	f001 fcf4 	bl	80046d4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2240      	movs	r2, #64	; 0x40
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f001 fd21 	bl	8004740 <I2C_Enable_IRQ>

    return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e000      	b.n	8002d04 <HAL_I2C_Master_Transmit_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
  }
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b007      	add	sp, #28
 8002d0a:	bd90      	pop	{r4, r7, pc}
 8002d0c:	ffff0000 	.word	0xffff0000
 8002d10:	080031ed 	.word	0x080031ed
 8002d14:	80002000 	.word	0x80002000

08002d18 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	0008      	movs	r0, r1
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	0019      	movs	r1, r3
 8002d26:	230a      	movs	r3, #10
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	1c02      	adds	r2, r0, #0
 8002d2c:	801a      	strh	r2, [r3, #0]
 8002d2e:	2308      	movs	r3, #8
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	1c0a      	adds	r2, r1, #0
 8002d34:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2241      	movs	r2, #65	; 0x41
 8002d3a:	5c9b      	ldrb	r3, [r3, r2]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d15b      	bne.n	8002dfa <HAL_I2C_Master_Receive_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699a      	ldr	r2, [r3, #24]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d101      	bne.n	8002d5a <HAL_I2C_Master_Receive_IT+0x42>
    {
      return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
 8002d58:	e050      	b.n	8002dfc <HAL_I2C_Master_Receive_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2240      	movs	r2, #64	; 0x40
 8002d5e:	5c9b      	ldrb	r3, [r3, r2]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_I2C_Master_Receive_IT+0x50>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e049      	b.n	8002dfc <HAL_I2C_Master_Receive_IT+0xe4>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2240      	movs	r2, #64	; 0x40
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2241      	movs	r2, #65	; 0x41
 8002d74:	2122      	movs	r1, #34	; 0x22
 8002d76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2242      	movs	r2, #66	; 0x42
 8002d7c:	2110      	movs	r1, #16
 8002d7e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2208      	movs	r2, #8
 8002d90:	18ba      	adds	r2, r7, r2
 8002d92:	8812      	ldrh	r2, [r2, #0]
 8002d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_I2C_Master_Receive_IT+0xec>)
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4a1a      	ldr	r2, [pc, #104]	; (8002e08 <HAL_I2C_Master_Receive_IT+0xf0>)
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2bff      	cmp	r3, #255	; 0xff
 8002daa:	d906      	bls.n	8002dba <HAL_I2C_Master_Receive_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	22ff      	movs	r2, #255	; 0xff
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	045b      	lsls	r3, r3, #17
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e007      	b.n	8002dca <HAL_I2C_Master_Receive_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	049b      	lsls	r3, r3, #18
 8002dc8:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	697c      	ldr	r4, [r7, #20]
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	8819      	ldrh	r1, [r3, #0]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <HAL_I2C_Master_Receive_IT+0xf4>)
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	0023      	movs	r3, r4
 8002de0:	f001 fc78 	bl	80046d4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2240      	movs	r2, #64	; 0x40
 8002de8:	2100      	movs	r1, #0
 8002dea:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2102      	movs	r1, #2
 8002df0:	0018      	movs	r0, r3
 8002df2:	f001 fca5 	bl	8004740 <I2C_Enable_IRQ>

    return HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e000      	b.n	8002dfc <HAL_I2C_Master_Receive_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
  }
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b007      	add	sp, #28
 8002e02:	bd90      	pop	{r4, r7, pc}
 8002e04:	ffff0000 	.word	0xffff0000
 8002e08:	080031ed 	.word	0x080031ed
 8002e0c:	80002400 	.word	0x80002400

08002e10 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08a      	sub	sp, #40	; 0x28
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	230a      	movs	r3, #10
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	1c0a      	adds	r2, r1, #0
 8002e22:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2241      	movs	r2, #65	; 0x41
 8002e2c:	5c9b      	ldrb	r3, [r3, r2]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d000      	beq.n	8002e36 <HAL_I2C_IsDeviceReady+0x26>
 8002e34:	e0fe      	b.n	8003034 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	401a      	ands	r2, r3
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d101      	bne.n	8002e4e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e0f3      	b.n	8003036 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2240      	movs	r2, #64	; 0x40
 8002e52:	5c9b      	ldrb	r3, [r3, r2]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_I2C_IsDeviceReady+0x4c>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0ec      	b.n	8003036 <HAL_I2C_IsDeviceReady+0x226>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2240      	movs	r2, #64	; 0x40
 8002e60:	2101      	movs	r1, #1
 8002e62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2241      	movs	r2, #65	; 0x41
 8002e68:	2124      	movs	r1, #36	; 0x24
 8002e6a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d107      	bne.n	8002e8a <HAL_I2C_IsDeviceReady+0x7a>
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	059b      	lsls	r3, r3, #22
 8002e82:	0d9b      	lsrs	r3, r3, #22
 8002e84:	4a6e      	ldr	r2, [pc, #440]	; (8003040 <HAL_I2C_IsDeviceReady+0x230>)
 8002e86:	431a      	orrs	r2, r3
 8002e88:	e007      	b.n	8002e9a <HAL_I2C_IsDeviceReady+0x8a>
 8002e8a:	230a      	movs	r3, #10
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	059b      	lsls	r3, r3, #22
 8002e92:	0d9b      	lsrs	r3, r3, #22
 8002e94:	22a0      	movs	r2, #160	; 0xa0
 8002e96:	0192      	lsls	r2, r2, #6
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002ea0:	f7ff fa52 	bl	8002348 <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	3b20      	subs	r3, #32
 8002eb4:	425a      	negs	r2, r3
 8002eb6:	4153      	adcs	r3, r2
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	231f      	movs	r3, #31
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	4013      	ands	r3, r2
 8002eca:	3b10      	subs	r3, #16
 8002ecc:	425a      	negs	r2, r3
 8002ece:	4153      	adcs	r3, r2
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	231e      	movs	r3, #30
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ed8:	e035      	b.n	8002f46 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	d01a      	beq.n	8002f16 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ee0:	f7ff fa32 	bl	8002348 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d302      	bcc.n	8002ef6 <HAL_I2C_IsDeviceReady+0xe6>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2241      	movs	r2, #65	; 0x41
 8002efa:	2120      	movs	r1, #32
 8002efc:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	2220      	movs	r2, #32
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2240      	movs	r2, #64	; 0x40
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e08f      	b.n	8003036 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	4013      	ands	r3, r2
 8002f20:	3b20      	subs	r3, #32
 8002f22:	425a      	negs	r2, r3
 8002f24:	4153      	adcs	r3, r2
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	231f      	movs	r3, #31
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2210      	movs	r2, #16
 8002f36:	4013      	ands	r3, r2
 8002f38:	3b10      	subs	r3, #16
 8002f3a:	425a      	negs	r2, r3
 8002f3c:	4153      	adcs	r3, r2
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	231e      	movs	r3, #30
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002f46:	231f      	movs	r3, #31
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_I2C_IsDeviceReady+0x14a>
 8002f50:	231e      	movs	r3, #30
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0bf      	beq.n	8002eda <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2210      	movs	r2, #16
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d01a      	beq.n	8002f9e <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	0013      	movs	r3, r2
 8002f72:	2200      	movs	r2, #0
 8002f74:	2120      	movs	r1, #32
 8002f76:	f001 fa79 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e059      	b.n	8003036 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2220      	movs	r2, #32
 8002f88:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2241      	movs	r2, #65	; 0x41
 8002f8e:	2120      	movs	r1, #32
 8002f90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2240      	movs	r2, #64	; 0x40
 8002f96:	2100      	movs	r1, #0
 8002f98:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e04b      	b.n	8003036 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	0013      	movs	r3, r2
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2120      	movs	r1, #32
 8002fac:	f001 fa5e 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 8002fb0:	1e03      	subs	r3, r0, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e03e      	b.n	8003036 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d119      	bne.n	8003004 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2180      	movs	r1, #128	; 0x80
 8002fdc:	01c9      	lsls	r1, r1, #7
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	0013      	movs	r3, r2
 8002fec:	2200      	movs	r2, #0
 8002fee:	2120      	movs	r1, #32
 8002ff0:	f001 fa3c 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	1e03      	subs	r3, r0, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e01c      	b.n	8003036 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2220      	movs	r2, #32
 8003002:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	3301      	adds	r3, #1
 8003008:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d900      	bls.n	8003014 <HAL_I2C_IsDeviceReady+0x204>
 8003012:	e72e      	b.n	8002e72 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2241      	movs	r2, #65	; 0x41
 8003018:	2120      	movs	r1, #32
 800301a:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	2220      	movs	r2, #32
 8003022:	431a      	orrs	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2240      	movs	r2, #64	; 0x40
 800302c:	2100      	movs	r1, #0
 800302e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8003034:	2302      	movs	r3, #2
  }
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b008      	add	sp, #32
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	02002000 	.word	0x02002000

08003044 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	68f9      	ldr	r1, [r7, #12]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
  }
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b004      	add	sp, #16
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	001a      	movs	r2, r3
 8003096:	2301      	movs	r3, #1
 8003098:	4013      	ands	r3, r2
 800309a:	d010      	beq.n	80030be <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	09db      	lsrs	r3, r3, #7
 80030a0:	001a      	movs	r2, r3
 80030a2:	2301      	movs	r3, #1
 80030a4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80030a6:	d00a      	beq.n	80030be <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	2201      	movs	r2, #1
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2280      	movs	r2, #128	; 0x80
 80030ba:	0052      	lsls	r2, r2, #1
 80030bc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	0a9b      	lsrs	r3, r3, #10
 80030c2:	001a      	movs	r2, r3
 80030c4:	2301      	movs	r3, #1
 80030c6:	4013      	ands	r3, r2
 80030c8:	d010      	beq.n	80030ec <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	09db      	lsrs	r3, r3, #7
 80030ce:	001a      	movs	r2, r3
 80030d0:	2301      	movs	r3, #1
 80030d2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80030d4:	d00a      	beq.n	80030ec <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	2208      	movs	r2, #8
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	00d2      	lsls	r2, r2, #3
 80030ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	0a5b      	lsrs	r3, r3, #9
 80030f0:	001a      	movs	r2, r3
 80030f2:	2301      	movs	r3, #1
 80030f4:	4013      	ands	r3, r2
 80030f6:	d010      	beq.n	800311a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	09db      	lsrs	r3, r3, #7
 80030fc:	001a      	movs	r2, r3
 80030fe:	2301      	movs	r3, #1
 8003100:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003102:	d00a      	beq.n	800311a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	2202      	movs	r2, #2
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	0092      	lsls	r2, r2, #2
 8003118:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	220b      	movs	r2, #11
 8003124:	4013      	ands	r3, r2
 8003126:	d005      	beq.n	8003134 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	0011      	movs	r1, r2
 800312e:	0018      	movs	r0, r3
 8003130:	f001 f850 	bl	80041d4 <I2C_ITError>
  }
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b006      	add	sp, #24
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	b002      	add	sp, #8
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b002      	add	sp, #8
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b002      	add	sp, #8
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	0008      	movs	r0, r1
 8003186:	0011      	movs	r1, r2
 8003188:	1cfb      	adds	r3, r7, #3
 800318a:	1c02      	adds	r2, r0, #0
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	003b      	movs	r3, r7
 8003190:	1c0a      	adds	r2, r1, #0
 8003192:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b002      	add	sp, #8
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b002      	add	sp, #8
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b002      	add	sp, #8
 80031ea:	bd80      	pop	{r7, pc}

080031ec <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2240      	movs	r2, #64	; 0x40
 8003200:	5c9b      	ldrb	r3, [r3, r2]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <I2C_Master_ISR_IT+0x1e>
 8003206:	2302      	movs	r3, #2
 8003208:	e12b      	b.n	8003462 <I2C_Master_ISR_IT+0x276>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2240      	movs	r2, #64	; 0x40
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	001a      	movs	r2, r3
 8003218:	2301      	movs	r3, #1
 800321a:	4013      	ands	r3, r2
 800321c:	d014      	beq.n	8003248 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	001a      	movs	r2, r3
 8003224:	2301      	movs	r3, #1
 8003226:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003228:	d00e      	beq.n	8003248 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2210      	movs	r2, #16
 8003230:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	2204      	movs	r2, #4
 8003238:	431a      	orrs	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	0018      	movs	r0, r3
 8003242:	f001 f8d2 	bl	80043ea <I2C_Flush_TXDR>
 8003246:	e0f5      	b.n	8003434 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	001a      	movs	r2, r3
 800324e:	2301      	movs	r3, #1
 8003250:	4013      	ands	r3, r2
 8003252:	d023      	beq.n	800329c <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	001a      	movs	r2, r3
 800325a:	2301      	movs	r3, #1
 800325c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800325e:	d01d      	beq.n	800329c <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2204      	movs	r2, #4
 8003264:	4393      	bics	r3, r2
 8003266:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	855a      	strh	r2, [r3, #42]	; 0x2a
 800329a:	e0cb      	b.n	8003434 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	001a      	movs	r2, r3
 80032a2:	2301      	movs	r3, #1
 80032a4:	4013      	ands	r3, r2
 80032a6:	d01e      	beq.n	80032e6 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	001a      	movs	r2, r3
 80032ae:	2301      	movs	r3, #1
 80032b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032b2:	d018      	beq.n	80032e6 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	781a      	ldrb	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032e4:	e0a6      	b.n	8003434 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	09db      	lsrs	r3, r3, #7
 80032ea:	001a      	movs	r2, r3
 80032ec:	2301      	movs	r3, #1
 80032ee:	4013      	ands	r3, r2
 80032f0:	d100      	bne.n	80032f4 <I2C_Master_ISR_IT+0x108>
 80032f2:	e06b      	b.n	80033cc <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	001a      	movs	r2, r3
 80032fa:	2301      	movs	r3, #1
 80032fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80032fe:	d065      	beq.n	80033cc <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d04a      	beq.n	80033a0 <I2C_Master_ISR_IT+0x1b4>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330e:	2b00      	cmp	r3, #0
 8003310:	d146      	bne.n	80033a0 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	b29a      	uxth	r2, r3
 800331a:	2112      	movs	r1, #18
 800331c:	187b      	adds	r3, r7, r1
 800331e:	0592      	lsls	r2, r2, #22
 8003320:	0d92      	lsrs	r2, r2, #22
 8003322:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2bff      	cmp	r3, #255	; 0xff
 800332c:	d910      	bls.n	8003350 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	22ff      	movs	r2, #255	; 0xff
 8003332:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	b2da      	uxtb	r2, r3
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	045c      	lsls	r4, r3, #17
 800333e:	187b      	adds	r3, r7, r1
 8003340:	8819      	ldrh	r1, [r3, #0]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	2300      	movs	r3, #0
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	0023      	movs	r3, r4
 800334a:	f001 f9c3 	bl	80046d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800334e:	e03c      	b.n	80033ca <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	4a43      	ldr	r2, [pc, #268]	; (800346c <I2C_Master_ISR_IT+0x280>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00e      	beq.n	8003382 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800336e:	2312      	movs	r3, #18
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	8819      	ldrh	r1, [r3, #0]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	2300      	movs	r3, #0
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	0023      	movs	r3, r4
 800337c:	f001 f9aa 	bl	80046d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003380:	e023      	b.n	80033ca <I2C_Master_ISR_IT+0x1de>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	b2da      	uxtb	r2, r3
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	049c      	lsls	r4, r3, #18
 800338c:	2312      	movs	r3, #18
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	8819      	ldrh	r1, [r3, #0]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	2300      	movs	r3, #0
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	0023      	movs	r3, r4
 800339a:	f001 f99b 	bl	80046d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800339e:	e014      	b.n	80033ca <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	049b      	lsls	r3, r3, #18
 80033aa:	401a      	ands	r2, r3
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	049b      	lsls	r3, r3, #18
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d004      	beq.n	80033be <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 fc14 	bl	8003be4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033bc:	e03a      	b.n	8003434 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2140      	movs	r1, #64	; 0x40
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 ff06 	bl	80041d4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033c8:	e034      	b.n	8003434 <I2C_Master_ISR_IT+0x248>
 80033ca:	e033      	b.n	8003434 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	099b      	lsrs	r3, r3, #6
 80033d0:	001a      	movs	r2, r3
 80033d2:	2301      	movs	r3, #1
 80033d4:	4013      	ands	r3, r2
 80033d6:	d02d      	beq.n	8003434 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	001a      	movs	r2, r3
 80033de:	2301      	movs	r3, #1
 80033e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80033e2:	d027      	beq.n	8003434 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d11d      	bne.n	800342a <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	049b      	lsls	r3, r3, #18
 80033f8:	401a      	ands	r2, r3
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	049b      	lsls	r3, r3, #18
 80033fe:	429a      	cmp	r2, r3
 8003400:	d018      	beq.n	8003434 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	4a19      	ldr	r2, [pc, #100]	; (800346c <I2C_Master_ISR_IT+0x280>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d109      	bne.n	8003420 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2180      	movs	r1, #128	; 0x80
 8003418:	01c9      	lsls	r1, r1, #7
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	e009      	b.n	8003434 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	0018      	movs	r0, r3
 8003424:	f000 fbde 	bl	8003be4 <I2C_ITMasterSeqCplt>
 8003428:	e004      	b.n	8003434 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2140      	movs	r1, #64	; 0x40
 800342e:	0018      	movs	r0, r3
 8003430:	f000 fed0 	bl	80041d4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	001a      	movs	r2, r3
 800343a:	2301      	movs	r3, #1
 800343c:	4013      	ands	r3, r2
 800343e:	d00b      	beq.n	8003458 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	001a      	movs	r2, r3
 8003446:	2301      	movs	r3, #1
 8003448:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800344a:	d005      	beq.n	8003458 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	0011      	movs	r1, r2
 8003452:	0018      	movs	r0, r3
 8003454:	f000 fc6e 	bl	8003d34 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2240      	movs	r2, #64	; 0x40
 800345c:	2100      	movs	r1, #0
 800345e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	0018      	movs	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	b007      	add	sp, #28
 8003468:	bd90      	pop	{r4, r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	ffff0000 	.word	0xffff0000

08003470 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2240      	movs	r2, #64	; 0x40
 800348a:	5c9b      	ldrb	r3, [r3, r2]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <I2C_Slave_ISR_IT+0x24>
 8003490:	2302      	movs	r3, #2
 8003492:	e0fa      	b.n	800368a <I2C_Slave_ISR_IT+0x21a>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2240      	movs	r2, #64	; 0x40
 8003498:	2101      	movs	r1, #1
 800349a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	001a      	movs	r2, r3
 80034a2:	2301      	movs	r3, #1
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	001a      	movs	r2, r3
 80034ae:	2301      	movs	r3, #1
 80034b0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80034b2:	d005      	beq.n	80034c0 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	0011      	movs	r1, r2
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 fd0c 	bl	8003ed8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	001a      	movs	r2, r3
 80034c6:	2301      	movs	r3, #1
 80034c8:	4013      	ands	r3, r2
 80034ca:	d054      	beq.n	8003576 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	001a      	movs	r2, r3
 80034d2:	2301      	movs	r3, #1
 80034d4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034d6:	d04e      	beq.n	8003576 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d12d      	bne.n	800353e <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2241      	movs	r2, #65	; 0x41
 80034e6:	5c9b      	ldrb	r3, [r3, r2]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b28      	cmp	r3, #40	; 0x28
 80034ec:	d10b      	bne.n	8003506 <I2C_Slave_ISR_IT+0x96>
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	049b      	lsls	r3, r3, #18
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d106      	bne.n	8003506 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	0011      	movs	r1, r2
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 fe0e 	bl	8004120 <I2C_ITListenCplt>
 8003504:	e036      	b.n	8003574 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2241      	movs	r2, #65	; 0x41
 800350a:	5c9b      	ldrb	r3, [r3, r2]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b29      	cmp	r3, #41	; 0x29
 8003510:	d110      	bne.n	8003534 <I2C_Slave_ISR_IT+0xc4>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	4a5f      	ldr	r2, [pc, #380]	; (8003694 <I2C_Slave_ISR_IT+0x224>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00c      	beq.n	8003534 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2210      	movs	r2, #16
 8003520:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	0018      	movs	r0, r3
 8003526:	f000 ff60 	bl	80043ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	0018      	movs	r0, r3
 800352e:	f000 fb9b 	bl	8003c68 <I2C_ITSlaveSeqCplt>
 8003532:	e01f      	b.n	8003574 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2210      	movs	r2, #16
 800353a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800353c:	e09d      	b.n	800367a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2210      	movs	r2, #16
 8003544:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	2204      	movs	r2, #4
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <I2C_Slave_ISR_IT+0xf4>
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	045b      	lsls	r3, r3, #17
 800355e:	429a      	cmp	r2, r3
 8003560:	d000      	beq.n	8003564 <I2C_Slave_ISR_IT+0xf4>
 8003562:	e08a      	b.n	800367a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	0011      	movs	r1, r2
 800356c:	0018      	movs	r0, r3
 800356e:	f000 fe31 	bl	80041d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003572:	e082      	b.n	800367a <I2C_Slave_ISR_IT+0x20a>
 8003574:	e081      	b.n	800367a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	001a      	movs	r2, r3
 800357c:	2301      	movs	r3, #1
 800357e:	4013      	ands	r3, r2
 8003580:	d031      	beq.n	80035e6 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	001a      	movs	r2, r3
 8003588:	2301      	movs	r3, #1
 800358a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800358c:	d02b      	beq.n	80035e6 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d018      	beq.n	80035ca <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d154      	bne.n	800367e <I2C_Slave_ISR_IT+0x20e>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	4a2f      	ldr	r2, [pc, #188]	; (8003694 <I2C_Slave_ISR_IT+0x224>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d050      	beq.n	800367e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	0018      	movs	r0, r3
 80035e0:	f000 fb42 	bl	8003c68 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80035e4:	e04b      	b.n	800367e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	001a      	movs	r2, r3
 80035ec:	2301      	movs	r3, #1
 80035ee:	4013      	ands	r3, r2
 80035f0:	d00c      	beq.n	800360c <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	08db      	lsrs	r3, r3, #3
 80035f6:	001a      	movs	r2, r3
 80035f8:	2301      	movs	r3, #1
 80035fa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035fc:	d006      	beq.n	800360c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	0011      	movs	r1, r2
 8003604:	0018      	movs	r0, r3
 8003606:	f000 fa49 	bl	8003a9c <I2C_ITAddrCplt>
 800360a:	e039      	b.n	8003680 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	001a      	movs	r2, r3
 8003612:	2301      	movs	r3, #1
 8003614:	4013      	ands	r3, r2
 8003616:	d033      	beq.n	8003680 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	001a      	movs	r2, r3
 800361e:	2301      	movs	r3, #1
 8003620:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003622:	d02d      	beq.n	8003680 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d018      	beq.n	8003660 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28
 800365e:	e00f      	b.n	8003680 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	045b      	lsls	r3, r3, #17
 8003666:	429a      	cmp	r2, r3
 8003668:	d002      	beq.n	8003670 <I2C_Slave_ISR_IT+0x200>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d107      	bne.n	8003680 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	0018      	movs	r0, r3
 8003674:	f000 faf8 	bl	8003c68 <I2C_ITSlaveSeqCplt>
 8003678:	e002      	b.n	8003680 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	e000      	b.n	8003680 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800367e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	2100      	movs	r1, #0
 8003686:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	b006      	add	sp, #24
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	ffff0000 	.word	0xffff0000

08003698 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	5c9b      	ldrb	r3, [r3, r2]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <I2C_Master_ISR_DMA+0x1a>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e0f7      	b.n	80038a2 <I2C_Master_ISR_DMA+0x20a>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2240      	movs	r2, #64	; 0x40
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	001a      	movs	r2, r3
 80036c0:	2301      	movs	r3, #1
 80036c2:	4013      	ands	r3, r2
 80036c4:	d019      	beq.n	80036fa <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	001a      	movs	r2, r3
 80036cc:	2301      	movs	r3, #1
 80036ce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80036d0:	d013      	beq.n	80036fa <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2210      	movs	r2, #16
 80036d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	2204      	movs	r2, #4
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2120      	movs	r1, #32
 80036ea:	0018      	movs	r0, r3
 80036ec:	f001 f828 	bl	8004740 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 fe79 	bl	80043ea <I2C_Flush_TXDR>
 80036f8:	e0ce      	b.n	8003898 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	09db      	lsrs	r3, r3, #7
 80036fe:	001a      	movs	r2, r3
 8003700:	2301      	movs	r3, #1
 8003702:	4013      	ands	r3, r2
 8003704:	d100      	bne.n	8003708 <I2C_Master_ISR_DMA+0x70>
 8003706:	e07e      	b.n	8003806 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	001a      	movs	r2, r3
 800370e:	2301      	movs	r3, #1
 8003710:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003712:	d100      	bne.n	8003716 <I2C_Master_ISR_DMA+0x7e>
 8003714:	e077      	b.n	8003806 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2140      	movs	r1, #64	; 0x40
 8003722:	438a      	bics	r2, r1
 8003724:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d055      	beq.n	80037dc <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	b29a      	uxth	r2, r3
 8003738:	2312      	movs	r3, #18
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	0592      	lsls	r2, r2, #22
 800373e:	0d92      	lsrs	r2, r2, #22
 8003740:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	2bff      	cmp	r3, #255	; 0xff
 800374a:	d906      	bls.n	800375a <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	22ff      	movs	r2, #255	; 0xff
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	045b      	lsls	r3, r3, #17
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e010      	b.n	800377c <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	4a50      	ldr	r2, [pc, #320]	; (80038ac <I2C_Master_ISR_DMA+0x214>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d003      	beq.n	8003776 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	e002      	b.n	800377c <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	049b      	lsls	r3, r3, #18
 800377a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	b2da      	uxtb	r2, r3
 8003782:	697c      	ldr	r4, [r7, #20]
 8003784:	2312      	movs	r3, #18
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	8819      	ldrh	r1, [r3, #0]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	2300      	movs	r3, #0
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	0023      	movs	r3, r4
 8003792:	f000 ff9f 	bl	80046d4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2241      	movs	r2, #65	; 0x41
 80037ac:	5c9b      	ldrb	r3, [r3, r2]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b22      	cmp	r3, #34	; 0x22
 80037b2:	d109      	bne.n	80037c8 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2180      	movs	r1, #128	; 0x80
 80037c0:	0209      	lsls	r1, r1, #8
 80037c2:	430a      	orrs	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80037c6:	e067      	b.n	8003898 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2180      	movs	r1, #128	; 0x80
 80037d4:	01c9      	lsls	r1, r1, #7
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80037da:	e05d      	b.n	8003898 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	049b      	lsls	r3, r3, #18
 80037e6:	401a      	ands	r2, r3
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	049b      	lsls	r3, r3, #18
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d004      	beq.n	80037fa <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 f9f6 	bl	8003be4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80037f8:	e04e      	b.n	8003898 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2140      	movs	r1, #64	; 0x40
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 fce8 	bl	80041d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003804:	e048      	b.n	8003898 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	001a      	movs	r2, r3
 800380c:	2301      	movs	r3, #1
 800380e:	4013      	ands	r3, r2
 8003810:	d02e      	beq.n	8003870 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	099b      	lsrs	r3, r3, #6
 8003816:	001a      	movs	r2, r3
 8003818:	2301      	movs	r3, #1
 800381a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800381c:	d028      	beq.n	8003870 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11d      	bne.n	8003864 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	049b      	lsls	r3, r3, #18
 8003832:	401a      	ands	r2, r3
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	049b      	lsls	r3, r3, #18
 8003838:	429a      	cmp	r2, r3
 800383a:	d02c      	beq.n	8003896 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	4a1a      	ldr	r2, [pc, #104]	; (80038ac <I2C_Master_ISR_DMA+0x214>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d109      	bne.n	800385a <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	01c9      	lsls	r1, r1, #7
 8003854:	430a      	orrs	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003858:	e01d      	b.n	8003896 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	0018      	movs	r0, r3
 800385e:	f000 f9c1 	bl	8003be4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003862:	e018      	b.n	8003896 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2140      	movs	r1, #64	; 0x40
 8003868:	0018      	movs	r0, r3
 800386a:	f000 fcb3 	bl	80041d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800386e:	e012      	b.n	8003896 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	001a      	movs	r2, r3
 8003876:	2301      	movs	r3, #1
 8003878:	4013      	ands	r3, r2
 800387a:	d00d      	beq.n	8003898 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	001a      	movs	r2, r3
 8003882:	2301      	movs	r3, #1
 8003884:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003886:	d007      	beq.n	8003898 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	0011      	movs	r1, r2
 800388e:	0018      	movs	r0, r3
 8003890:	f000 fa50 	bl	8003d34 <I2C_ITMasterCplt>
 8003894:	e000      	b.n	8003898 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8003896:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2240      	movs	r2, #64	; 0x40
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	0018      	movs	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b007      	add	sp, #28
 80038a8:	bd90      	pop	{r4, r7, pc}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	ffff0000 	.word	0xffff0000

080038b0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2240      	movs	r2, #64	; 0x40
 80038ca:	5c9b      	ldrb	r3, [r3, r2]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <I2C_Slave_ISR_DMA+0x24>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e0dd      	b.n	8003a90 <I2C_Slave_ISR_DMA+0x1e0>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	2101      	movs	r1, #1
 80038da:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	001a      	movs	r2, r3
 80038e2:	2301      	movs	r3, #1
 80038e4:	4013      	ands	r3, r2
 80038e6:	d00b      	beq.n	8003900 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	001a      	movs	r2, r3
 80038ee:	2301      	movs	r3, #1
 80038f0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038f2:	d005      	beq.n	8003900 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	0011      	movs	r1, r2
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 faec 	bl	8003ed8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	001a      	movs	r2, r3
 8003906:	2301      	movs	r3, #1
 8003908:	4013      	ands	r3, r2
 800390a:	d100      	bne.n	800390e <I2C_Slave_ISR_DMA+0x5e>
 800390c:	e0a9      	b.n	8003a62 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	001a      	movs	r2, r3
 8003914:	2301      	movs	r3, #1
 8003916:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003918:	d100      	bne.n	800391c <I2C_Slave_ISR_DMA+0x6c>
 800391a:	e0a2      	b.n	8003a62 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	0b9b      	lsrs	r3, r3, #14
 8003920:	001a      	movs	r2, r3
 8003922:	2301      	movs	r3, #1
 8003924:	4013      	ands	r3, r2
 8003926:	d106      	bne.n	8003936 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	0bdb      	lsrs	r3, r3, #15
 800392c:	001a      	movs	r2, r3
 800392e:	2301      	movs	r3, #1
 8003930:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003932:	d100      	bne.n	8003936 <I2C_Slave_ISR_DMA+0x86>
 8003934:	e08e      	b.n	8003a54 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00d      	beq.n	800395a <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0bdb      	lsrs	r3, r3, #15
 8003942:	001a      	movs	r2, r3
 8003944:	2301      	movs	r3, #1
 8003946:	4013      	ands	r3, r2
 8003948:	d007      	beq.n	800395a <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8003956:	2301      	movs	r3, #1
 8003958:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00d      	beq.n	800397e <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	0b9b      	lsrs	r3, r3, #14
 8003966:	001a      	movs	r2, r3
 8003968:	2301      	movs	r3, #1
 800396a:	4013      	ands	r3, r2
 800396c:	d007      	beq.n	800397e <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 800397a:	2301      	movs	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d12d      	bne.n	80039e0 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2241      	movs	r2, #65	; 0x41
 8003988:	5c9b      	ldrb	r3, [r3, r2]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b28      	cmp	r3, #40	; 0x28
 800398e:	d10b      	bne.n	80039a8 <I2C_Slave_ISR_DMA+0xf8>
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	049b      	lsls	r3, r3, #18
 8003996:	429a      	cmp	r2, r3
 8003998:	d106      	bne.n	80039a8 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	0011      	movs	r1, r2
 80039a0:	0018      	movs	r0, r3
 80039a2:	f000 fbbd 	bl	8004120 <I2C_ITListenCplt>
 80039a6:	e054      	b.n	8003a52 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2241      	movs	r2, #65	; 0x41
 80039ac:	5c9b      	ldrb	r3, [r3, r2]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b29      	cmp	r3, #41	; 0x29
 80039b2:	d110      	bne.n	80039d6 <I2C_Slave_ISR_DMA+0x126>
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	4a38      	ldr	r2, [pc, #224]	; (8003a98 <I2C_Slave_ISR_DMA+0x1e8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00c      	beq.n	80039d6 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2210      	movs	r2, #16
 80039c2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 fd0f 	bl	80043ea <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 f94a 	bl	8003c68 <I2C_ITSlaveSeqCplt>
 80039d4:	e03d      	b.n	8003a52 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2210      	movs	r2, #16
 80039dc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80039de:	e03e      	b.n	8003a5e <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2210      	movs	r2, #16
 80039e6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	2204      	movs	r2, #4
 80039ee:	431a      	orrs	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80039f4:	2317      	movs	r3, #23
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	2141      	movs	r1, #65	; 0x41
 80039fc:	5c52      	ldrb	r2, [r2, r1]
 80039fe:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d004      	beq.n	8003a10 <I2C_Slave_ISR_DMA+0x160>
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	045b      	lsls	r3, r3, #17
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d126      	bne.n	8003a5e <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a10:	2217      	movs	r2, #23
 8003a12:	18bb      	adds	r3, r7, r2
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b21      	cmp	r3, #33	; 0x21
 8003a18:	d003      	beq.n	8003a22 <I2C_Slave_ISR_DMA+0x172>
 8003a1a:	18bb      	adds	r3, r7, r2
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b29      	cmp	r3, #41	; 0x29
 8003a20:	d103      	bne.n	8003a2a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2221      	movs	r2, #33	; 0x21
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
 8003a28:	e00b      	b.n	8003a42 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a2a:	2217      	movs	r2, #23
 8003a2c:	18bb      	adds	r3, r7, r2
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b22      	cmp	r3, #34	; 0x22
 8003a32:	d003      	beq.n	8003a3c <I2C_Slave_ISR_DMA+0x18c>
 8003a34:	18bb      	adds	r3, r7, r2
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3a:	d102      	bne.n	8003a42 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2222      	movs	r2, #34	; 0x22
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	0011      	movs	r1, r2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 fbc2 	bl	80041d4 <I2C_ITError>
      if (treatdmanack == 1U)
 8003a50:	e005      	b.n	8003a5e <I2C_Slave_ISR_DMA+0x1ae>
 8003a52:	e004      	b.n	8003a5e <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2210      	movs	r2, #16
 8003a5a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a5c:	e013      	b.n	8003a86 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8003a5e:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a60:	e011      	b.n	8003a86 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	001a      	movs	r2, r3
 8003a68:	2301      	movs	r3, #1
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d00b      	beq.n	8003a86 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	08db      	lsrs	r3, r3, #3
 8003a72:	001a      	movs	r2, r3
 8003a74:	2301      	movs	r3, #1
 8003a76:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a78:	d005      	beq.n	8003a86 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	0011      	movs	r1, r2
 8003a80:	0018      	movs	r0, r3
 8003a82:	f000 f80b 	bl	8003a9c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2240      	movs	r2, #64	; 0x40
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b008      	add	sp, #32
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	ffff0000 	.word	0xffff0000

08003a9c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a9c:	b5b0      	push	{r4, r5, r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2241      	movs	r2, #65	; 0x41
 8003aaa:	5c9b      	ldrb	r3, [r3, r2]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	001a      	movs	r2, r3
 8003ab0:	2328      	movs	r3, #40	; 0x28
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b28      	cmp	r3, #40	; 0x28
 8003ab6:	d000      	beq.n	8003aba <I2C_ITAddrCplt+0x1e>
 8003ab8:	e088      	b.n	8003bcc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	250f      	movs	r5, #15
 8003ac6:	197b      	adds	r3, r7, r5
 8003ac8:	2101      	movs	r1, #1
 8003aca:	400a      	ands	r2, r1
 8003acc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	0c1b      	lsrs	r3, r3, #16
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	200c      	movs	r0, #12
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	21fe      	movs	r1, #254	; 0xfe
 8003ade:	400a      	ands	r2, r1
 8003ae0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	240a      	movs	r4, #10
 8003aec:	193b      	adds	r3, r7, r4
 8003aee:	0592      	lsls	r2, r2, #22
 8003af0:	0d92      	lsrs	r2, r2, #22
 8003af2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	2308      	movs	r3, #8
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	21fe      	movs	r1, #254	; 0xfe
 8003b02:	400a      	ands	r2, r1
 8003b04:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d148      	bne.n	8003ba0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003b0e:	0021      	movs	r1, r4
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	09db      	lsrs	r3, r3, #7
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	183b      	adds	r3, r7, r0
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	4053      	eors	r3, r2
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	001a      	movs	r2, r3
 8003b22:	2306      	movs	r3, #6
 8003b24:	4013      	ands	r3, r2
 8003b26:	d120      	bne.n	8003b6a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003b28:	183b      	adds	r3, r7, r0
 8003b2a:	187a      	adds	r2, r7, r1
 8003b2c:	8812      	ldrh	r2, [r2, #0]
 8003b2e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d14c      	bne.n	8003bdc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2240      	movs	r2, #64	; 0x40
 8003b54:	2100      	movs	r1, #0
 8003b56:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b58:	183b      	adds	r3, r7, r0
 8003b5a:	881a      	ldrh	r2, [r3, #0]
 8003b5c:	197b      	adds	r3, r7, r5
 8003b5e:	7819      	ldrb	r1, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	0018      	movs	r0, r3
 8003b64:	f7ff fb0a 	bl	800317c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b68:	e038      	b.n	8003bdc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003b6a:	240c      	movs	r4, #12
 8003b6c:	193b      	adds	r3, r7, r4
 8003b6e:	2208      	movs	r2, #8
 8003b70:	18ba      	adds	r2, r7, r2
 8003b72:	8812      	ldrh	r2, [r2, #0]
 8003b74:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	021a      	lsls	r2, r3, #8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	0011      	movs	r1, r2
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f000 fe46 	bl	8004810 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2240      	movs	r2, #64	; 0x40
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b8c:	193b      	adds	r3, r7, r4
 8003b8e:	881a      	ldrh	r2, [r3, #0]
 8003b90:	230f      	movs	r3, #15
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	7819      	ldrb	r1, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7ff faef 	bl	800317c <HAL_I2C_AddrCallback>
}
 8003b9e:	e01d      	b.n	8003bdc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	0011      	movs	r1, r2
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f000 fe31 	bl	8004810 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	881a      	ldrh	r2, [r3, #0]
 8003bbc:	230f      	movs	r3, #15
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	7819      	ldrb	r1, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f7ff fad9 	bl	800317c <HAL_I2C_AddrCallback>
}
 8003bca:	e007      	b.n	8003bdc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2240      	movs	r2, #64	; 0x40
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5499      	strb	r1, [r3, r2]
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b004      	add	sp, #16
 8003be2:	bdb0      	pop	{r4, r5, r7, pc}

08003be4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2242      	movs	r2, #66	; 0x42
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2241      	movs	r2, #65	; 0x41
 8003bf8:	5c9b      	ldrb	r3, [r3, r2]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b21      	cmp	r3, #33	; 0x21
 8003bfe:	d117      	bne.n	8003c30 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2241      	movs	r2, #65	; 0x41
 8003c04:	2120      	movs	r1, #32
 8003c06:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2211      	movs	r2, #17
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2101      	movs	r1, #1
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 fdf9 	bl	8004810 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2240      	movs	r2, #64	; 0x40
 8003c22:	2100      	movs	r1, #0
 8003c24:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7ff fa87 	bl	800313c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c2e:	e016      	b.n	8003c5e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2241      	movs	r2, #65	; 0x41
 8003c34:	2120      	movs	r1, #32
 8003c36:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2212      	movs	r2, #18
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2102      	movs	r1, #2
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f000 fde1 	bl	8004810 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2240      	movs	r2, #64	; 0x40
 8003c52:	2100      	movs	r1, #0
 8003c54:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f7ff fa77 	bl	800314c <HAL_I2C_MasterRxCpltCallback>
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b002      	add	sp, #8
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2242      	movs	r2, #66	; 0x42
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	0b9b      	lsrs	r3, r3, #14
 8003c84:	001a      	movs	r2, r3
 8003c86:	2301      	movs	r3, #1
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d008      	beq.n	8003c9e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4925      	ldr	r1, [pc, #148]	; (8003d2c <I2C_ITSlaveSeqCplt+0xc4>)
 8003c98:	400a      	ands	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e00d      	b.n	8003cba <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	0bdb      	lsrs	r3, r3, #15
 8003ca2:	001a      	movs	r2, r3
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d007      	beq.n	8003cba <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	491e      	ldr	r1, [pc, #120]	; (8003d30 <I2C_ITSlaveSeqCplt+0xc8>)
 8003cb6:	400a      	ands	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2241      	movs	r2, #65	; 0x41
 8003cbe:	5c9b      	ldrb	r3, [r3, r2]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b29      	cmp	r3, #41	; 0x29
 8003cc4:	d114      	bne.n	8003cf0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2241      	movs	r2, #65	; 0x41
 8003cca:	2128      	movs	r1, #40	; 0x28
 8003ccc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2221      	movs	r2, #33	; 0x21
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f000 fd99 	bl	8004810 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2240      	movs	r2, #64	; 0x40
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7ff fa37 	bl	800315c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003cee:	e019      	b.n	8003d24 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2241      	movs	r2, #65	; 0x41
 8003cf4:	5c9b      	ldrb	r3, [r3, r2]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfa:	d113      	bne.n	8003d24 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2241      	movs	r2, #65	; 0x41
 8003d00:	2128      	movs	r1, #40	; 0x28
 8003d02:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2222      	movs	r2, #34	; 0x22
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f000 fd7e 	bl	8004810 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2240      	movs	r2, #64	; 0x40
 8003d18:	2100      	movs	r1, #0
 8003d1a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7ff fa24 	bl	800316c <HAL_I2C_SlaveRxCpltCallback>
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b004      	add	sp, #16
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	ffffbfff 	.word	0xffffbfff
 8003d30:	ffff7fff 	.word	0xffff7fff

08003d34 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2220      	movs	r2, #32
 8003d48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2241      	movs	r2, #65	; 0x41
 8003d4e:	5c9b      	ldrb	r3, [r3, r2]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b21      	cmp	r3, #33	; 0x21
 8003d54:	d108      	bne.n	8003d68 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2101      	movs	r1, #1
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 fd58 	bl	8004810 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2211      	movs	r2, #17
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
 8003d66:	e00d      	b.n	8003d84 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2241      	movs	r2, #65	; 0x41
 8003d6c:	5c9b      	ldrb	r3, [r3, r2]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b22      	cmp	r3, #34	; 0x22
 8003d72:	d107      	bne.n	8003d84 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2102      	movs	r1, #2
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f000 fd49 	bl	8004810 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2212      	movs	r2, #18
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4950      	ldr	r1, [pc, #320]	; (8003ed0 <I2C_ITMasterCplt+0x19c>)
 8003d90:	400a      	ands	r2, r1
 8003d92:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4d      	ldr	r2, [pc, #308]	; (8003ed4 <I2C_ITMasterCplt+0x1a0>)
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	001a      	movs	r2, r3
 8003da6:	2301      	movs	r3, #1
 8003da8:	4013      	ands	r3, r2
 8003daa:	d009      	beq.n	8003dc0 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2210      	movs	r2, #16
 8003db2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db8:	2204      	movs	r2, #4
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2241      	movs	r2, #65	; 0x41
 8003dc4:	5c9b      	ldrb	r3, [r3, r2]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b60      	cmp	r3, #96	; 0x60
 8003dca:	d10b      	bne.n	8003de4 <I2C_ITMasterCplt+0xb0>
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	089b      	lsrs	r3, r3, #2
 8003dd0:	001a      	movs	r2, r3
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d005      	beq.n	8003de4 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003de2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	0018      	movs	r0, r3
 8003de8:	f000 faff 	bl	80043ea <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2241      	movs	r2, #65	; 0x41
 8003df6:	5c9b      	ldrb	r3, [r3, r2]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b60      	cmp	r3, #96	; 0x60
 8003dfc:	d002      	beq.n	8003e04 <I2C_ITMasterCplt+0xd0>
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	0011      	movs	r1, r2
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f000 f9e1 	bl	80041d4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e12:	e058      	b.n	8003ec6 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2241      	movs	r2, #65	; 0x41
 8003e18:	5c9b      	ldrb	r3, [r3, r2]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b21      	cmp	r3, #33	; 0x21
 8003e1e:	d126      	bne.n	8003e6e <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2241      	movs	r2, #65	; 0x41
 8003e24:	2120      	movs	r1, #32
 8003e26:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2242      	movs	r2, #66	; 0x42
 8003e32:	5c9b      	ldrb	r3, [r3, r2]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d10c      	bne.n	8003e54 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2242      	movs	r2, #66	; 0x42
 8003e3e:	2100      	movs	r1, #0
 8003e40:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2240      	movs	r2, #64	; 0x40
 8003e46:	2100      	movs	r1, #0
 8003e48:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7ff f9ad 	bl	80031ac <HAL_I2C_MemTxCpltCallback>
}
 8003e52:	e038      	b.n	8003ec6 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2242      	movs	r2, #66	; 0x42
 8003e58:	2100      	movs	r1, #0
 8003e5a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2240      	movs	r2, #64	; 0x40
 8003e60:	2100      	movs	r1, #0
 8003e62:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	0018      	movs	r0, r3
 8003e68:	f7ff f968 	bl	800313c <HAL_I2C_MasterTxCpltCallback>
}
 8003e6c:	e02b      	b.n	8003ec6 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2241      	movs	r2, #65	; 0x41
 8003e72:	5c9b      	ldrb	r3, [r3, r2]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b22      	cmp	r3, #34	; 0x22
 8003e78:	d125      	bne.n	8003ec6 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2241      	movs	r2, #65	; 0x41
 8003e7e:	2120      	movs	r1, #32
 8003e80:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2242      	movs	r2, #66	; 0x42
 8003e8c:	5c9b      	ldrb	r3, [r3, r2]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d10c      	bne.n	8003eae <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2242      	movs	r2, #66	; 0x42
 8003e98:	2100      	movs	r1, #0
 8003e9a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2240      	movs	r2, #64	; 0x40
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7ff f988 	bl	80031bc <HAL_I2C_MemRxCpltCallback>
}
 8003eac:	e00b      	b.n	8003ec6 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2242      	movs	r2, #66	; 0x42
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2240      	movs	r2, #64	; 0x40
 8003eba:	2100      	movs	r1, #0
 8003ebc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7ff f943 	bl	800314c <HAL_I2C_MasterRxCpltCallback>
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b006      	add	sp, #24
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	fe00e800 	.word	0xfe00e800
 8003ed4:	ffff0000 	.word	0xffff0000

08003ed8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003eee:	200f      	movs	r0, #15
 8003ef0:	183b      	adds	r3, r7, r0
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	2141      	movs	r1, #65	; 0x41
 8003ef6:	5c52      	ldrb	r2, [r2, r1]
 8003ef8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2220      	movs	r2, #32
 8003f00:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f02:	183b      	adds	r3, r7, r0
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b21      	cmp	r3, #33	; 0x21
 8003f08:	d003      	beq.n	8003f12 <I2C_ITSlaveCplt+0x3a>
 8003f0a:	183b      	adds	r3, r7, r0
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b29      	cmp	r3, #41	; 0x29
 8003f10:	d109      	bne.n	8003f26 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f12:	4a7d      	ldr	r2, [pc, #500]	; (8004108 <I2C_ITSlaveCplt+0x230>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	0011      	movs	r1, r2
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f000 fc79 	bl	8004810 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2221      	movs	r2, #33	; 0x21
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
 8003f24:	e011      	b.n	8003f4a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f26:	220f      	movs	r2, #15
 8003f28:	18bb      	adds	r3, r7, r2
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b22      	cmp	r3, #34	; 0x22
 8003f2e:	d003      	beq.n	8003f38 <I2C_ITSlaveCplt+0x60>
 8003f30:	18bb      	adds	r3, r7, r2
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b2a      	cmp	r3, #42	; 0x2a
 8003f36:	d108      	bne.n	8003f4a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f38:	4a74      	ldr	r2, [pc, #464]	; (800410c <I2C_ITSlaveCplt+0x234>)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	0011      	movs	r1, r2
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 fc66 	bl	8004810 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2222      	movs	r2, #34	; 0x22
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2180      	movs	r1, #128	; 0x80
 8003f56:	0209      	lsls	r1, r1, #8
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	496a      	ldr	r1, [pc, #424]	; (8004110 <I2C_ITSlaveCplt+0x238>)
 8003f68:	400a      	ands	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f000 fa3b 	bl	80043ea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	0b9b      	lsrs	r3, r3, #14
 8003f78:	001a      	movs	r2, r3
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d013      	beq.n	8003fa8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4962      	ldr	r1, [pc, #392]	; (8004114 <I2C_ITSlaveCplt+0x23c>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fa6:	e018      	b.n	8003fda <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	0bdb      	lsrs	r3, r3, #15
 8003fac:	001a      	movs	r2, r3
 8003fae:	2301      	movs	r3, #1
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d012      	beq.n	8003fda <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4956      	ldr	r1, [pc, #344]	; (8004118 <I2C_ITSlaveCplt+0x240>)
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d006      	beq.n	8003fda <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	001a      	movs	r2, r3
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d020      	beq.n	8004028 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2204      	movs	r2, #4
 8003fea:	4393      	bics	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00c      	beq.n	8004028 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	2204      	movs	r2, #4
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2242      	movs	r2, #66	; 0x42
 8004042:	2100      	movs	r1, #0
 8004044:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004050:	2b00      	cmp	r3, #0
 8004052:	d013      	beq.n	800407c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	0011      	movs	r1, r2
 800405c:	0018      	movs	r0, r3
 800405e:	f000 f8b9 	bl	80041d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2241      	movs	r2, #65	; 0x41
 8004066:	5c9b      	ldrb	r3, [r3, r2]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b28      	cmp	r3, #40	; 0x28
 800406c:	d147      	bne.n	80040fe <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0011      	movs	r1, r2
 8004074:	0018      	movs	r0, r3
 8004076:	f000 f853 	bl	8004120 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800407a:	e040      	b.n	80040fe <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	4a26      	ldr	r2, [pc, #152]	; (800411c <I2C_ITSlaveCplt+0x244>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d016      	beq.n	80040b4 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0018      	movs	r0, r3
 800408a:	f7ff fded 	bl	8003c68 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a22      	ldr	r2, [pc, #136]	; (800411c <I2C_ITSlaveCplt+0x244>)
 8004092:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2241      	movs	r2, #65	; 0x41
 8004098:	2120      	movs	r1, #32
 800409a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2240      	movs	r2, #64	; 0x40
 80040a6:	2100      	movs	r1, #0
 80040a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7ff f875 	bl	800319c <HAL_I2C_ListenCpltCallback>
}
 80040b2:	e024      	b.n	80040fe <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2241      	movs	r2, #65	; 0x41
 80040b8:	5c9b      	ldrb	r3, [r3, r2]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b22      	cmp	r3, #34	; 0x22
 80040be:	d10f      	bne.n	80040e0 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2241      	movs	r2, #65	; 0x41
 80040c4:	2120      	movs	r1, #32
 80040c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2240      	movs	r2, #64	; 0x40
 80040d2:	2100      	movs	r1, #0
 80040d4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff f847 	bl	800316c <HAL_I2C_SlaveRxCpltCallback>
}
 80040de:	e00e      	b.n	80040fe <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2241      	movs	r2, #65	; 0x41
 80040e4:	2120      	movs	r1, #32
 80040e6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2240      	movs	r2, #64	; 0x40
 80040f2:	2100      	movs	r1, #0
 80040f4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7ff f82f 	bl	800315c <HAL_I2C_SlaveTxCpltCallback>
}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	46bd      	mov	sp, r7
 8004102:	b006      	add	sp, #24
 8004104:	bd80      	pop	{r7, pc}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	00008001 	.word	0x00008001
 800410c:	00008002 	.word	0x00008002
 8004110:	fe00e800 	.word	0xfe00e800
 8004114:	ffffbfff 	.word	0xffffbfff
 8004118:	ffff7fff 	.word	0xffff7fff
 800411c:	ffff0000 	.word	0xffff0000

08004120 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a27      	ldr	r2, [pc, #156]	; (80041cc <I2C_ITListenCplt+0xac>)
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2241      	movs	r2, #65	; 0x41
 800413a:	2120      	movs	r1, #32
 800413c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2242      	movs	r2, #66	; 0x42
 8004142:	2100      	movs	r1, #0
 8004144:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	089b      	lsrs	r3, r3, #2
 8004150:	001a      	movs	r2, r3
 8004152:	2301      	movs	r3, #1
 8004154:	4013      	ands	r3, r2
 8004156:	d022      	beq.n	800419e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	2b00      	cmp	r3, #0
 8004176:	d012      	beq.n	800419e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	2204      	movs	r2, #4
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800419e:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <I2C_ITListenCplt+0xb0>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	0011      	movs	r1, r2
 80041a4:	0018      	movs	r0, r3
 80041a6:	f000 fb33 	bl	8004810 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2210      	movs	r2, #16
 80041b0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2240      	movs	r2, #64	; 0x40
 80041b6:	2100      	movs	r1, #0
 80041b8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	0018      	movs	r0, r3
 80041be:	f7fe ffed 	bl	800319c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b002      	add	sp, #8
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	ffff0000 	.word	0xffff0000
 80041d0:	00008003 	.word	0x00008003

080041d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041de:	200f      	movs	r0, #15
 80041e0:	183b      	adds	r3, r7, r0
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	2141      	movs	r1, #65	; 0x41
 80041e6:	5c52      	ldrb	r2, [r2, r1]
 80041e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2242      	movs	r2, #66	; 0x42
 80041ee:	2100      	movs	r1, #0
 80041f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a62      	ldr	r2, [pc, #392]	; (8004380 <I2C_ITError+0x1ac>)
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800420a:	183b      	adds	r3, r7, r0
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b28      	cmp	r3, #40	; 0x28
 8004210:	d007      	beq.n	8004222 <I2C_ITError+0x4e>
 8004212:	183b      	adds	r3, r7, r0
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b29      	cmp	r3, #41	; 0x29
 8004218:	d003      	beq.n	8004222 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800421a:	183b      	adds	r3, r7, r0
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b2a      	cmp	r3, #42	; 0x2a
 8004220:	d10c      	bne.n	800423c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2103      	movs	r1, #3
 8004226:	0018      	movs	r0, r3
 8004228:	f000 faf2 	bl	8004810 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2241      	movs	r2, #65	; 0x41
 8004230:	2128      	movs	r1, #40	; 0x28
 8004232:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a53      	ldr	r2, [pc, #332]	; (8004384 <I2C_ITError+0x1b0>)
 8004238:	635a      	str	r2, [r3, #52]	; 0x34
 800423a:	e012      	b.n	8004262 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800423c:	4a52      	ldr	r2, [pc, #328]	; (8004388 <I2C_ITError+0x1b4>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0011      	movs	r1, r2
 8004242:	0018      	movs	r0, r3
 8004244:	f000 fae4 	bl	8004810 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2241      	movs	r2, #65	; 0x41
 800424c:	5c9b      	ldrb	r3, [r3, r2]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b60      	cmp	r3, #96	; 0x60
 8004252:	d003      	beq.n	800425c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2241      	movs	r2, #65	; 0x41
 8004258:	2120      	movs	r1, #32
 800425a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	2b00      	cmp	r3, #0
 800426e:	d03b      	beq.n	80042e8 <I2C_ITError+0x114>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b11      	cmp	r3, #17
 8004274:	d002      	beq.n	800427c <I2C_ITError+0xa8>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b21      	cmp	r3, #33	; 0x21
 800427a:	d135      	bne.n	80042e8 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	01db      	lsls	r3, r3, #7
 8004286:	401a      	ands	r2, r3
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	01db      	lsls	r3, r3, #7
 800428c:	429a      	cmp	r2, r3
 800428e:	d107      	bne.n	80042a0 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	493c      	ldr	r1, [pc, #240]	; (800438c <I2C_ITError+0x1b8>)
 800429c:	400a      	ands	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7fe f9a0 	bl	80025ea <HAL_DMA_GetState>
 80042aa:	0003      	movs	r3, r0
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d016      	beq.n	80042de <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	4a36      	ldr	r2, [pc, #216]	; (8004390 <I2C_ITError+0x1bc>)
 80042b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2240      	movs	r2, #64	; 0x40
 80042bc:	2100      	movs	r1, #0
 80042be:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7fe f94b 	bl	8002560 <HAL_DMA_Abort_IT>
 80042ca:	1e03      	subs	r3, r0, #0
 80042cc:	d051      	beq.n	8004372 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	0018      	movs	r0, r3
 80042da:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042dc:	e049      	b.n	8004372 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	0018      	movs	r0, r3
 80042e2:	f000 f859 	bl	8004398 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042e6:	e044      	b.n	8004372 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d03b      	beq.n	8004368 <I2C_ITError+0x194>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b12      	cmp	r3, #18
 80042f4:	d002      	beq.n	80042fc <I2C_ITError+0x128>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b22      	cmp	r3, #34	; 0x22
 80042fa:	d135      	bne.n	8004368 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	401a      	ands	r2, r3
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	429a      	cmp	r2, r3
 800430e:	d107      	bne.n	8004320 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	491e      	ldr	r1, [pc, #120]	; (8004394 <I2C_ITError+0x1c0>)
 800431c:	400a      	ands	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	0018      	movs	r0, r3
 8004326:	f7fe f960 	bl	80025ea <HAL_DMA_GetState>
 800432a:	0003      	movs	r3, r0
 800432c:	2b01      	cmp	r3, #1
 800432e:	d016      	beq.n	800435e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	4a16      	ldr	r2, [pc, #88]	; (8004390 <I2C_ITError+0x1bc>)
 8004336:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2240      	movs	r2, #64	; 0x40
 800433c:	2100      	movs	r1, #0
 800433e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	0018      	movs	r0, r3
 8004346:	f7fe f90b 	bl	8002560 <HAL_DMA_Abort_IT>
 800434a:	1e03      	subs	r3, r0, #0
 800434c:	d013      	beq.n	8004376 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004358:	0018      	movs	r0, r3
 800435a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800435c:	e00b      	b.n	8004376 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0018      	movs	r0, r3
 8004362:	f000 f819 	bl	8004398 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004366:	e006      	b.n	8004376 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	0018      	movs	r0, r3
 800436c:	f000 f814 	bl	8004398 <I2C_TreatErrorCallback>
  }
}
 8004370:	e002      	b.n	8004378 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	e000      	b.n	8004378 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004376:	46c0      	nop			; (mov r8, r8)
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b004      	add	sp, #16
 800437e:	bd80      	pop	{r7, pc}
 8004380:	ffff0000 	.word	0xffff0000
 8004384:	08003471 	.word	0x08003471
 8004388:	00008003 	.word	0x00008003
 800438c:	ffffbfff 	.word	0xffffbfff
 8004390:	0800442f 	.word	0x0800442f
 8004394:	ffff7fff 	.word	0xffff7fff

08004398 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2241      	movs	r2, #65	; 0x41
 80043a4:	5c9b      	ldrb	r3, [r3, r2]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b60      	cmp	r3, #96	; 0x60
 80043aa:	d10f      	bne.n	80043cc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2241      	movs	r2, #65	; 0x41
 80043b0:	2120      	movs	r1, #32
 80043b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2240      	movs	r2, #64	; 0x40
 80043be:	2100      	movs	r1, #0
 80043c0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7fe ff09 	bl	80031dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043ca:	e00a      	b.n	80043e2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2240      	movs	r2, #64	; 0x40
 80043d6:	2100      	movs	r1, #0
 80043d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	0018      	movs	r0, r3
 80043de:	f7fe fef5 	bl	80031cc <HAL_I2C_ErrorCallback>
}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b002      	add	sp, #8
 80043e8:	bd80      	pop	{r7, pc}

080043ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	2202      	movs	r2, #2
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d103      	bne.n	8004408 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2200      	movs	r2, #0
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2201      	movs	r2, #1
 8004410:	4013      	ands	r3, r2
 8004412:	2b01      	cmp	r3, #1
 8004414:	d007      	beq.n	8004426 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2101      	movs	r1, #1
 8004422:	430a      	orrs	r2, r1
 8004424:	619a      	str	r2, [r3, #24]
  }
}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	46bd      	mov	sp, r7
 800442a:	b002      	add	sp, #8
 800442c:	bd80      	pop	{r7, pc}

0800442e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	2200      	movs	r2, #0
 800444a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004458:	2200      	movs	r2, #0
 800445a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	0018      	movs	r0, r3
 8004460:	f7ff ff9a 	bl	8004398 <I2C_TreatErrorCallback>
}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	b004      	add	sp, #16
 800446a:	bd80      	pop	{r7, pc}

0800446c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	1dfb      	adds	r3, r7, #7
 800447a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800447c:	e021      	b.n	80044c2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	3301      	adds	r3, #1
 8004482:	d01e      	beq.n	80044c2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004484:	f7fd ff60 	bl	8002348 <HAL_GetTick>
 8004488:	0002      	movs	r2, r0
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d302      	bcc.n	800449a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d113      	bne.n	80044c2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	2220      	movs	r2, #32
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2241      	movs	r2, #65	; 0x41
 80044aa:	2120      	movs	r1, #32
 80044ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2242      	movs	r2, #66	; 0x42
 80044b2:	2100      	movs	r1, #0
 80044b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2240      	movs	r2, #64	; 0x40
 80044ba:	2100      	movs	r1, #0
 80044bc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e00f      	b.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	4013      	ands	r3, r2
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	425a      	negs	r2, r3
 80044d2:	4153      	adcs	r3, r2
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	001a      	movs	r2, r3
 80044d8:	1dfb      	adds	r3, r7, #7
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d0ce      	beq.n	800447e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	0018      	movs	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b004      	add	sp, #16
 80044e8:	bd80      	pop	{r7, pc}

080044ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044f6:	e02b      	b.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	0018      	movs	r0, r3
 8004500:	f000 f86e 	bl	80045e0 <I2C_IsAcknowledgeFailed>
 8004504:	1e03      	subs	r3, r0, #0
 8004506:	d001      	beq.n	800450c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e029      	b.n	8004560 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	3301      	adds	r3, #1
 8004510:	d01e      	beq.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fd ff19 	bl	8002348 <HAL_GetTick>
 8004516:	0002      	movs	r2, r0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d113      	bne.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452c:	2220      	movs	r2, #32
 800452e:	431a      	orrs	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2241      	movs	r2, #65	; 0x41
 8004538:	2120      	movs	r1, #32
 800453a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2242      	movs	r2, #66	; 0x42
 8004540:	2100      	movs	r1, #0
 8004542:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2240      	movs	r2, #64	; 0x40
 8004548:	2100      	movs	r1, #0
 800454a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e007      	b.n	8004560 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2202      	movs	r2, #2
 8004558:	4013      	ands	r3, r2
 800455a:	2b02      	cmp	r3, #2
 800455c:	d1cc      	bne.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b004      	add	sp, #16
 8004566:	bd80      	pop	{r7, pc}

08004568 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004574:	e028      	b.n	80045c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	0018      	movs	r0, r3
 800457e:	f000 f82f 	bl	80045e0 <I2C_IsAcknowledgeFailed>
 8004582:	1e03      	subs	r3, r0, #0
 8004584:	d001      	beq.n	800458a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e026      	b.n	80045d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7fd fedd 	bl	8002348 <HAL_GetTick>
 800458e:	0002      	movs	r2, r0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d113      	bne.n	80045c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a4:	2220      	movs	r2, #32
 80045a6:	431a      	orrs	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2241      	movs	r2, #65	; 0x41
 80045b0:	2120      	movs	r1, #32
 80045b2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2242      	movs	r2, #66	; 0x42
 80045b8:	2100      	movs	r1, #0
 80045ba:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2240      	movs	r2, #64	; 0x40
 80045c0:	2100      	movs	r1, #0
 80045c2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e007      	b.n	80045d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2220      	movs	r2, #32
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d1cf      	bne.n	8004576 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	b004      	add	sp, #16
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2210      	movs	r2, #16
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d164      	bne.n	80046c4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	049b      	lsls	r3, r3, #18
 8004604:	401a      	ands	r2, r3
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	049b      	lsls	r3, r3, #18
 800460a:	429a      	cmp	r2, r3
 800460c:	d02b      	beq.n	8004666 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2180      	movs	r1, #128	; 0x80
 800461a:	01c9      	lsls	r1, r1, #7
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004620:	e021      	b.n	8004666 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	3301      	adds	r3, #1
 8004626:	d01e      	beq.n	8004666 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004628:	f7fd fe8e 	bl	8002348 <HAL_GetTick>
 800462c:	0002      	movs	r2, r0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d302      	bcc.n	800463e <I2C_IsAcknowledgeFailed+0x5e>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d113      	bne.n	8004666 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	2220      	movs	r2, #32
 8004644:	431a      	orrs	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2241      	movs	r2, #65	; 0x41
 800464e:	2120      	movs	r1, #32
 8004650:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2242      	movs	r2, #66	; 0x42
 8004656:	2100      	movs	r1, #0
 8004658:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2240      	movs	r2, #64	; 0x40
 800465e:	2100      	movs	r1, #0
 8004660:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e02f      	b.n	80046c6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2220      	movs	r2, #32
 800466e:	4013      	ands	r3, r2
 8004670:	2b20      	cmp	r3, #32
 8004672:	d1d6      	bne.n	8004622 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2210      	movs	r2, #16
 800467a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2220      	movs	r2, #32
 8004682:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	0018      	movs	r0, r3
 8004688:	f7ff feaf 	bl	80043ea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	490e      	ldr	r1, [pc, #56]	; (80046d0 <I2C_IsAcknowledgeFailed+0xf0>)
 8004698:	400a      	ands	r2, r1
 800469a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a0:	2204      	movs	r2, #4
 80046a2:	431a      	orrs	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2241      	movs	r2, #65	; 0x41
 80046ac:	2120      	movs	r1, #32
 80046ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2242      	movs	r2, #66	; 0x42
 80046b4:	2100      	movs	r1, #0
 80046b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2240      	movs	r2, #64	; 0x40
 80046bc:	2100      	movs	r1, #0
 80046be:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b004      	add	sp, #16
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	fe00e800 	.word	0xfe00e800

080046d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	0008      	movs	r0, r1
 80046de:	0011      	movs	r1, r2
 80046e0:	607b      	str	r3, [r7, #4]
 80046e2:	240a      	movs	r4, #10
 80046e4:	193b      	adds	r3, r7, r4
 80046e6:	1c02      	adds	r2, r0, #0
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	2009      	movs	r0, #9
 80046ec:	183b      	adds	r3, r7, r0
 80046ee:	1c0a      	adds	r2, r1, #0
 80046f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	0d51      	lsrs	r1, r2, #21
 80046fc:	2280      	movs	r2, #128	; 0x80
 80046fe:	00d2      	lsls	r2, r2, #3
 8004700:	400a      	ands	r2, r1
 8004702:	490e      	ldr	r1, [pc, #56]	; (800473c <I2C_TransferConfig+0x68>)
 8004704:	430a      	orrs	r2, r1
 8004706:	43d2      	mvns	r2, r2
 8004708:	401a      	ands	r2, r3
 800470a:	0011      	movs	r1, r2
 800470c:	193b      	adds	r3, r7, r4
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	059b      	lsls	r3, r3, #22
 8004712:	0d9a      	lsrs	r2, r3, #22
 8004714:	183b      	adds	r3, r7, r0
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	0418      	lsls	r0, r3, #16
 800471a:	23ff      	movs	r3, #255	; 0xff
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	4003      	ands	r3, r0
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	431a      	orrs	r2, r3
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	431a      	orrs	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	46bd      	mov	sp, r7
 8004736:	b005      	add	sp, #20
 8004738:	bd90      	pop	{r4, r7, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	03ff63ff 	.word	0x03ff63ff

08004740 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	000a      	movs	r2, r1
 800474a:	1cbb      	adds	r3, r7, #2
 800474c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004756:	4b2c      	ldr	r3, [pc, #176]	; (8004808 <I2C_Enable_IRQ+0xc8>)
 8004758:	429a      	cmp	r2, r3
 800475a:	d004      	beq.n	8004766 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004760:	4b2a      	ldr	r3, [pc, #168]	; (800480c <I2C_Enable_IRQ+0xcc>)
 8004762:	429a      	cmp	r2, r3
 8004764:	d121      	bne.n	80047aa <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004766:	1cbb      	adds	r3, r7, #2
 8004768:	2200      	movs	r2, #0
 800476a:	5e9b      	ldrsh	r3, [r3, r2]
 800476c:	2b00      	cmp	r3, #0
 800476e:	da03      	bge.n	8004778 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	22b8      	movs	r2, #184	; 0xb8
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004778:	1cbb      	adds	r3, r7, #2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	2b10      	cmp	r3, #16
 800477e:	d103      	bne.n	8004788 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2290      	movs	r2, #144	; 0x90
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004788:	1cbb      	adds	r3, r7, #2
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	2b20      	cmp	r3, #32
 800478e:	d103      	bne.n	8004798 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2260      	movs	r2, #96	; 0x60
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004798:	1cbb      	adds	r3, r7, #2
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d127      	bne.n	80047f0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2240      	movs	r2, #64	; 0x40
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80047a8:	e022      	b.n	80047f0 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047aa:	1cbb      	adds	r3, r7, #2
 80047ac:	2200      	movs	r2, #0
 80047ae:	5e9b      	ldrsh	r3, [r3, r2]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	da03      	bge.n	80047bc <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	22b8      	movs	r2, #184	; 0xb8
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80047bc:	1cbb      	adds	r3, r7, #2
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	2201      	movs	r2, #1
 80047c2:	4013      	ands	r3, r2
 80047c4:	d003      	beq.n	80047ce <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	22f2      	movs	r2, #242	; 0xf2
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80047ce:	1cbb      	adds	r3, r7, #2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	2202      	movs	r2, #2
 80047d4:	4013      	ands	r3, r2
 80047d6:	d003      	beq.n	80047e0 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	22f4      	movs	r2, #244	; 0xf4
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047e0:	1cbb      	adds	r3, r7, #2
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d103      	bne.n	80047f0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]
}
 8004800:	46c0      	nop			; (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	b004      	add	sp, #16
 8004806:	bd80      	pop	{r7, pc}
 8004808:	08003699 	.word	0x08003699
 800480c:	080038b1 	.word	0x080038b1

08004810 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	000a      	movs	r2, r1
 800481a:	1cbb      	adds	r3, r7, #2
 800481c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004822:	1cbb      	adds	r3, r7, #2
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	2201      	movs	r2, #1
 8004828:	4013      	ands	r3, r2
 800482a:	d010      	beq.n	800484e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2242      	movs	r2, #66	; 0x42
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2241      	movs	r2, #65	; 0x41
 8004838:	5c9b      	ldrb	r3, [r3, r2]
 800483a:	b2db      	uxtb	r3, r3
 800483c:	001a      	movs	r2, r3
 800483e:	2328      	movs	r3, #40	; 0x28
 8004840:	4013      	ands	r3, r2
 8004842:	2b28      	cmp	r3, #40	; 0x28
 8004844:	d003      	beq.n	800484e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	22b0      	movs	r2, #176	; 0xb0
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800484e:	1cbb      	adds	r3, r7, #2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	2202      	movs	r2, #2
 8004854:	4013      	ands	r3, r2
 8004856:	d010      	beq.n	800487a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2244      	movs	r2, #68	; 0x44
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2241      	movs	r2, #65	; 0x41
 8004864:	5c9b      	ldrb	r3, [r3, r2]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	001a      	movs	r2, r3
 800486a:	2328      	movs	r3, #40	; 0x28
 800486c:	4013      	ands	r3, r2
 800486e:	2b28      	cmp	r3, #40	; 0x28
 8004870:	d003      	beq.n	800487a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	22b0      	movs	r2, #176	; 0xb0
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800487a:	1cbb      	adds	r3, r7, #2
 800487c:	2200      	movs	r2, #0
 800487e:	5e9b      	ldrsh	r3, [r3, r2]
 8004880:	2b00      	cmp	r3, #0
 8004882:	da03      	bge.n	800488c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	22b8      	movs	r2, #184	; 0xb8
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800488c:	1cbb      	adds	r3, r7, #2
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	2b10      	cmp	r3, #16
 8004892:	d103      	bne.n	800489c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2290      	movs	r2, #144	; 0x90
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800489c:	1cbb      	adds	r3, r7, #2
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d103      	bne.n	80048ac <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80048ac:	1cbb      	adds	r3, r7, #2
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	d103      	bne.n	80048bc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2240      	movs	r2, #64	; 0x40
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	43d9      	mvns	r1, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	400a      	ands	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b004      	add	sp, #16
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2241      	movs	r2, #65	; 0x41
 80048e6:	5c9b      	ldrb	r3, [r3, r2]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d138      	bne.n	8004960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2240      	movs	r2, #64	; 0x40
 80048f2:	5c9b      	ldrb	r3, [r3, r2]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e032      	b.n	8004962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2240      	movs	r2, #64	; 0x40
 8004900:	2101      	movs	r1, #1
 8004902:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2241      	movs	r2, #65	; 0x41
 8004908:	2124      	movs	r1, #36	; 0x24
 800490a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2101      	movs	r1, #1
 8004918:	438a      	bics	r2, r1
 800491a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4911      	ldr	r1, [pc, #68]	; (800496c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004928:	400a      	ands	r2, r1
 800492a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6819      	ldr	r1, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2101      	movs	r1, #1
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2241      	movs	r2, #65	; 0x41
 8004950:	2120      	movs	r1, #32
 8004952:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2240      	movs	r2, #64	; 0x40
 8004958:	2100      	movs	r1, #0
 800495a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	0018      	movs	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	b002      	add	sp, #8
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	ffffefff 	.word	0xffffefff

08004970 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2241      	movs	r2, #65	; 0x41
 800497e:	5c9b      	ldrb	r3, [r3, r2]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b20      	cmp	r3, #32
 8004984:	d139      	bne.n	80049fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2240      	movs	r2, #64	; 0x40
 800498a:	5c9b      	ldrb	r3, [r3, r2]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004990:	2302      	movs	r3, #2
 8004992:	e033      	b.n	80049fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2240      	movs	r2, #64	; 0x40
 8004998:	2101      	movs	r1, #1
 800499a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2241      	movs	r2, #65	; 0x41
 80049a0:	2124      	movs	r1, #36	; 0x24
 80049a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2101      	movs	r1, #1
 80049b0:	438a      	bics	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a11      	ldr	r2, [pc, #68]	; (8004a04 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2101      	movs	r1, #1
 80049e2:	430a      	orrs	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2241      	movs	r2, #65	; 0x41
 80049ea:	2120      	movs	r1, #32
 80049ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2240      	movs	r2, #64	; 0x40
 80049f2:	2100      	movs	r1, #0
 80049f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e000      	b.n	80049fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049fa:	2302      	movs	r3, #2
  }
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b004      	add	sp, #16
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	fffff0ff 	.word	0xfffff0ff

08004a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e301      	b.n	800501e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4013      	ands	r3, r2
 8004a22:	d100      	bne.n	8004a26 <HAL_RCC_OscConfig+0x1e>
 8004a24:	e08d      	b.n	8004b42 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a26:	4bc3      	ldr	r3, [pc, #780]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	220c      	movs	r2, #12
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d00e      	beq.n	8004a50 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a32:	4bc0      	ldr	r3, [pc, #768]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	220c      	movs	r2, #12
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d116      	bne.n	8004a6c <HAL_RCC_OscConfig+0x64>
 8004a3e:	4bbd      	ldr	r3, [pc, #756]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	2380      	movs	r3, #128	; 0x80
 8004a44:	025b      	lsls	r3, r3, #9
 8004a46:	401a      	ands	r2, r3
 8004a48:	2380      	movs	r3, #128	; 0x80
 8004a4a:	025b      	lsls	r3, r3, #9
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d10d      	bne.n	8004a6c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a50:	4bb8      	ldr	r3, [pc, #736]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	2380      	movs	r3, #128	; 0x80
 8004a56:	029b      	lsls	r3, r3, #10
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d100      	bne.n	8004a5e <HAL_RCC_OscConfig+0x56>
 8004a5c:	e070      	b.n	8004b40 <HAL_RCC_OscConfig+0x138>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d000      	beq.n	8004a68 <HAL_RCC_OscConfig+0x60>
 8004a66:	e06b      	b.n	8004b40 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e2d8      	b.n	800501e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d107      	bne.n	8004a84 <HAL_RCC_OscConfig+0x7c>
 8004a74:	4baf      	ldr	r3, [pc, #700]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4bae      	ldr	r3, [pc, #696]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a7a:	2180      	movs	r1, #128	; 0x80
 8004a7c:	0249      	lsls	r1, r1, #9
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e02f      	b.n	8004ae4 <HAL_RCC_OscConfig+0xdc>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10c      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x9e>
 8004a8c:	4ba9      	ldr	r3, [pc, #676]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4ba8      	ldr	r3, [pc, #672]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a92:	49a9      	ldr	r1, [pc, #676]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004a94:	400a      	ands	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	4ba6      	ldr	r3, [pc, #664]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4ba5      	ldr	r3, [pc, #660]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a9e:	49a7      	ldr	r1, [pc, #668]	; (8004d3c <HAL_RCC_OscConfig+0x334>)
 8004aa0:	400a      	ands	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e01e      	b.n	8004ae4 <HAL_RCC_OscConfig+0xdc>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	d10e      	bne.n	8004acc <HAL_RCC_OscConfig+0xc4>
 8004aae:	4ba1      	ldr	r3, [pc, #644]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4ba0      	ldr	r3, [pc, #640]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ab4:	2180      	movs	r1, #128	; 0x80
 8004ab6:	02c9      	lsls	r1, r1, #11
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	4b9d      	ldr	r3, [pc, #628]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4b9c      	ldr	r3, [pc, #624]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	2180      	movs	r1, #128	; 0x80
 8004ac4:	0249      	lsls	r1, r1, #9
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	e00b      	b.n	8004ae4 <HAL_RCC_OscConfig+0xdc>
 8004acc:	4b99      	ldr	r3, [pc, #612]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b98      	ldr	r3, [pc, #608]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ad2:	4999      	ldr	r1, [pc, #612]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004ad4:	400a      	ands	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	4b96      	ldr	r3, [pc, #600]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b95      	ldr	r3, [pc, #596]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ade:	4997      	ldr	r1, [pc, #604]	; (8004d3c <HAL_RCC_OscConfig+0x334>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d014      	beq.n	8004b16 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aec:	f7fd fc2c 	bl	8002348 <HAL_GetTick>
 8004af0:	0003      	movs	r3, r0
 8004af2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af6:	f7fd fc27 	bl	8002348 <HAL_GetTick>
 8004afa:	0002      	movs	r2, r0
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b64      	cmp	r3, #100	; 0x64
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e28a      	b.n	800501e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b08:	4b8a      	ldr	r3, [pc, #552]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	2380      	movs	r3, #128	; 0x80
 8004b0e:	029b      	lsls	r3, r3, #10
 8004b10:	4013      	ands	r3, r2
 8004b12:	d0f0      	beq.n	8004af6 <HAL_RCC_OscConfig+0xee>
 8004b14:	e015      	b.n	8004b42 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7fd fc17 	bl	8002348 <HAL_GetTick>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fd fc12 	bl	8002348 <HAL_GetTick>
 8004b24:	0002      	movs	r2, r0
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e275      	b.n	800501e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b32:	4b80      	ldr	r3, [pc, #512]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	029b      	lsls	r3, r3, #10
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x118>
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b40:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2202      	movs	r2, #2
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d100      	bne.n	8004b4e <HAL_RCC_OscConfig+0x146>
 8004b4c:	e069      	b.n	8004c22 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b4e:	4b79      	ldr	r3, [pc, #484]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	220c      	movs	r2, #12
 8004b54:	4013      	ands	r3, r2
 8004b56:	d00b      	beq.n	8004b70 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b58:	4b76      	ldr	r3, [pc, #472]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	220c      	movs	r2, #12
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d11c      	bne.n	8004b9e <HAL_RCC_OscConfig+0x196>
 8004b64:	4b73      	ldr	r3, [pc, #460]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	025b      	lsls	r3, r3, #9
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d116      	bne.n	8004b9e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b70:	4b70      	ldr	r3, [pc, #448]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2202      	movs	r2, #2
 8004b76:	4013      	ands	r3, r2
 8004b78:	d005      	beq.n	8004b86 <HAL_RCC_OscConfig+0x17e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d001      	beq.n	8004b86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e24b      	b.n	800501e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b86:	4b6b      	ldr	r3, [pc, #428]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	22f8      	movs	r2, #248	; 0xf8
 8004b8c:	4393      	bics	r3, r2
 8004b8e:	0019      	movs	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	00da      	lsls	r2, r3, #3
 8004b96:	4b67      	ldr	r3, [pc, #412]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9c:	e041      	b.n	8004c22 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d024      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba6:	4b63      	ldr	r3, [pc, #396]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b62      	ldr	r3, [pc, #392]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004bac:	2101      	movs	r1, #1
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7fd fbc9 	bl	8002348 <HAL_GetTick>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bbc:	f7fd fbc4 	bl	8002348 <HAL_GetTick>
 8004bc0:	0002      	movs	r2, r0
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e227      	b.n	800501e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bce:	4b59      	ldr	r3, [pc, #356]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d0f1      	beq.n	8004bbc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd8:	4b56      	ldr	r3, [pc, #344]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	22f8      	movs	r2, #248	; 0xf8
 8004bde:	4393      	bics	r3, r2
 8004be0:	0019      	movs	r1, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	00da      	lsls	r2, r3, #3
 8004be8:	4b52      	ldr	r3, [pc, #328]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004bea:	430a      	orrs	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e018      	b.n	8004c22 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf0:	4b50      	ldr	r3, [pc, #320]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b4f      	ldr	r3, [pc, #316]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	438a      	bics	r2, r1
 8004bfa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fd fba4 	bl	8002348 <HAL_GetTick>
 8004c00:	0003      	movs	r3, r0
 8004c02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c06:	f7fd fb9f 	bl	8002348 <HAL_GetTick>
 8004c0a:	0002      	movs	r2, r0
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e202      	b.n	800501e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c18:	4b46      	ldr	r3, [pc, #280]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d1f1      	bne.n	8004c06 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2208      	movs	r2, #8
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d036      	beq.n	8004c9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d019      	beq.n	8004c68 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c34:	4b3f      	ldr	r3, [pc, #252]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c38:	4b3e      	ldr	r3, [pc, #248]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c40:	f7fd fb82 	bl	8002348 <HAL_GetTick>
 8004c44:	0003      	movs	r3, r0
 8004c46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c4a:	f7fd fb7d 	bl	8002348 <HAL_GetTick>
 8004c4e:	0002      	movs	r2, r0
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e1e0      	b.n	800501e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5c:	4b35      	ldr	r3, [pc, #212]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	2202      	movs	r2, #2
 8004c62:	4013      	ands	r3, r2
 8004c64:	d0f1      	beq.n	8004c4a <HAL_RCC_OscConfig+0x242>
 8004c66:	e018      	b.n	8004c9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c68:	4b32      	ldr	r3, [pc, #200]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c6c:	4b31      	ldr	r3, [pc, #196]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c6e:	2101      	movs	r1, #1
 8004c70:	438a      	bics	r2, r1
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c74:	f7fd fb68 	bl	8002348 <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fd fb63 	bl	8002348 <HAL_GetTick>
 8004c82:	0002      	movs	r2, r0
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1c6      	b.n	800501e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c90:	4b28      	ldr	r3, [pc, #160]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2202      	movs	r2, #2
 8004c96:	4013      	ands	r3, r2
 8004c98:	d1f1      	bne.n	8004c7e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d100      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x29e>
 8004ca4:	e0b4      	b.n	8004e10 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca6:	201f      	movs	r0, #31
 8004ca8:	183b      	adds	r3, r7, r0
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cae:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004cb0:	69da      	ldr	r2, [r3, #28]
 8004cb2:	2380      	movs	r3, #128	; 0x80
 8004cb4:	055b      	lsls	r3, r3, #21
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d110      	bne.n	8004cdc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	4b1e      	ldr	r3, [pc, #120]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004cbc:	69da      	ldr	r2, [r3, #28]
 8004cbe:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004cc0:	2180      	movs	r1, #128	; 0x80
 8004cc2:	0549      	lsls	r1, r1, #21
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	61da      	str	r2, [r3, #28]
 8004cc8:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	2380      	movs	r3, #128	; 0x80
 8004cce:	055b      	lsls	r3, r3, #21
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cd6:	183b      	adds	r3, r7, r0
 8004cd8:	2201      	movs	r2, #1
 8004cda:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cdc:	4b18      	ldr	r3, [pc, #96]	; (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	2380      	movs	r3, #128	; 0x80
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d11a      	bne.n	8004d1e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce8:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004cee:	2180      	movs	r1, #128	; 0x80
 8004cf0:	0049      	lsls	r1, r1, #1
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf6:	f7fd fb27 	bl	8002348 <HAL_GetTick>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d00:	f7fd fb22 	bl	8002348 <HAL_GetTick>
 8004d04:	0002      	movs	r2, r0
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b64      	cmp	r3, #100	; 0x64
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e185      	b.n	800501e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	2380      	movs	r3, #128	; 0x80
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10e      	bne.n	8004d44 <HAL_RCC_OscConfig+0x33c>
 8004d26:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	4b02      	ldr	r3, [pc, #8]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	621a      	str	r2, [r3, #32]
 8004d32:	e035      	b.n	8004da0 <HAL_RCC_OscConfig+0x398>
 8004d34:	40021000 	.word	0x40021000
 8004d38:	fffeffff 	.word	0xfffeffff
 8004d3c:	fffbffff 	.word	0xfffbffff
 8004d40:	40007000 	.word	0x40007000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10c      	bne.n	8004d66 <HAL_RCC_OscConfig+0x35e>
 8004d4c:	4bb6      	ldr	r3, [pc, #728]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	4bb5      	ldr	r3, [pc, #724]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004d52:	2101      	movs	r1, #1
 8004d54:	438a      	bics	r2, r1
 8004d56:	621a      	str	r2, [r3, #32]
 8004d58:	4bb3      	ldr	r3, [pc, #716]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004d5a:	6a1a      	ldr	r2, [r3, #32]
 8004d5c:	4bb2      	ldr	r3, [pc, #712]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004d5e:	2104      	movs	r1, #4
 8004d60:	438a      	bics	r2, r1
 8004d62:	621a      	str	r2, [r3, #32]
 8004d64:	e01c      	b.n	8004da0 <HAL_RCC_OscConfig+0x398>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b05      	cmp	r3, #5
 8004d6c:	d10c      	bne.n	8004d88 <HAL_RCC_OscConfig+0x380>
 8004d6e:	4bae      	ldr	r3, [pc, #696]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004d70:	6a1a      	ldr	r2, [r3, #32]
 8004d72:	4bad      	ldr	r3, [pc, #692]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004d74:	2104      	movs	r1, #4
 8004d76:	430a      	orrs	r2, r1
 8004d78:	621a      	str	r2, [r3, #32]
 8004d7a:	4bab      	ldr	r3, [pc, #684]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004d7c:	6a1a      	ldr	r2, [r3, #32]
 8004d7e:	4baa      	ldr	r3, [pc, #680]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004d80:	2101      	movs	r1, #1
 8004d82:	430a      	orrs	r2, r1
 8004d84:	621a      	str	r2, [r3, #32]
 8004d86:	e00b      	b.n	8004da0 <HAL_RCC_OscConfig+0x398>
 8004d88:	4ba7      	ldr	r3, [pc, #668]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	4ba6      	ldr	r3, [pc, #664]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004d8e:	2101      	movs	r1, #1
 8004d90:	438a      	bics	r2, r1
 8004d92:	621a      	str	r2, [r3, #32]
 8004d94:	4ba4      	ldr	r3, [pc, #656]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	4ba3      	ldr	r3, [pc, #652]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004d9a:	2104      	movs	r1, #4
 8004d9c:	438a      	bics	r2, r1
 8004d9e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d014      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da8:	f7fd face 	bl	8002348 <HAL_GetTick>
 8004dac:	0003      	movs	r3, r0
 8004dae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db0:	e009      	b.n	8004dc6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db2:	f7fd fac9 	bl	8002348 <HAL_GetTick>
 8004db6:	0002      	movs	r2, r0
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	4a9b      	ldr	r2, [pc, #620]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e12b      	b.n	800501e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc6:	4b98      	ldr	r3, [pc, #608]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0x3aa>
 8004dd0:	e013      	b.n	8004dfa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7fd fab9 	bl	8002348 <HAL_GetTick>
 8004dd6:	0003      	movs	r3, r0
 8004dd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dda:	e009      	b.n	8004df0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ddc:	f7fd fab4 	bl	8002348 <HAL_GetTick>
 8004de0:	0002      	movs	r2, r0
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	4a91      	ldr	r2, [pc, #580]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e116      	b.n	800501e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df0:	4b8d      	ldr	r3, [pc, #564]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	2202      	movs	r2, #2
 8004df6:	4013      	ands	r3, r2
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dfa:	231f      	movs	r3, #31
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d105      	bne.n	8004e10 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e04:	4b88      	ldr	r3, [pc, #544]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	4b87      	ldr	r3, [pc, #540]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e0a:	4989      	ldr	r1, [pc, #548]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2210      	movs	r2, #16
 8004e16:	4013      	ands	r3, r2
 8004e18:	d063      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d12a      	bne.n	8004e78 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e22:	4b81      	ldr	r3, [pc, #516]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e26:	4b80      	ldr	r3, [pc, #512]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e28:	2104      	movs	r1, #4
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004e2e:	4b7e      	ldr	r3, [pc, #504]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e32:	4b7d      	ldr	r3, [pc, #500]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e34:	2101      	movs	r1, #1
 8004e36:	430a      	orrs	r2, r1
 8004e38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3a:	f7fd fa85 	bl	8002348 <HAL_GetTick>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004e44:	f7fd fa80 	bl	8002348 <HAL_GetTick>
 8004e48:	0002      	movs	r2, r0
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e0e3      	b.n	800501e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e56:	4b74      	ldr	r3, [pc, #464]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d0f1      	beq.n	8004e44 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e60:	4b71      	ldr	r3, [pc, #452]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e64:	22f8      	movs	r2, #248	; 0xf8
 8004e66:	4393      	bics	r3, r2
 8004e68:	0019      	movs	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	00da      	lsls	r2, r3, #3
 8004e70:	4b6d      	ldr	r3, [pc, #436]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e72:	430a      	orrs	r2, r1
 8004e74:	635a      	str	r2, [r3, #52]	; 0x34
 8004e76:	e034      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	3305      	adds	r3, #5
 8004e7e:	d111      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004e80:	4b69      	ldr	r3, [pc, #420]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e84:	4b68      	ldr	r3, [pc, #416]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e86:	2104      	movs	r1, #4
 8004e88:	438a      	bics	r2, r1
 8004e8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e8c:	4b66      	ldr	r3, [pc, #408]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e90:	22f8      	movs	r2, #248	; 0xf8
 8004e92:	4393      	bics	r3, r2
 8004e94:	0019      	movs	r1, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	00da      	lsls	r2, r3, #3
 8004e9c:	4b62      	ldr	r3, [pc, #392]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ea2:	e01e      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ea4:	4b60      	ldr	r3, [pc, #384]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ea8:	4b5f      	ldr	r3, [pc, #380]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004eaa:	2104      	movs	r1, #4
 8004eac:	430a      	orrs	r2, r1
 8004eae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004eb0:	4b5d      	ldr	r3, [pc, #372]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb4:	4b5c      	ldr	r3, [pc, #368]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	438a      	bics	r2, r1
 8004eba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebc:	f7fd fa44 	bl	8002348 <HAL_GetTick>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ec6:	f7fd fa3f 	bl	8002348 <HAL_GetTick>
 8004eca:	0002      	movs	r2, r0
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0a2      	b.n	800501e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ed8:	4b53      	ldr	r3, [pc, #332]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004edc:	2202      	movs	r2, #2
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d1f1      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d100      	bne.n	8004eec <HAL_RCC_OscConfig+0x4e4>
 8004eea:	e097      	b.n	800501c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004eec:	4b4e      	ldr	r3, [pc, #312]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	220c      	movs	r2, #12
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d100      	bne.n	8004efa <HAL_RCC_OscConfig+0x4f2>
 8004ef8:	e06b      	b.n	8004fd2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d14c      	bne.n	8004f9c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f02:	4b49      	ldr	r3, [pc, #292]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b48      	ldr	r3, [pc, #288]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004f08:	494a      	ldr	r1, [pc, #296]	; (8005034 <HAL_RCC_OscConfig+0x62c>)
 8004f0a:	400a      	ands	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fd fa1b 	bl	8002348 <HAL_GetTick>
 8004f12:	0003      	movs	r3, r0
 8004f14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fd fa16 	bl	8002348 <HAL_GetTick>
 8004f1c:	0002      	movs	r2, r0
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e079      	b.n	800501e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f2a:	4b3f      	ldr	r3, [pc, #252]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	2380      	movs	r3, #128	; 0x80
 8004f30:	049b      	lsls	r3, r3, #18
 8004f32:	4013      	ands	r3, r2
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f36:	4b3c      	ldr	r3, [pc, #240]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	220f      	movs	r2, #15
 8004f3c:	4393      	bics	r3, r2
 8004f3e:	0019      	movs	r1, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	4b38      	ldr	r3, [pc, #224]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004f46:	430a      	orrs	r2, r1
 8004f48:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f4a:	4b37      	ldr	r3, [pc, #220]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4a3a      	ldr	r2, [pc, #232]	; (8005038 <HAL_RCC_OscConfig+0x630>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	0019      	movs	r1, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	4b32      	ldr	r3, [pc, #200]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004f60:	430a      	orrs	r2, r1
 8004f62:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f64:	4b30      	ldr	r3, [pc, #192]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b2f      	ldr	r3, [pc, #188]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004f6a:	2180      	movs	r1, #128	; 0x80
 8004f6c:	0449      	lsls	r1, r1, #17
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f72:	f7fd f9e9 	bl	8002348 <HAL_GetTick>
 8004f76:	0003      	movs	r3, r0
 8004f78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fd f9e4 	bl	8002348 <HAL_GetTick>
 8004f80:	0002      	movs	r2, r0
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e047      	b.n	800501e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f8e:	4b26      	ldr	r3, [pc, #152]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	049b      	lsls	r3, r3, #18
 8004f96:	4013      	ands	r3, r2
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0x574>
 8004f9a:	e03f      	b.n	800501c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9c:	4b22      	ldr	r3, [pc, #136]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4b21      	ldr	r3, [pc, #132]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004fa2:	4924      	ldr	r1, [pc, #144]	; (8005034 <HAL_RCC_OscConfig+0x62c>)
 8004fa4:	400a      	ands	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa8:	f7fd f9ce 	bl	8002348 <HAL_GetTick>
 8004fac:	0003      	movs	r3, r0
 8004fae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb2:	f7fd f9c9 	bl	8002348 <HAL_GetTick>
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e02c      	b.n	800501e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fc4:	4b18      	ldr	r3, [pc, #96]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	049b      	lsls	r3, r3, #18
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d1f0      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x5aa>
 8004fd0:	e024      	b.n	800501c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e01f      	b.n	800501e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004fe4:	4b10      	ldr	r3, [pc, #64]	; (8005028 <HAL_RCC_OscConfig+0x620>)
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	025b      	lsls	r3, r3, #9
 8004ff0:	401a      	ands	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d10e      	bne.n	8005018 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	220f      	movs	r2, #15
 8004ffe:	401a      	ands	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005004:	429a      	cmp	r2, r3
 8005006:	d107      	bne.n	8005018 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	23f0      	movs	r3, #240	; 0xf0
 800500c:	039b      	lsls	r3, r3, #14
 800500e:	401a      	ands	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005014:	429a      	cmp	r2, r3
 8005016:	d001      	beq.n	800501c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	0018      	movs	r0, r3
 8005020:	46bd      	mov	sp, r7
 8005022:	b008      	add	sp, #32
 8005024:	bd80      	pop	{r7, pc}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	40021000 	.word	0x40021000
 800502c:	00001388 	.word	0x00001388
 8005030:	efffffff 	.word	0xefffffff
 8005034:	feffffff 	.word	0xfeffffff
 8005038:	ffc2ffff 	.word	0xffc2ffff

0800503c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0b3      	b.n	80051b8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005050:	4b5b      	ldr	r3, [pc, #364]	; (80051c0 <HAL_RCC_ClockConfig+0x184>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2201      	movs	r2, #1
 8005056:	4013      	ands	r3, r2
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d911      	bls.n	8005082 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b58      	ldr	r3, [pc, #352]	; (80051c0 <HAL_RCC_ClockConfig+0x184>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2201      	movs	r2, #1
 8005064:	4393      	bics	r3, r2
 8005066:	0019      	movs	r1, r3
 8005068:	4b55      	ldr	r3, [pc, #340]	; (80051c0 <HAL_RCC_ClockConfig+0x184>)
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005070:	4b53      	ldr	r3, [pc, #332]	; (80051c0 <HAL_RCC_ClockConfig+0x184>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2201      	movs	r2, #1
 8005076:	4013      	ands	r3, r2
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d001      	beq.n	8005082 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e09a      	b.n	80051b8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2202      	movs	r2, #2
 8005088:	4013      	ands	r3, r2
 800508a:	d015      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2204      	movs	r2, #4
 8005092:	4013      	ands	r3, r2
 8005094:	d006      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005096:	4b4b      	ldr	r3, [pc, #300]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	4b4a      	ldr	r3, [pc, #296]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 800509c:	21e0      	movs	r1, #224	; 0xe0
 800509e:	00c9      	lsls	r1, r1, #3
 80050a0:	430a      	orrs	r2, r1
 80050a2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a4:	4b47      	ldr	r3, [pc, #284]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	22f0      	movs	r2, #240	; 0xf0
 80050aa:	4393      	bics	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	4b44      	ldr	r3, [pc, #272]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 80050b4:	430a      	orrs	r2, r1
 80050b6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2201      	movs	r2, #1
 80050be:	4013      	ands	r3, r2
 80050c0:	d040      	beq.n	8005144 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d107      	bne.n	80050da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	4b3e      	ldr	r3, [pc, #248]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	2380      	movs	r3, #128	; 0x80
 80050d0:	029b      	lsls	r3, r3, #10
 80050d2:	4013      	ands	r3, r2
 80050d4:	d114      	bne.n	8005100 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e06e      	b.n	80051b8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d107      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e2:	4b38      	ldr	r3, [pc, #224]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	2380      	movs	r3, #128	; 0x80
 80050e8:	049b      	lsls	r3, r3, #18
 80050ea:	4013      	ands	r3, r2
 80050ec:	d108      	bne.n	8005100 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e062      	b.n	80051b8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f2:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2202      	movs	r2, #2
 80050f8:	4013      	ands	r3, r2
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e05b      	b.n	80051b8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005100:	4b30      	ldr	r3, [pc, #192]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2203      	movs	r2, #3
 8005106:	4393      	bics	r3, r2
 8005108:	0019      	movs	r1, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005114:	f7fd f918 	bl	8002348 <HAL_GetTick>
 8005118:	0003      	movs	r3, r0
 800511a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511c:	e009      	b.n	8005132 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800511e:	f7fd f913 	bl	8002348 <HAL_GetTick>
 8005122:	0002      	movs	r2, r0
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <HAL_RCC_ClockConfig+0x18c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e042      	b.n	80051b8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005132:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	220c      	movs	r2, #12
 8005138:	401a      	ands	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	429a      	cmp	r2, r3
 8005142:	d1ec      	bne.n	800511e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005144:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <HAL_RCC_ClockConfig+0x184>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2201      	movs	r2, #1
 800514a:	4013      	ands	r3, r2
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d211      	bcs.n	8005176 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005152:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <HAL_RCC_ClockConfig+0x184>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2201      	movs	r2, #1
 8005158:	4393      	bics	r3, r2
 800515a:	0019      	movs	r1, r3
 800515c:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <HAL_RCC_ClockConfig+0x184>)
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005164:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <HAL_RCC_ClockConfig+0x184>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2201      	movs	r2, #1
 800516a:	4013      	ands	r3, r2
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d001      	beq.n	8005176 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e020      	b.n	80051b8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2204      	movs	r2, #4
 800517c:	4013      	ands	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005180:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4a11      	ldr	r2, [pc, #68]	; (80051cc <HAL_RCC_ClockConfig+0x190>)
 8005186:	4013      	ands	r3, r2
 8005188:	0019      	movs	r1, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005194:	f000 f820 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 8005198:	0001      	movs	r1, r0
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <HAL_RCC_ClockConfig+0x188>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	091b      	lsrs	r3, r3, #4
 80051a0:	220f      	movs	r2, #15
 80051a2:	4013      	ands	r3, r2
 80051a4:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <HAL_RCC_ClockConfig+0x194>)
 80051a6:	5cd3      	ldrb	r3, [r2, r3]
 80051a8:	000a      	movs	r2, r1
 80051aa:	40da      	lsrs	r2, r3
 80051ac:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <HAL_RCC_ClockConfig+0x198>)
 80051ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80051b0:	2003      	movs	r0, #3
 80051b2:	f7fd f883 	bl	80022bc <HAL_InitTick>
  
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	0018      	movs	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b004      	add	sp, #16
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40022000 	.word	0x40022000
 80051c4:	40021000 	.word	0x40021000
 80051c8:	00001388 	.word	0x00001388
 80051cc:	fffff8ff 	.word	0xfffff8ff
 80051d0:	08007b88 	.word	0x08007b88
 80051d4:	20000018 	.word	0x20000018

080051d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d8:	b590      	push	{r4, r7, lr}
 80051da:	b08f      	sub	sp, #60	; 0x3c
 80051dc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80051de:	2314      	movs	r3, #20
 80051e0:	18fb      	adds	r3, r7, r3
 80051e2:	4a2b      	ldr	r2, [pc, #172]	; (8005290 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051e6:	c313      	stmia	r3!, {r0, r1, r4}
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80051ec:	1d3b      	adds	r3, r7, #4
 80051ee:	4a29      	ldr	r2, [pc, #164]	; (8005294 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051f2:	c313      	stmia	r3!, {r0, r1, r4}
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051fc:	2300      	movs	r3, #0
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005200:	2300      	movs	r3, #0
 8005202:	637b      	str	r3, [r7, #52]	; 0x34
 8005204:	2300      	movs	r3, #0
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800520c:	4b22      	ldr	r3, [pc, #136]	; (8005298 <HAL_RCC_GetSysClockFreq+0xc0>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	220c      	movs	r2, #12
 8005216:	4013      	ands	r3, r2
 8005218:	2b04      	cmp	r3, #4
 800521a:	d002      	beq.n	8005222 <HAL_RCC_GetSysClockFreq+0x4a>
 800521c:	2b08      	cmp	r3, #8
 800521e:	d003      	beq.n	8005228 <HAL_RCC_GetSysClockFreq+0x50>
 8005220:	e02d      	b.n	800527e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005222:	4b1e      	ldr	r3, [pc, #120]	; (800529c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005224:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005226:	e02d      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	0c9b      	lsrs	r3, r3, #18
 800522c:	220f      	movs	r2, #15
 800522e:	4013      	ands	r3, r2
 8005230:	2214      	movs	r2, #20
 8005232:	18ba      	adds	r2, r7, r2
 8005234:	5cd3      	ldrb	r3, [r2, r3]
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005238:	4b17      	ldr	r3, [pc, #92]	; (8005298 <HAL_RCC_GetSysClockFreq+0xc0>)
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	220f      	movs	r2, #15
 800523e:	4013      	ands	r3, r2
 8005240:	1d3a      	adds	r2, r7, #4
 8005242:	5cd3      	ldrb	r3, [r2, r3]
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005248:	2380      	movs	r3, #128	; 0x80
 800524a:	025b      	lsls	r3, r3, #9
 800524c:	4013      	ands	r3, r2
 800524e:	d009      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005252:	4812      	ldr	r0, [pc, #72]	; (800529c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005254:	f7fa ff62 	bl	800011c <__udivsi3>
 8005258:	0003      	movs	r3, r0
 800525a:	001a      	movs	r2, r3
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	4353      	muls	r3, r2
 8005260:	637b      	str	r3, [r7, #52]	; 0x34
 8005262:	e009      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005264:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005266:	000a      	movs	r2, r1
 8005268:	0152      	lsls	r2, r2, #5
 800526a:	1a52      	subs	r2, r2, r1
 800526c:	0193      	lsls	r3, r2, #6
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	185b      	adds	r3, r3, r1
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8005278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800527c:	e002      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005280:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005282:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005286:	0018      	movs	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	b00f      	add	sp, #60	; 0x3c
 800528c:	bd90      	pop	{r4, r7, pc}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	080065e0 	.word	0x080065e0
 8005294:	080065f0 	.word	0x080065f0
 8005298:	40021000 	.word	0x40021000
 800529c:	007a1200 	.word	0x007a1200

080052a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	025b      	lsls	r3, r3, #9
 80052b8:	4013      	ands	r3, r2
 80052ba:	d100      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80052bc:	e08e      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80052be:	2017      	movs	r0, #23
 80052c0:	183b      	adds	r3, r7, r0
 80052c2:	2200      	movs	r2, #0
 80052c4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052c6:	4b57      	ldr	r3, [pc, #348]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052c8:	69da      	ldr	r2, [r3, #28]
 80052ca:	2380      	movs	r3, #128	; 0x80
 80052cc:	055b      	lsls	r3, r3, #21
 80052ce:	4013      	ands	r3, r2
 80052d0:	d110      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052d2:	4b54      	ldr	r3, [pc, #336]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	4b53      	ldr	r3, [pc, #332]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052d8:	2180      	movs	r1, #128	; 0x80
 80052da:	0549      	lsls	r1, r1, #21
 80052dc:	430a      	orrs	r2, r1
 80052de:	61da      	str	r2, [r3, #28]
 80052e0:	4b50      	ldr	r3, [pc, #320]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	055b      	lsls	r3, r3, #21
 80052e8:	4013      	ands	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
 80052ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ee:	183b      	adds	r3, r7, r0
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f4:	4b4c      	ldr	r3, [pc, #304]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	4013      	ands	r3, r2
 80052fe:	d11a      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005300:	4b49      	ldr	r3, [pc, #292]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4b48      	ldr	r3, [pc, #288]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005306:	2180      	movs	r1, #128	; 0x80
 8005308:	0049      	lsls	r1, r1, #1
 800530a:	430a      	orrs	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800530e:	f7fd f81b 	bl	8002348 <HAL_GetTick>
 8005312:	0003      	movs	r3, r0
 8005314:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005316:	e008      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005318:	f7fd f816 	bl	8002348 <HAL_GetTick>
 800531c:	0002      	movs	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b64      	cmp	r3, #100	; 0x64
 8005324:	d901      	bls.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e077      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532a:	4b3f      	ldr	r3, [pc, #252]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	2380      	movs	r3, #128	; 0x80
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	4013      	ands	r3, r2
 8005334:	d0f0      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005336:	4b3b      	ldr	r3, [pc, #236]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005338:	6a1a      	ldr	r2, [r3, #32]
 800533a:	23c0      	movs	r3, #192	; 0xc0
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4013      	ands	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d034      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	23c0      	movs	r3, #192	; 0xc0
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4013      	ands	r3, r2
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	429a      	cmp	r2, r3
 8005356:	d02c      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005358:	4b32      	ldr	r3, [pc, #200]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	4a33      	ldr	r2, [pc, #204]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800535e:	4013      	ands	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005362:	4b30      	ldr	r3, [pc, #192]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005364:	6a1a      	ldr	r2, [r3, #32]
 8005366:	4b2f      	ldr	r3, [pc, #188]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005368:	2180      	movs	r1, #128	; 0x80
 800536a:	0249      	lsls	r1, r1, #9
 800536c:	430a      	orrs	r2, r1
 800536e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005370:	4b2c      	ldr	r3, [pc, #176]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005372:	6a1a      	ldr	r2, [r3, #32]
 8005374:	4b2b      	ldr	r3, [pc, #172]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005376:	492e      	ldr	r1, [pc, #184]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005378:	400a      	ands	r2, r1
 800537a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800537c:	4b29      	ldr	r3, [pc, #164]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2201      	movs	r2, #1
 8005386:	4013      	ands	r3, r2
 8005388:	d013      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538a:	f7fc ffdd 	bl	8002348 <HAL_GetTick>
 800538e:	0003      	movs	r3, r0
 8005390:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005392:	e009      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005394:	f7fc ffd8 	bl	8002348 <HAL_GetTick>
 8005398:	0002      	movs	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	4a25      	ldr	r2, [pc, #148]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e038      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a8:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	2202      	movs	r2, #2
 80053ae:	4013      	ands	r3, r2
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b2:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	4a1d      	ldr	r2, [pc, #116]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	0019      	movs	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	4b18      	ldr	r3, [pc, #96]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053c2:	430a      	orrs	r2, r1
 80053c4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053c6:	2317      	movs	r3, #23
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d105      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d0:	4b14      	ldr	r3, [pc, #80]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	4b13      	ldr	r3, [pc, #76]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053d6:	4918      	ldr	r1, [pc, #96]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80053d8:	400a      	ands	r2, r1
 80053da:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2201      	movs	r2, #1
 80053e2:	4013      	ands	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053e6:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	2203      	movs	r2, #3
 80053ec:	4393      	bics	r3, r2
 80053ee:	0019      	movs	r1, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80053f6:	430a      	orrs	r2, r1
 80053f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2220      	movs	r2, #32
 8005400:	4013      	ands	r3, r2
 8005402:	d009      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005404:	4b07      	ldr	r3, [pc, #28]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	2210      	movs	r2, #16
 800540a:	4393      	bics	r3, r2
 800540c:	0019      	movs	r1, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	4b04      	ldr	r3, [pc, #16]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005414:	430a      	orrs	r2, r1
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	0018      	movs	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	b006      	add	sp, #24
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	40021000 	.word	0x40021000
 8005428:	40007000 	.word	0x40007000
 800542c:	fffffcff 	.word	0xfffffcff
 8005430:	fffeffff 	.word	0xfffeffff
 8005434:	00001388 	.word	0x00001388
 8005438:	efffffff 	.word	0xefffffff

0800543c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e042      	b.n	80054d4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	223d      	movs	r2, #61	; 0x3d
 8005452:	5c9b      	ldrb	r3, [r3, r2]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d107      	bne.n	800546a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	223c      	movs	r2, #60	; 0x3c
 800545e:	2100      	movs	r1, #0
 8005460:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	0018      	movs	r0, r3
 8005466:	f7fc fe4d 	bl	8002104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	223d      	movs	r2, #61	; 0x3d
 800546e:	2102      	movs	r1, #2
 8005470:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3304      	adds	r3, #4
 800547a:	0019      	movs	r1, r3
 800547c:	0010      	movs	r0, r2
 800547e:	f000 fa83 	bl	8005988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2246      	movs	r2, #70	; 0x46
 8005486:	2101      	movs	r1, #1
 8005488:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	223e      	movs	r2, #62	; 0x3e
 800548e:	2101      	movs	r1, #1
 8005490:	5499      	strb	r1, [r3, r2]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	223f      	movs	r2, #63	; 0x3f
 8005496:	2101      	movs	r1, #1
 8005498:	5499      	strb	r1, [r3, r2]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2240      	movs	r2, #64	; 0x40
 800549e:	2101      	movs	r1, #1
 80054a0:	5499      	strb	r1, [r3, r2]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2241      	movs	r2, #65	; 0x41
 80054a6:	2101      	movs	r1, #1
 80054a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2242      	movs	r2, #66	; 0x42
 80054ae:	2101      	movs	r1, #1
 80054b0:	5499      	strb	r1, [r3, r2]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2243      	movs	r2, #67	; 0x43
 80054b6:	2101      	movs	r1, #1
 80054b8:	5499      	strb	r1, [r3, r2]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2244      	movs	r2, #68	; 0x44
 80054be:	2101      	movs	r1, #1
 80054c0:	5499      	strb	r1, [r3, r2]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2245      	movs	r2, #69	; 0x45
 80054c6:	2101      	movs	r1, #1
 80054c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	223d      	movs	r2, #61	; 0x3d
 80054ce:	2101      	movs	r1, #1
 80054d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	0018      	movs	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b002      	add	sp, #8
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	223d      	movs	r2, #61	; 0x3d
 80054e8:	5c9b      	ldrb	r3, [r3, r2]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d001      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e035      	b.n	8005560 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	223d      	movs	r2, #61	; 0x3d
 80054f8:	2102      	movs	r1, #2
 80054fa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2101      	movs	r1, #1
 8005508:	430a      	orrs	r2, r1
 800550a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a15      	ldr	r2, [pc, #84]	; (8005568 <HAL_TIM_Base_Start_IT+0x8c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_TIM_Base_Start_IT+0x4e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a14      	ldr	r2, [pc, #80]	; (800556c <HAL_TIM_Base_Start_IT+0x90>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d004      	beq.n	800552a <HAL_TIM_Base_Start_IT+0x4e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a12      	ldr	r2, [pc, #72]	; (8005570 <HAL_TIM_Base_Start_IT+0x94>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d111      	bne.n	800554e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	2207      	movs	r2, #7
 8005532:	4013      	ands	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b06      	cmp	r3, #6
 800553a:	d010      	beq.n	800555e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2101      	movs	r1, #1
 8005548:	430a      	orrs	r2, r1
 800554a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554c:	e007      	b.n	800555e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2101      	movs	r1, #1
 800555a:	430a      	orrs	r2, r1
 800555c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	0018      	movs	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	b004      	add	sp, #16
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40012c00 	.word	0x40012c00
 800556c:	40000400 	.word	0x40000400
 8005570:	40014000 	.word	0x40014000

08005574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2202      	movs	r2, #2
 8005584:	4013      	ands	r3, r2
 8005586:	2b02      	cmp	r3, #2
 8005588:	d124      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2202      	movs	r2, #2
 8005592:	4013      	ands	r3, r2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d11d      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2203      	movs	r2, #3
 800559e:	4252      	negs	r2, r2
 80055a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	2203      	movs	r2, #3
 80055b0:	4013      	ands	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	0018      	movs	r0, r3
 80055b8:	f000 f9ce 	bl	8005958 <HAL_TIM_IC_CaptureCallback>
 80055bc:	e007      	b.n	80055ce <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f000 f9c1 	bl	8005948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	0018      	movs	r0, r3
 80055ca:	f000 f9cd 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2204      	movs	r2, #4
 80055dc:	4013      	ands	r3, r2
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d125      	bne.n	800562e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	2204      	movs	r2, #4
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d11e      	bne.n	800562e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2205      	movs	r2, #5
 80055f6:	4252      	negs	r2, r2
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	23c0      	movs	r3, #192	; 0xc0
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4013      	ands	r3, r2
 800560c:	d004      	beq.n	8005618 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	0018      	movs	r0, r3
 8005612:	f000 f9a1 	bl	8005958 <HAL_TIM_IC_CaptureCallback>
 8005616:	e007      	b.n	8005628 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0018      	movs	r0, r3
 800561c:	f000 f994 	bl	8005948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	0018      	movs	r0, r3
 8005624:	f000 f9a0 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2208      	movs	r2, #8
 8005636:	4013      	ands	r3, r2
 8005638:	2b08      	cmp	r3, #8
 800563a:	d124      	bne.n	8005686 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2208      	movs	r2, #8
 8005644:	4013      	ands	r3, r2
 8005646:	2b08      	cmp	r3, #8
 8005648:	d11d      	bne.n	8005686 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2209      	movs	r2, #9
 8005650:	4252      	negs	r2, r2
 8005652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2204      	movs	r2, #4
 8005658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	2203      	movs	r2, #3
 8005662:	4013      	ands	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	0018      	movs	r0, r3
 800566a:	f000 f975 	bl	8005958 <HAL_TIM_IC_CaptureCallback>
 800566e:	e007      	b.n	8005680 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	0018      	movs	r0, r3
 8005674:	f000 f968 	bl	8005948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	0018      	movs	r0, r3
 800567c:	f000 f974 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2210      	movs	r2, #16
 800568e:	4013      	ands	r3, r2
 8005690:	2b10      	cmp	r3, #16
 8005692:	d125      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	2210      	movs	r2, #16
 800569c:	4013      	ands	r3, r2
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d11e      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2211      	movs	r2, #17
 80056a8:	4252      	negs	r2, r2
 80056aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2208      	movs	r2, #8
 80056b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	23c0      	movs	r3, #192	; 0xc0
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4013      	ands	r3, r2
 80056be:	d004      	beq.n	80056ca <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	0018      	movs	r0, r3
 80056c4:	f000 f948 	bl	8005958 <HAL_TIM_IC_CaptureCallback>
 80056c8:	e007      	b.n	80056da <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	0018      	movs	r0, r3
 80056ce:	f000 f93b 	bl	8005948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	0018      	movs	r0, r3
 80056d6:	f000 f947 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2201      	movs	r2, #1
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d10f      	bne.n	800570e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	2201      	movs	r2, #1
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d108      	bne.n	800570e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2202      	movs	r2, #2
 8005702:	4252      	negs	r2, r2
 8005704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	0018      	movs	r0, r3
 800570a:	f7fb ff03 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2280      	movs	r2, #128	; 0x80
 8005716:	4013      	ands	r3, r2
 8005718:	2b80      	cmp	r3, #128	; 0x80
 800571a:	d10f      	bne.n	800573c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	4013      	ands	r3, r2
 8005726:	2b80      	cmp	r3, #128	; 0x80
 8005728:	d108      	bne.n	800573c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2281      	movs	r2, #129	; 0x81
 8005730:	4252      	negs	r2, r2
 8005732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	0018      	movs	r0, r3
 8005738:	f000 fa96 	bl	8005c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2240      	movs	r2, #64	; 0x40
 8005744:	4013      	ands	r3, r2
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d10f      	bne.n	800576a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2240      	movs	r2, #64	; 0x40
 8005752:	4013      	ands	r3, r2
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	d108      	bne.n	800576a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2241      	movs	r2, #65	; 0x41
 800575e:	4252      	negs	r2, r2
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0018      	movs	r0, r3
 8005766:	f000 f907 	bl	8005978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2220      	movs	r2, #32
 8005772:	4013      	ands	r3, r2
 8005774:	2b20      	cmp	r3, #32
 8005776:	d10f      	bne.n	8005798 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	4013      	ands	r3, r2
 8005782:	2b20      	cmp	r3, #32
 8005784:	d108      	bne.n	8005798 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2221      	movs	r2, #33	; 0x21
 800578c:	4252      	negs	r2, r2
 800578e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	0018      	movs	r0, r3
 8005794:	f000 fa60 	bl	8005c58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	46bd      	mov	sp, r7
 800579c:	b002      	add	sp, #8
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057aa:	230f      	movs	r3, #15
 80057ac:	18fb      	adds	r3, r7, r3
 80057ae:	2200      	movs	r2, #0
 80057b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	223c      	movs	r2, #60	; 0x3c
 80057b6:	5c9b      	ldrb	r3, [r3, r2]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_TIM_ConfigClockSource+0x20>
 80057bc:	2302      	movs	r3, #2
 80057be:	e0bc      	b.n	800593a <HAL_TIM_ConfigClockSource+0x19a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	223c      	movs	r2, #60	; 0x3c
 80057c4:	2101      	movs	r1, #1
 80057c6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	223d      	movs	r2, #61	; 0x3d
 80057cc:	2102      	movs	r1, #2
 80057ce:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2277      	movs	r2, #119	; 0x77
 80057dc:	4393      	bics	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4a58      	ldr	r2, [pc, #352]	; (8005944 <HAL_TIM_ConfigClockSource+0x1a4>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2280      	movs	r2, #128	; 0x80
 80057f6:	0192      	lsls	r2, r2, #6
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d040      	beq.n	800587e <HAL_TIM_ConfigClockSource+0xde>
 80057fc:	2280      	movs	r2, #128	; 0x80
 80057fe:	0192      	lsls	r2, r2, #6
 8005800:	4293      	cmp	r3, r2
 8005802:	d900      	bls.n	8005806 <HAL_TIM_ConfigClockSource+0x66>
 8005804:	e088      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x178>
 8005806:	2280      	movs	r2, #128	; 0x80
 8005808:	0152      	lsls	r2, r2, #5
 800580a:	4293      	cmp	r3, r2
 800580c:	d100      	bne.n	8005810 <HAL_TIM_ConfigClockSource+0x70>
 800580e:	e088      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x182>
 8005810:	2280      	movs	r2, #128	; 0x80
 8005812:	0152      	lsls	r2, r2, #5
 8005814:	4293      	cmp	r3, r2
 8005816:	d900      	bls.n	800581a <HAL_TIM_ConfigClockSource+0x7a>
 8005818:	e07e      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x178>
 800581a:	2b70      	cmp	r3, #112	; 0x70
 800581c:	d018      	beq.n	8005850 <HAL_TIM_ConfigClockSource+0xb0>
 800581e:	d900      	bls.n	8005822 <HAL_TIM_ConfigClockSource+0x82>
 8005820:	e07a      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x178>
 8005822:	2b60      	cmp	r3, #96	; 0x60
 8005824:	d04f      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x126>
 8005826:	d900      	bls.n	800582a <HAL_TIM_ConfigClockSource+0x8a>
 8005828:	e076      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x178>
 800582a:	2b50      	cmp	r3, #80	; 0x50
 800582c:	d03b      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x106>
 800582e:	d900      	bls.n	8005832 <HAL_TIM_ConfigClockSource+0x92>
 8005830:	e072      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x178>
 8005832:	2b40      	cmp	r3, #64	; 0x40
 8005834:	d057      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0x146>
 8005836:	d900      	bls.n	800583a <HAL_TIM_ConfigClockSource+0x9a>
 8005838:	e06e      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x178>
 800583a:	2b30      	cmp	r3, #48	; 0x30
 800583c:	d063      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x166>
 800583e:	d86b      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x178>
 8005840:	2b20      	cmp	r3, #32
 8005842:	d060      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x166>
 8005844:	d868      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x178>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d05d      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x166>
 800584a:	2b10      	cmp	r3, #16
 800584c:	d05b      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x166>
 800584e:	e063      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	6899      	ldr	r1, [r3, #8]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f000 f982 	bl	8005b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2277      	movs	r2, #119	; 0x77
 8005870:	4313      	orrs	r3, r2
 8005872:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	609a      	str	r2, [r3, #8]
      break;
 800587c:	e052      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6899      	ldr	r1, [r3, #8]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f000 f96b 	bl	8005b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2180      	movs	r1, #128	; 0x80
 800589e:	01c9      	lsls	r1, r1, #7
 80058a0:	430a      	orrs	r2, r1
 80058a2:	609a      	str	r2, [r3, #8]
      break;
 80058a4:	e03e      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6859      	ldr	r1, [r3, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	001a      	movs	r2, r3
 80058b4:	f000 f8de 	bl	8005a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2150      	movs	r1, #80	; 0x50
 80058be:	0018      	movs	r0, r3
 80058c0:	f000 f938 	bl	8005b34 <TIM_ITRx_SetConfig>
      break;
 80058c4:	e02e      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6859      	ldr	r1, [r3, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	001a      	movs	r2, r3
 80058d4:	f000 f8fc 	bl	8005ad0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2160      	movs	r1, #96	; 0x60
 80058de:	0018      	movs	r0, r3
 80058e0:	f000 f928 	bl	8005b34 <TIM_ITRx_SetConfig>
      break;
 80058e4:	e01e      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6859      	ldr	r1, [r3, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	001a      	movs	r2, r3
 80058f4:	f000 f8be 	bl	8005a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2140      	movs	r1, #64	; 0x40
 80058fe:	0018      	movs	r0, r3
 8005900:	f000 f918 	bl	8005b34 <TIM_ITRx_SetConfig>
      break;
 8005904:	e00e      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	0019      	movs	r1, r3
 8005910:	0010      	movs	r0, r2
 8005912:	f000 f90f 	bl	8005b34 <TIM_ITRx_SetConfig>
      break;
 8005916:	e005      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005918:	230f      	movs	r3, #15
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	2201      	movs	r2, #1
 800591e:	701a      	strb	r2, [r3, #0]
      break;
 8005920:	e000      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005922:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	223d      	movs	r2, #61	; 0x3d
 8005928:	2101      	movs	r1, #1
 800592a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	223c      	movs	r2, #60	; 0x3c
 8005930:	2100      	movs	r1, #0
 8005932:	5499      	strb	r1, [r3, r2]

  return status;
 8005934:	230f      	movs	r3, #15
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	781b      	ldrb	r3, [r3, #0]
}
 800593a:	0018      	movs	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	b004      	add	sp, #16
 8005940:	bd80      	pop	{r7, pc}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	ffff00ff 	.word	0xffff00ff

08005948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005950:	46c0      	nop			; (mov r8, r8)
 8005952:	46bd      	mov	sp, r7
 8005954:	b002      	add	sp, #8
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005960:	46c0      	nop			; (mov r8, r8)
 8005962:	46bd      	mov	sp, r7
 8005964:	b002      	add	sp, #8
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005970:	46c0      	nop			; (mov r8, r8)
 8005972:	46bd      	mov	sp, r7
 8005974:	b002      	add	sp, #8
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005980:	46c0      	nop			; (mov r8, r8)
 8005982:	46bd      	mov	sp, r7
 8005984:	b002      	add	sp, #8
 8005986:	bd80      	pop	{r7, pc}

08005988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a2f      	ldr	r2, [pc, #188]	; (8005a58 <TIM_Base_SetConfig+0xd0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0x20>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a2e      	ldr	r2, [pc, #184]	; (8005a5c <TIM_Base_SetConfig+0xd4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d108      	bne.n	80059ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2270      	movs	r2, #112	; 0x70
 80059ac:	4393      	bics	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a26      	ldr	r2, [pc, #152]	; (8005a58 <TIM_Base_SetConfig+0xd0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <TIM_Base_SetConfig+0x62>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a25      	ldr	r2, [pc, #148]	; (8005a5c <TIM_Base_SetConfig+0xd4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00f      	beq.n	80059ea <TIM_Base_SetConfig+0x62>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a24      	ldr	r2, [pc, #144]	; (8005a60 <TIM_Base_SetConfig+0xd8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00b      	beq.n	80059ea <TIM_Base_SetConfig+0x62>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a23      	ldr	r2, [pc, #140]	; (8005a64 <TIM_Base_SetConfig+0xdc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <TIM_Base_SetConfig+0x62>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a22      	ldr	r2, [pc, #136]	; (8005a68 <TIM_Base_SetConfig+0xe0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_Base_SetConfig+0x62>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a21      	ldr	r2, [pc, #132]	; (8005a6c <TIM_Base_SetConfig+0xe4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d108      	bne.n	80059fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4a20      	ldr	r2, [pc, #128]	; (8005a70 <TIM_Base_SetConfig+0xe8>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2280      	movs	r2, #128	; 0x80
 8005a00:	4393      	bics	r3, r2
 8005a02:	001a      	movs	r2, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a0c      	ldr	r2, [pc, #48]	; (8005a58 <TIM_Base_SetConfig+0xd0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00b      	beq.n	8005a42 <TIM_Base_SetConfig+0xba>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a0d      	ldr	r2, [pc, #52]	; (8005a64 <TIM_Base_SetConfig+0xdc>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d007      	beq.n	8005a42 <TIM_Base_SetConfig+0xba>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a0c      	ldr	r2, [pc, #48]	; (8005a68 <TIM_Base_SetConfig+0xe0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d003      	beq.n	8005a42 <TIM_Base_SetConfig+0xba>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a0b      	ldr	r2, [pc, #44]	; (8005a6c <TIM_Base_SetConfig+0xe4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d103      	bne.n	8005a4a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	615a      	str	r2, [r3, #20]
}
 8005a50:	46c0      	nop			; (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	b004      	add	sp, #16
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40002000 	.word	0x40002000
 8005a64:	40014000 	.word	0x40014000
 8005a68:	40014400 	.word	0x40014400
 8005a6c:	40014800 	.word	0x40014800
 8005a70:	fffffcff 	.word	0xfffffcff

08005a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	4393      	bics	r3, r2
 8005a8e:	001a      	movs	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	22f0      	movs	r2, #240	; 0xf0
 8005a9e:	4393      	bics	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	220a      	movs	r2, #10
 8005ab0:	4393      	bics	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	621a      	str	r2, [r3, #32]
}
 8005ac8:	46c0      	nop			; (mov r8, r8)
 8005aca:	46bd      	mov	sp, r7
 8005acc:	b006      	add	sp, #24
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	4393      	bics	r3, r2
 8005ae4:	001a      	movs	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	4a0d      	ldr	r2, [pc, #52]	; (8005b30 <TIM_TI2_ConfigInputStage+0x60>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	031b      	lsls	r3, r3, #12
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	22a0      	movs	r2, #160	; 0xa0
 8005b0c:	4393      	bics	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	b006      	add	sp, #24
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	ffff0fff 	.word	0xffff0fff

08005b34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2270      	movs	r2, #112	; 0x70
 8005b48:	4393      	bics	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	2207      	movs	r2, #7
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	609a      	str	r2, [r3, #8]
}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	46bd      	mov	sp, r7
 8005b62:	b004      	add	sp, #16
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <TIM_ETR_SetConfig+0x3c>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	021a      	lsls	r2, r3, #8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	609a      	str	r2, [r3, #8]
}
 8005b9c:	46c0      	nop			; (mov r8, r8)
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b006      	add	sp, #24
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	ffff00ff 	.word	0xffff00ff

08005ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	223c      	movs	r2, #60	; 0x3c
 8005bb6:	5c9b      	ldrb	r3, [r3, r2]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e041      	b.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	223c      	movs	r2, #60	; 0x3c
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	223d      	movs	r2, #61	; 0x3d
 8005bcc:	2102      	movs	r1, #2
 8005bce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2270      	movs	r2, #112	; 0x70
 8005be4:	4393      	bics	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d009      	beq.n	8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a11      	ldr	r2, [pc, #68]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a10      	ldr	r2, [pc, #64]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d10c      	bne.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2280      	movs	r2, #128	; 0x80
 8005c1c:	4393      	bics	r3, r2
 8005c1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	223d      	movs	r2, #61	; 0x3d
 8005c36:	2101      	movs	r1, #1
 8005c38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	223c      	movs	r2, #60	; 0x3c
 8005c3e:	2100      	movs	r1, #0
 8005c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	0018      	movs	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b004      	add	sp, #16
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40000400 	.word	0x40000400
 8005c54:	40014000 	.word	0x40014000

08005c58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c60:	46c0      	nop			; (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b002      	add	sp, #8
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c70:	46c0      	nop			; (mov r8, r8)
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b002      	add	sp, #8
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <__errno>:
 8005c78:	4b01      	ldr	r3, [pc, #4]	; (8005c80 <__errno+0x8>)
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	4770      	bx	lr
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	20000024 	.word	0x20000024

08005c84 <__libc_init_array>:
 8005c84:	b570      	push	{r4, r5, r6, lr}
 8005c86:	2600      	movs	r6, #0
 8005c88:	4d0c      	ldr	r5, [pc, #48]	; (8005cbc <__libc_init_array+0x38>)
 8005c8a:	4c0d      	ldr	r4, [pc, #52]	; (8005cc0 <__libc_init_array+0x3c>)
 8005c8c:	1b64      	subs	r4, r4, r5
 8005c8e:	10a4      	asrs	r4, r4, #2
 8005c90:	42a6      	cmp	r6, r4
 8005c92:	d109      	bne.n	8005ca8 <__libc_init_array+0x24>
 8005c94:	2600      	movs	r6, #0
 8005c96:	f000 fc8b 	bl	80065b0 <_init>
 8005c9a:	4d0a      	ldr	r5, [pc, #40]	; (8005cc4 <__libc_init_array+0x40>)
 8005c9c:	4c0a      	ldr	r4, [pc, #40]	; (8005cc8 <__libc_init_array+0x44>)
 8005c9e:	1b64      	subs	r4, r4, r5
 8005ca0:	10a4      	asrs	r4, r4, #2
 8005ca2:	42a6      	cmp	r6, r4
 8005ca4:	d105      	bne.n	8005cb2 <__libc_init_array+0x2e>
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}
 8005ca8:	00b3      	lsls	r3, r6, #2
 8005caa:	58eb      	ldr	r3, [r5, r3]
 8005cac:	4798      	blx	r3
 8005cae:	3601      	adds	r6, #1
 8005cb0:	e7ee      	b.n	8005c90 <__libc_init_array+0xc>
 8005cb2:	00b3      	lsls	r3, r6, #2
 8005cb4:	58eb      	ldr	r3, [r5, r3]
 8005cb6:	4798      	blx	r3
 8005cb8:	3601      	adds	r6, #1
 8005cba:	e7f2      	b.n	8005ca2 <__libc_init_array+0x1e>
 8005cbc:	08007bcc 	.word	0x08007bcc
 8005cc0:	08007bcc 	.word	0x08007bcc
 8005cc4:	08007bcc 	.word	0x08007bcc
 8005cc8:	08007bd0 	.word	0x08007bd0

08005ccc <memset>:
 8005ccc:	0003      	movs	r3, r0
 8005cce:	1882      	adds	r2, r0, r2
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d100      	bne.n	8005cd6 <memset+0xa>
 8005cd4:	4770      	bx	lr
 8005cd6:	7019      	strb	r1, [r3, #0]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	e7f9      	b.n	8005cd0 <memset+0x4>

08005cdc <siprintf>:
 8005cdc:	b40e      	push	{r1, r2, r3}
 8005cde:	b500      	push	{lr}
 8005ce0:	490b      	ldr	r1, [pc, #44]	; (8005d10 <siprintf+0x34>)
 8005ce2:	b09c      	sub	sp, #112	; 0x70
 8005ce4:	ab1d      	add	r3, sp, #116	; 0x74
 8005ce6:	9002      	str	r0, [sp, #8]
 8005ce8:	9006      	str	r0, [sp, #24]
 8005cea:	9107      	str	r1, [sp, #28]
 8005cec:	9104      	str	r1, [sp, #16]
 8005cee:	4809      	ldr	r0, [pc, #36]	; (8005d14 <siprintf+0x38>)
 8005cf0:	4909      	ldr	r1, [pc, #36]	; (8005d18 <siprintf+0x3c>)
 8005cf2:	cb04      	ldmia	r3!, {r2}
 8005cf4:	9105      	str	r1, [sp, #20]
 8005cf6:	6800      	ldr	r0, [r0, #0]
 8005cf8:	a902      	add	r1, sp, #8
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	f000 f870 	bl	8005de0 <_svfiprintf_r>
 8005d00:	2300      	movs	r3, #0
 8005d02:	9a02      	ldr	r2, [sp, #8]
 8005d04:	7013      	strb	r3, [r2, #0]
 8005d06:	b01c      	add	sp, #112	; 0x70
 8005d08:	bc08      	pop	{r3}
 8005d0a:	b003      	add	sp, #12
 8005d0c:	4718      	bx	r3
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	7fffffff 	.word	0x7fffffff
 8005d14:	20000024 	.word	0x20000024
 8005d18:	ffff0208 	.word	0xffff0208

08005d1c <__ssputs_r>:
 8005d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d1e:	688e      	ldr	r6, [r1, #8]
 8005d20:	b085      	sub	sp, #20
 8005d22:	0007      	movs	r7, r0
 8005d24:	000c      	movs	r4, r1
 8005d26:	9203      	str	r2, [sp, #12]
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	429e      	cmp	r6, r3
 8005d2c:	d83c      	bhi.n	8005da8 <__ssputs_r+0x8c>
 8005d2e:	2390      	movs	r3, #144	; 0x90
 8005d30:	898a      	ldrh	r2, [r1, #12]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	421a      	tst	r2, r3
 8005d36:	d034      	beq.n	8005da2 <__ssputs_r+0x86>
 8005d38:	6909      	ldr	r1, [r1, #16]
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	6960      	ldr	r0, [r4, #20]
 8005d3e:	1a5b      	subs	r3, r3, r1
 8005d40:	9302      	str	r3, [sp, #8]
 8005d42:	2303      	movs	r3, #3
 8005d44:	4343      	muls	r3, r0
 8005d46:	0fdd      	lsrs	r5, r3, #31
 8005d48:	18ed      	adds	r5, r5, r3
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	9802      	ldr	r0, [sp, #8]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	181b      	adds	r3, r3, r0
 8005d52:	106d      	asrs	r5, r5, #1
 8005d54:	42ab      	cmp	r3, r5
 8005d56:	d900      	bls.n	8005d5a <__ssputs_r+0x3e>
 8005d58:	001d      	movs	r5, r3
 8005d5a:	0553      	lsls	r3, r2, #21
 8005d5c:	d532      	bpl.n	8005dc4 <__ssputs_r+0xa8>
 8005d5e:	0029      	movs	r1, r5
 8005d60:	0038      	movs	r0, r7
 8005d62:	f000 fb53 	bl	800640c <_malloc_r>
 8005d66:	1e06      	subs	r6, r0, #0
 8005d68:	d109      	bne.n	8005d7e <__ssputs_r+0x62>
 8005d6a:	230c      	movs	r3, #12
 8005d6c:	603b      	str	r3, [r7, #0]
 8005d6e:	2340      	movs	r3, #64	; 0x40
 8005d70:	2001      	movs	r0, #1
 8005d72:	89a2      	ldrh	r2, [r4, #12]
 8005d74:	4240      	negs	r0, r0
 8005d76:	4313      	orrs	r3, r2
 8005d78:	81a3      	strh	r3, [r4, #12]
 8005d7a:	b005      	add	sp, #20
 8005d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d7e:	9a02      	ldr	r2, [sp, #8]
 8005d80:	6921      	ldr	r1, [r4, #16]
 8005d82:	f000 faba 	bl	80062fa <memcpy>
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	4a14      	ldr	r2, [pc, #80]	; (8005ddc <__ssputs_r+0xc0>)
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	2380      	movs	r3, #128	; 0x80
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	9b02      	ldr	r3, [sp, #8]
 8005d94:	6126      	str	r6, [r4, #16]
 8005d96:	18f6      	adds	r6, r6, r3
 8005d98:	6026      	str	r6, [r4, #0]
 8005d9a:	6165      	str	r5, [r4, #20]
 8005d9c:	9e01      	ldr	r6, [sp, #4]
 8005d9e:	1aed      	subs	r5, r5, r3
 8005da0:	60a5      	str	r5, [r4, #8]
 8005da2:	9b01      	ldr	r3, [sp, #4]
 8005da4:	429e      	cmp	r6, r3
 8005da6:	d900      	bls.n	8005daa <__ssputs_r+0x8e>
 8005da8:	9e01      	ldr	r6, [sp, #4]
 8005daa:	0032      	movs	r2, r6
 8005dac:	9903      	ldr	r1, [sp, #12]
 8005dae:	6820      	ldr	r0, [r4, #0]
 8005db0:	f000 faac 	bl	800630c <memmove>
 8005db4:	68a3      	ldr	r3, [r4, #8]
 8005db6:	2000      	movs	r0, #0
 8005db8:	1b9b      	subs	r3, r3, r6
 8005dba:	60a3      	str	r3, [r4, #8]
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	199e      	adds	r6, r3, r6
 8005dc0:	6026      	str	r6, [r4, #0]
 8005dc2:	e7da      	b.n	8005d7a <__ssputs_r+0x5e>
 8005dc4:	002a      	movs	r2, r5
 8005dc6:	0038      	movs	r0, r7
 8005dc8:	f000 fb96 	bl	80064f8 <_realloc_r>
 8005dcc:	1e06      	subs	r6, r0, #0
 8005dce:	d1e0      	bne.n	8005d92 <__ssputs_r+0x76>
 8005dd0:	0038      	movs	r0, r7
 8005dd2:	6921      	ldr	r1, [r4, #16]
 8005dd4:	f000 faae 	bl	8006334 <_free_r>
 8005dd8:	e7c7      	b.n	8005d6a <__ssputs_r+0x4e>
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	fffffb7f 	.word	0xfffffb7f

08005de0 <_svfiprintf_r>:
 8005de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de2:	b0a1      	sub	sp, #132	; 0x84
 8005de4:	9003      	str	r0, [sp, #12]
 8005de6:	001d      	movs	r5, r3
 8005de8:	898b      	ldrh	r3, [r1, #12]
 8005dea:	000f      	movs	r7, r1
 8005dec:	0016      	movs	r6, r2
 8005dee:	061b      	lsls	r3, r3, #24
 8005df0:	d511      	bpl.n	8005e16 <_svfiprintf_r+0x36>
 8005df2:	690b      	ldr	r3, [r1, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10e      	bne.n	8005e16 <_svfiprintf_r+0x36>
 8005df8:	2140      	movs	r1, #64	; 0x40
 8005dfa:	f000 fb07 	bl	800640c <_malloc_r>
 8005dfe:	6038      	str	r0, [r7, #0]
 8005e00:	6138      	str	r0, [r7, #16]
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d105      	bne.n	8005e12 <_svfiprintf_r+0x32>
 8005e06:	230c      	movs	r3, #12
 8005e08:	9a03      	ldr	r2, [sp, #12]
 8005e0a:	3801      	subs	r0, #1
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	b021      	add	sp, #132	; 0x84
 8005e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e12:	2340      	movs	r3, #64	; 0x40
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	2300      	movs	r3, #0
 8005e18:	ac08      	add	r4, sp, #32
 8005e1a:	6163      	str	r3, [r4, #20]
 8005e1c:	3320      	adds	r3, #32
 8005e1e:	7663      	strb	r3, [r4, #25]
 8005e20:	3310      	adds	r3, #16
 8005e22:	76a3      	strb	r3, [r4, #26]
 8005e24:	9507      	str	r5, [sp, #28]
 8005e26:	0035      	movs	r5, r6
 8005e28:	782b      	ldrb	r3, [r5, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <_svfiprintf_r+0x52>
 8005e2e:	2b25      	cmp	r3, #37	; 0x25
 8005e30:	d147      	bne.n	8005ec2 <_svfiprintf_r+0xe2>
 8005e32:	1bab      	subs	r3, r5, r6
 8005e34:	9305      	str	r3, [sp, #20]
 8005e36:	42b5      	cmp	r5, r6
 8005e38:	d00c      	beq.n	8005e54 <_svfiprintf_r+0x74>
 8005e3a:	0032      	movs	r2, r6
 8005e3c:	0039      	movs	r1, r7
 8005e3e:	9803      	ldr	r0, [sp, #12]
 8005e40:	f7ff ff6c 	bl	8005d1c <__ssputs_r>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d100      	bne.n	8005e4a <_svfiprintf_r+0x6a>
 8005e48:	e0ae      	b.n	8005fa8 <_svfiprintf_r+0x1c8>
 8005e4a:	6962      	ldr	r2, [r4, #20]
 8005e4c:	9b05      	ldr	r3, [sp, #20]
 8005e4e:	4694      	mov	ip, r2
 8005e50:	4463      	add	r3, ip
 8005e52:	6163      	str	r3, [r4, #20]
 8005e54:	782b      	ldrb	r3, [r5, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d100      	bne.n	8005e5c <_svfiprintf_r+0x7c>
 8005e5a:	e0a5      	b.n	8005fa8 <_svfiprintf_r+0x1c8>
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4252      	negs	r2, r2
 8005e62:	6062      	str	r2, [r4, #4]
 8005e64:	a904      	add	r1, sp, #16
 8005e66:	3254      	adds	r2, #84	; 0x54
 8005e68:	1852      	adds	r2, r2, r1
 8005e6a:	1c6e      	adds	r6, r5, #1
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	60e3      	str	r3, [r4, #12]
 8005e70:	60a3      	str	r3, [r4, #8]
 8005e72:	7013      	strb	r3, [r2, #0]
 8005e74:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e76:	2205      	movs	r2, #5
 8005e78:	7831      	ldrb	r1, [r6, #0]
 8005e7a:	4854      	ldr	r0, [pc, #336]	; (8005fcc <_svfiprintf_r+0x1ec>)
 8005e7c:	f000 fa32 	bl	80062e4 <memchr>
 8005e80:	1c75      	adds	r5, r6, #1
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d11f      	bne.n	8005ec6 <_svfiprintf_r+0xe6>
 8005e86:	6822      	ldr	r2, [r4, #0]
 8005e88:	06d3      	lsls	r3, r2, #27
 8005e8a:	d504      	bpl.n	8005e96 <_svfiprintf_r+0xb6>
 8005e8c:	2353      	movs	r3, #83	; 0x53
 8005e8e:	a904      	add	r1, sp, #16
 8005e90:	185b      	adds	r3, r3, r1
 8005e92:	2120      	movs	r1, #32
 8005e94:	7019      	strb	r1, [r3, #0]
 8005e96:	0713      	lsls	r3, r2, #28
 8005e98:	d504      	bpl.n	8005ea4 <_svfiprintf_r+0xc4>
 8005e9a:	2353      	movs	r3, #83	; 0x53
 8005e9c:	a904      	add	r1, sp, #16
 8005e9e:	185b      	adds	r3, r3, r1
 8005ea0:	212b      	movs	r1, #43	; 0x2b
 8005ea2:	7019      	strb	r1, [r3, #0]
 8005ea4:	7833      	ldrb	r3, [r6, #0]
 8005ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ea8:	d016      	beq.n	8005ed8 <_svfiprintf_r+0xf8>
 8005eaa:	0035      	movs	r5, r6
 8005eac:	2100      	movs	r1, #0
 8005eae:	200a      	movs	r0, #10
 8005eb0:	68e3      	ldr	r3, [r4, #12]
 8005eb2:	782a      	ldrb	r2, [r5, #0]
 8005eb4:	1c6e      	adds	r6, r5, #1
 8005eb6:	3a30      	subs	r2, #48	; 0x30
 8005eb8:	2a09      	cmp	r2, #9
 8005eba:	d94e      	bls.n	8005f5a <_svfiprintf_r+0x17a>
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	d111      	bne.n	8005ee4 <_svfiprintf_r+0x104>
 8005ec0:	e017      	b.n	8005ef2 <_svfiprintf_r+0x112>
 8005ec2:	3501      	adds	r5, #1
 8005ec4:	e7b0      	b.n	8005e28 <_svfiprintf_r+0x48>
 8005ec6:	4b41      	ldr	r3, [pc, #260]	; (8005fcc <_svfiprintf_r+0x1ec>)
 8005ec8:	6822      	ldr	r2, [r4, #0]
 8005eca:	1ac0      	subs	r0, r0, r3
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4083      	lsls	r3, r0
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	002e      	movs	r6, r5
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	e7ce      	b.n	8005e76 <_svfiprintf_r+0x96>
 8005ed8:	9b07      	ldr	r3, [sp, #28]
 8005eda:	1d19      	adds	r1, r3, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	9107      	str	r1, [sp, #28]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	db01      	blt.n	8005ee8 <_svfiprintf_r+0x108>
 8005ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ee6:	e004      	b.n	8005ef2 <_svfiprintf_r+0x112>
 8005ee8:	425b      	negs	r3, r3
 8005eea:	60e3      	str	r3, [r4, #12]
 8005eec:	2302      	movs	r3, #2
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	782b      	ldrb	r3, [r5, #0]
 8005ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ef6:	d10a      	bne.n	8005f0e <_svfiprintf_r+0x12e>
 8005ef8:	786b      	ldrb	r3, [r5, #1]
 8005efa:	2b2a      	cmp	r3, #42	; 0x2a
 8005efc:	d135      	bne.n	8005f6a <_svfiprintf_r+0x18a>
 8005efe:	9b07      	ldr	r3, [sp, #28]
 8005f00:	3502      	adds	r5, #2
 8005f02:	1d1a      	adds	r2, r3, #4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	9207      	str	r2, [sp, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	db2b      	blt.n	8005f64 <_svfiprintf_r+0x184>
 8005f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f0e:	4e30      	ldr	r6, [pc, #192]	; (8005fd0 <_svfiprintf_r+0x1f0>)
 8005f10:	2203      	movs	r2, #3
 8005f12:	0030      	movs	r0, r6
 8005f14:	7829      	ldrb	r1, [r5, #0]
 8005f16:	f000 f9e5 	bl	80062e4 <memchr>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d006      	beq.n	8005f2c <_svfiprintf_r+0x14c>
 8005f1e:	2340      	movs	r3, #64	; 0x40
 8005f20:	1b80      	subs	r0, r0, r6
 8005f22:	4083      	lsls	r3, r0
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	3501      	adds	r5, #1
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	6023      	str	r3, [r4, #0]
 8005f2c:	7829      	ldrb	r1, [r5, #0]
 8005f2e:	2206      	movs	r2, #6
 8005f30:	4828      	ldr	r0, [pc, #160]	; (8005fd4 <_svfiprintf_r+0x1f4>)
 8005f32:	1c6e      	adds	r6, r5, #1
 8005f34:	7621      	strb	r1, [r4, #24]
 8005f36:	f000 f9d5 	bl	80062e4 <memchr>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d03c      	beq.n	8005fb8 <_svfiprintf_r+0x1d8>
 8005f3e:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <_svfiprintf_r+0x1f8>)
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d125      	bne.n	8005f90 <_svfiprintf_r+0x1b0>
 8005f44:	2207      	movs	r2, #7
 8005f46:	9b07      	ldr	r3, [sp, #28]
 8005f48:	3307      	adds	r3, #7
 8005f4a:	4393      	bics	r3, r2
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	9307      	str	r3, [sp, #28]
 8005f50:	6963      	ldr	r3, [r4, #20]
 8005f52:	9a04      	ldr	r2, [sp, #16]
 8005f54:	189b      	adds	r3, r3, r2
 8005f56:	6163      	str	r3, [r4, #20]
 8005f58:	e765      	b.n	8005e26 <_svfiprintf_r+0x46>
 8005f5a:	4343      	muls	r3, r0
 8005f5c:	0035      	movs	r5, r6
 8005f5e:	2101      	movs	r1, #1
 8005f60:	189b      	adds	r3, r3, r2
 8005f62:	e7a6      	b.n	8005eb2 <_svfiprintf_r+0xd2>
 8005f64:	2301      	movs	r3, #1
 8005f66:	425b      	negs	r3, r3
 8005f68:	e7d0      	b.n	8005f0c <_svfiprintf_r+0x12c>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	200a      	movs	r0, #10
 8005f6e:	001a      	movs	r2, r3
 8005f70:	3501      	adds	r5, #1
 8005f72:	6063      	str	r3, [r4, #4]
 8005f74:	7829      	ldrb	r1, [r5, #0]
 8005f76:	1c6e      	adds	r6, r5, #1
 8005f78:	3930      	subs	r1, #48	; 0x30
 8005f7a:	2909      	cmp	r1, #9
 8005f7c:	d903      	bls.n	8005f86 <_svfiprintf_r+0x1a6>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0c5      	beq.n	8005f0e <_svfiprintf_r+0x12e>
 8005f82:	9209      	str	r2, [sp, #36]	; 0x24
 8005f84:	e7c3      	b.n	8005f0e <_svfiprintf_r+0x12e>
 8005f86:	4342      	muls	r2, r0
 8005f88:	0035      	movs	r5, r6
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	1852      	adds	r2, r2, r1
 8005f8e:	e7f1      	b.n	8005f74 <_svfiprintf_r+0x194>
 8005f90:	ab07      	add	r3, sp, #28
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	003a      	movs	r2, r7
 8005f96:	0021      	movs	r1, r4
 8005f98:	4b10      	ldr	r3, [pc, #64]	; (8005fdc <_svfiprintf_r+0x1fc>)
 8005f9a:	9803      	ldr	r0, [sp, #12]
 8005f9c:	e000      	b.n	8005fa0 <_svfiprintf_r+0x1c0>
 8005f9e:	bf00      	nop
 8005fa0:	9004      	str	r0, [sp, #16]
 8005fa2:	9b04      	ldr	r3, [sp, #16]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	d1d3      	bne.n	8005f50 <_svfiprintf_r+0x170>
 8005fa8:	89bb      	ldrh	r3, [r7, #12]
 8005faa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005fac:	065b      	lsls	r3, r3, #25
 8005fae:	d400      	bmi.n	8005fb2 <_svfiprintf_r+0x1d2>
 8005fb0:	e72d      	b.n	8005e0e <_svfiprintf_r+0x2e>
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	4240      	negs	r0, r0
 8005fb6:	e72a      	b.n	8005e0e <_svfiprintf_r+0x2e>
 8005fb8:	ab07      	add	r3, sp, #28
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	003a      	movs	r2, r7
 8005fbe:	0021      	movs	r1, r4
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <_svfiprintf_r+0x1fc>)
 8005fc2:	9803      	ldr	r0, [sp, #12]
 8005fc4:	f000 f87c 	bl	80060c0 <_printf_i>
 8005fc8:	e7ea      	b.n	8005fa0 <_svfiprintf_r+0x1c0>
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	08007b98 	.word	0x08007b98
 8005fd0:	08007b9e 	.word	0x08007b9e
 8005fd4:	08007ba2 	.word	0x08007ba2
 8005fd8:	00000000 	.word	0x00000000
 8005fdc:	08005d1d 	.word	0x08005d1d

08005fe0 <_printf_common>:
 8005fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fe2:	0015      	movs	r5, r2
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	688a      	ldr	r2, [r1, #8]
 8005fe8:	690b      	ldr	r3, [r1, #16]
 8005fea:	000c      	movs	r4, r1
 8005fec:	9000      	str	r0, [sp, #0]
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	da00      	bge.n	8005ff4 <_printf_common+0x14>
 8005ff2:	0013      	movs	r3, r2
 8005ff4:	0022      	movs	r2, r4
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	3243      	adds	r2, #67	; 0x43
 8005ffa:	7812      	ldrb	r2, [r2, #0]
 8005ffc:	2a00      	cmp	r2, #0
 8005ffe:	d001      	beq.n	8006004 <_printf_common+0x24>
 8006000:	3301      	adds	r3, #1
 8006002:	602b      	str	r3, [r5, #0]
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	069b      	lsls	r3, r3, #26
 8006008:	d502      	bpl.n	8006010 <_printf_common+0x30>
 800600a:	682b      	ldr	r3, [r5, #0]
 800600c:	3302      	adds	r3, #2
 800600e:	602b      	str	r3, [r5, #0]
 8006010:	6822      	ldr	r2, [r4, #0]
 8006012:	2306      	movs	r3, #6
 8006014:	0017      	movs	r7, r2
 8006016:	401f      	ands	r7, r3
 8006018:	421a      	tst	r2, r3
 800601a:	d027      	beq.n	800606c <_printf_common+0x8c>
 800601c:	0023      	movs	r3, r4
 800601e:	3343      	adds	r3, #67	; 0x43
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	1e5a      	subs	r2, r3, #1
 8006024:	4193      	sbcs	r3, r2
 8006026:	6822      	ldr	r2, [r4, #0]
 8006028:	0692      	lsls	r2, r2, #26
 800602a:	d430      	bmi.n	800608e <_printf_common+0xae>
 800602c:	0022      	movs	r2, r4
 800602e:	9901      	ldr	r1, [sp, #4]
 8006030:	9800      	ldr	r0, [sp, #0]
 8006032:	9e08      	ldr	r6, [sp, #32]
 8006034:	3243      	adds	r2, #67	; 0x43
 8006036:	47b0      	blx	r6
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d025      	beq.n	8006088 <_printf_common+0xa8>
 800603c:	2306      	movs	r3, #6
 800603e:	6820      	ldr	r0, [r4, #0]
 8006040:	682a      	ldr	r2, [r5, #0]
 8006042:	68e1      	ldr	r1, [r4, #12]
 8006044:	2500      	movs	r5, #0
 8006046:	4003      	ands	r3, r0
 8006048:	2b04      	cmp	r3, #4
 800604a:	d103      	bne.n	8006054 <_printf_common+0x74>
 800604c:	1a8d      	subs	r5, r1, r2
 800604e:	43eb      	mvns	r3, r5
 8006050:	17db      	asrs	r3, r3, #31
 8006052:	401d      	ands	r5, r3
 8006054:	68a3      	ldr	r3, [r4, #8]
 8006056:	6922      	ldr	r2, [r4, #16]
 8006058:	4293      	cmp	r3, r2
 800605a:	dd01      	ble.n	8006060 <_printf_common+0x80>
 800605c:	1a9b      	subs	r3, r3, r2
 800605e:	18ed      	adds	r5, r5, r3
 8006060:	2700      	movs	r7, #0
 8006062:	42bd      	cmp	r5, r7
 8006064:	d120      	bne.n	80060a8 <_printf_common+0xc8>
 8006066:	2000      	movs	r0, #0
 8006068:	e010      	b.n	800608c <_printf_common+0xac>
 800606a:	3701      	adds	r7, #1
 800606c:	68e3      	ldr	r3, [r4, #12]
 800606e:	682a      	ldr	r2, [r5, #0]
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	42bb      	cmp	r3, r7
 8006074:	ddd2      	ble.n	800601c <_printf_common+0x3c>
 8006076:	0022      	movs	r2, r4
 8006078:	2301      	movs	r3, #1
 800607a:	9901      	ldr	r1, [sp, #4]
 800607c:	9800      	ldr	r0, [sp, #0]
 800607e:	9e08      	ldr	r6, [sp, #32]
 8006080:	3219      	adds	r2, #25
 8006082:	47b0      	blx	r6
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d1f0      	bne.n	800606a <_printf_common+0x8a>
 8006088:	2001      	movs	r0, #1
 800608a:	4240      	negs	r0, r0
 800608c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800608e:	2030      	movs	r0, #48	; 0x30
 8006090:	18e1      	adds	r1, r4, r3
 8006092:	3143      	adds	r1, #67	; 0x43
 8006094:	7008      	strb	r0, [r1, #0]
 8006096:	0021      	movs	r1, r4
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	3145      	adds	r1, #69	; 0x45
 800609c:	7809      	ldrb	r1, [r1, #0]
 800609e:	18a2      	adds	r2, r4, r2
 80060a0:	3243      	adds	r2, #67	; 0x43
 80060a2:	3302      	adds	r3, #2
 80060a4:	7011      	strb	r1, [r2, #0]
 80060a6:	e7c1      	b.n	800602c <_printf_common+0x4c>
 80060a8:	0022      	movs	r2, r4
 80060aa:	2301      	movs	r3, #1
 80060ac:	9901      	ldr	r1, [sp, #4]
 80060ae:	9800      	ldr	r0, [sp, #0]
 80060b0:	9e08      	ldr	r6, [sp, #32]
 80060b2:	321a      	adds	r2, #26
 80060b4:	47b0      	blx	r6
 80060b6:	1c43      	adds	r3, r0, #1
 80060b8:	d0e6      	beq.n	8006088 <_printf_common+0xa8>
 80060ba:	3701      	adds	r7, #1
 80060bc:	e7d1      	b.n	8006062 <_printf_common+0x82>
	...

080060c0 <_printf_i>:
 80060c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c2:	b08b      	sub	sp, #44	; 0x2c
 80060c4:	9206      	str	r2, [sp, #24]
 80060c6:	000a      	movs	r2, r1
 80060c8:	3243      	adds	r2, #67	; 0x43
 80060ca:	9307      	str	r3, [sp, #28]
 80060cc:	9005      	str	r0, [sp, #20]
 80060ce:	9204      	str	r2, [sp, #16]
 80060d0:	7e0a      	ldrb	r2, [r1, #24]
 80060d2:	000c      	movs	r4, r1
 80060d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060d6:	2a78      	cmp	r2, #120	; 0x78
 80060d8:	d807      	bhi.n	80060ea <_printf_i+0x2a>
 80060da:	2a62      	cmp	r2, #98	; 0x62
 80060dc:	d809      	bhi.n	80060f2 <_printf_i+0x32>
 80060de:	2a00      	cmp	r2, #0
 80060e0:	d100      	bne.n	80060e4 <_printf_i+0x24>
 80060e2:	e0c1      	b.n	8006268 <_printf_i+0x1a8>
 80060e4:	2a58      	cmp	r2, #88	; 0x58
 80060e6:	d100      	bne.n	80060ea <_printf_i+0x2a>
 80060e8:	e08c      	b.n	8006204 <_printf_i+0x144>
 80060ea:	0026      	movs	r6, r4
 80060ec:	3642      	adds	r6, #66	; 0x42
 80060ee:	7032      	strb	r2, [r6, #0]
 80060f0:	e022      	b.n	8006138 <_printf_i+0x78>
 80060f2:	0010      	movs	r0, r2
 80060f4:	3863      	subs	r0, #99	; 0x63
 80060f6:	2815      	cmp	r0, #21
 80060f8:	d8f7      	bhi.n	80060ea <_printf_i+0x2a>
 80060fa:	f7fa f805 	bl	8000108 <__gnu_thumb1_case_shi>
 80060fe:	0016      	.short	0x0016
 8006100:	fff6001f 	.word	0xfff6001f
 8006104:	fff6fff6 	.word	0xfff6fff6
 8006108:	001ffff6 	.word	0x001ffff6
 800610c:	fff6fff6 	.word	0xfff6fff6
 8006110:	fff6fff6 	.word	0xfff6fff6
 8006114:	003600a8 	.word	0x003600a8
 8006118:	fff6009a 	.word	0xfff6009a
 800611c:	00b9fff6 	.word	0x00b9fff6
 8006120:	0036fff6 	.word	0x0036fff6
 8006124:	fff6fff6 	.word	0xfff6fff6
 8006128:	009e      	.short	0x009e
 800612a:	0026      	movs	r6, r4
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	3642      	adds	r6, #66	; 0x42
 8006130:	1d11      	adds	r1, r2, #4
 8006132:	6019      	str	r1, [r3, #0]
 8006134:	6813      	ldr	r3, [r2, #0]
 8006136:	7033      	strb	r3, [r6, #0]
 8006138:	2301      	movs	r3, #1
 800613a:	e0a7      	b.n	800628c <_printf_i+0x1cc>
 800613c:	6808      	ldr	r0, [r1, #0]
 800613e:	6819      	ldr	r1, [r3, #0]
 8006140:	1d0a      	adds	r2, r1, #4
 8006142:	0605      	lsls	r5, r0, #24
 8006144:	d50b      	bpl.n	800615e <_printf_i+0x9e>
 8006146:	680d      	ldr	r5, [r1, #0]
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	2d00      	cmp	r5, #0
 800614c:	da03      	bge.n	8006156 <_printf_i+0x96>
 800614e:	232d      	movs	r3, #45	; 0x2d
 8006150:	9a04      	ldr	r2, [sp, #16]
 8006152:	426d      	negs	r5, r5
 8006154:	7013      	strb	r3, [r2, #0]
 8006156:	4b61      	ldr	r3, [pc, #388]	; (80062dc <_printf_i+0x21c>)
 8006158:	270a      	movs	r7, #10
 800615a:	9303      	str	r3, [sp, #12]
 800615c:	e01b      	b.n	8006196 <_printf_i+0xd6>
 800615e:	680d      	ldr	r5, [r1, #0]
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	0641      	lsls	r1, r0, #25
 8006164:	d5f1      	bpl.n	800614a <_printf_i+0x8a>
 8006166:	b22d      	sxth	r5, r5
 8006168:	e7ef      	b.n	800614a <_printf_i+0x8a>
 800616a:	680d      	ldr	r5, [r1, #0]
 800616c:	6819      	ldr	r1, [r3, #0]
 800616e:	1d08      	adds	r0, r1, #4
 8006170:	6018      	str	r0, [r3, #0]
 8006172:	062e      	lsls	r6, r5, #24
 8006174:	d501      	bpl.n	800617a <_printf_i+0xba>
 8006176:	680d      	ldr	r5, [r1, #0]
 8006178:	e003      	b.n	8006182 <_printf_i+0xc2>
 800617a:	066d      	lsls	r5, r5, #25
 800617c:	d5fb      	bpl.n	8006176 <_printf_i+0xb6>
 800617e:	680d      	ldr	r5, [r1, #0]
 8006180:	b2ad      	uxth	r5, r5
 8006182:	4b56      	ldr	r3, [pc, #344]	; (80062dc <_printf_i+0x21c>)
 8006184:	2708      	movs	r7, #8
 8006186:	9303      	str	r3, [sp, #12]
 8006188:	2a6f      	cmp	r2, #111	; 0x6f
 800618a:	d000      	beq.n	800618e <_printf_i+0xce>
 800618c:	3702      	adds	r7, #2
 800618e:	0023      	movs	r3, r4
 8006190:	2200      	movs	r2, #0
 8006192:	3343      	adds	r3, #67	; 0x43
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	6863      	ldr	r3, [r4, #4]
 8006198:	60a3      	str	r3, [r4, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	db03      	blt.n	80061a6 <_printf_i+0xe6>
 800619e:	2204      	movs	r2, #4
 80061a0:	6821      	ldr	r1, [r4, #0]
 80061a2:	4391      	bics	r1, r2
 80061a4:	6021      	str	r1, [r4, #0]
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	d102      	bne.n	80061b0 <_printf_i+0xf0>
 80061aa:	9e04      	ldr	r6, [sp, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00c      	beq.n	80061ca <_printf_i+0x10a>
 80061b0:	9e04      	ldr	r6, [sp, #16]
 80061b2:	0028      	movs	r0, r5
 80061b4:	0039      	movs	r1, r7
 80061b6:	f7fa f837 	bl	8000228 <__aeabi_uidivmod>
 80061ba:	9b03      	ldr	r3, [sp, #12]
 80061bc:	3e01      	subs	r6, #1
 80061be:	5c5b      	ldrb	r3, [r3, r1]
 80061c0:	7033      	strb	r3, [r6, #0]
 80061c2:	002b      	movs	r3, r5
 80061c4:	0005      	movs	r5, r0
 80061c6:	429f      	cmp	r7, r3
 80061c8:	d9f3      	bls.n	80061b2 <_printf_i+0xf2>
 80061ca:	2f08      	cmp	r7, #8
 80061cc:	d109      	bne.n	80061e2 <_printf_i+0x122>
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	07db      	lsls	r3, r3, #31
 80061d2:	d506      	bpl.n	80061e2 <_printf_i+0x122>
 80061d4:	6863      	ldr	r3, [r4, #4]
 80061d6:	6922      	ldr	r2, [r4, #16]
 80061d8:	4293      	cmp	r3, r2
 80061da:	dc02      	bgt.n	80061e2 <_printf_i+0x122>
 80061dc:	2330      	movs	r3, #48	; 0x30
 80061de:	3e01      	subs	r6, #1
 80061e0:	7033      	strb	r3, [r6, #0]
 80061e2:	9b04      	ldr	r3, [sp, #16]
 80061e4:	1b9b      	subs	r3, r3, r6
 80061e6:	6123      	str	r3, [r4, #16]
 80061e8:	9b07      	ldr	r3, [sp, #28]
 80061ea:	0021      	movs	r1, r4
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	9805      	ldr	r0, [sp, #20]
 80061f0:	9b06      	ldr	r3, [sp, #24]
 80061f2:	aa09      	add	r2, sp, #36	; 0x24
 80061f4:	f7ff fef4 	bl	8005fe0 <_printf_common>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d14c      	bne.n	8006296 <_printf_i+0x1d6>
 80061fc:	2001      	movs	r0, #1
 80061fe:	4240      	negs	r0, r0
 8006200:	b00b      	add	sp, #44	; 0x2c
 8006202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006204:	3145      	adds	r1, #69	; 0x45
 8006206:	700a      	strb	r2, [r1, #0]
 8006208:	4a34      	ldr	r2, [pc, #208]	; (80062dc <_printf_i+0x21c>)
 800620a:	9203      	str	r2, [sp, #12]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	6821      	ldr	r1, [r4, #0]
 8006210:	ca20      	ldmia	r2!, {r5}
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	0608      	lsls	r0, r1, #24
 8006216:	d516      	bpl.n	8006246 <_printf_i+0x186>
 8006218:	07cb      	lsls	r3, r1, #31
 800621a:	d502      	bpl.n	8006222 <_printf_i+0x162>
 800621c:	2320      	movs	r3, #32
 800621e:	4319      	orrs	r1, r3
 8006220:	6021      	str	r1, [r4, #0]
 8006222:	2710      	movs	r7, #16
 8006224:	2d00      	cmp	r5, #0
 8006226:	d1b2      	bne.n	800618e <_printf_i+0xce>
 8006228:	2320      	movs	r3, #32
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	439a      	bics	r2, r3
 800622e:	6022      	str	r2, [r4, #0]
 8006230:	e7ad      	b.n	800618e <_printf_i+0xce>
 8006232:	2220      	movs	r2, #32
 8006234:	6809      	ldr	r1, [r1, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	6022      	str	r2, [r4, #0]
 800623a:	0022      	movs	r2, r4
 800623c:	2178      	movs	r1, #120	; 0x78
 800623e:	3245      	adds	r2, #69	; 0x45
 8006240:	7011      	strb	r1, [r2, #0]
 8006242:	4a27      	ldr	r2, [pc, #156]	; (80062e0 <_printf_i+0x220>)
 8006244:	e7e1      	b.n	800620a <_printf_i+0x14a>
 8006246:	0648      	lsls	r0, r1, #25
 8006248:	d5e6      	bpl.n	8006218 <_printf_i+0x158>
 800624a:	b2ad      	uxth	r5, r5
 800624c:	e7e4      	b.n	8006218 <_printf_i+0x158>
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	680d      	ldr	r5, [r1, #0]
 8006252:	1d10      	adds	r0, r2, #4
 8006254:	6949      	ldr	r1, [r1, #20]
 8006256:	6018      	str	r0, [r3, #0]
 8006258:	6813      	ldr	r3, [r2, #0]
 800625a:	062e      	lsls	r6, r5, #24
 800625c:	d501      	bpl.n	8006262 <_printf_i+0x1a2>
 800625e:	6019      	str	r1, [r3, #0]
 8006260:	e002      	b.n	8006268 <_printf_i+0x1a8>
 8006262:	066d      	lsls	r5, r5, #25
 8006264:	d5fb      	bpl.n	800625e <_printf_i+0x19e>
 8006266:	8019      	strh	r1, [r3, #0]
 8006268:	2300      	movs	r3, #0
 800626a:	9e04      	ldr	r6, [sp, #16]
 800626c:	6123      	str	r3, [r4, #16]
 800626e:	e7bb      	b.n	80061e8 <_printf_i+0x128>
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	1d11      	adds	r1, r2, #4
 8006274:	6019      	str	r1, [r3, #0]
 8006276:	6816      	ldr	r6, [r2, #0]
 8006278:	2100      	movs	r1, #0
 800627a:	0030      	movs	r0, r6
 800627c:	6862      	ldr	r2, [r4, #4]
 800627e:	f000 f831 	bl	80062e4 <memchr>
 8006282:	2800      	cmp	r0, #0
 8006284:	d001      	beq.n	800628a <_printf_i+0x1ca>
 8006286:	1b80      	subs	r0, r0, r6
 8006288:	6060      	str	r0, [r4, #4]
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	6123      	str	r3, [r4, #16]
 800628e:	2300      	movs	r3, #0
 8006290:	9a04      	ldr	r2, [sp, #16]
 8006292:	7013      	strb	r3, [r2, #0]
 8006294:	e7a8      	b.n	80061e8 <_printf_i+0x128>
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	0032      	movs	r2, r6
 800629a:	9906      	ldr	r1, [sp, #24]
 800629c:	9805      	ldr	r0, [sp, #20]
 800629e:	9d07      	ldr	r5, [sp, #28]
 80062a0:	47a8      	blx	r5
 80062a2:	1c43      	adds	r3, r0, #1
 80062a4:	d0aa      	beq.n	80061fc <_printf_i+0x13c>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	079b      	lsls	r3, r3, #30
 80062aa:	d415      	bmi.n	80062d8 <_printf_i+0x218>
 80062ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ae:	68e0      	ldr	r0, [r4, #12]
 80062b0:	4298      	cmp	r0, r3
 80062b2:	daa5      	bge.n	8006200 <_printf_i+0x140>
 80062b4:	0018      	movs	r0, r3
 80062b6:	e7a3      	b.n	8006200 <_printf_i+0x140>
 80062b8:	0022      	movs	r2, r4
 80062ba:	2301      	movs	r3, #1
 80062bc:	9906      	ldr	r1, [sp, #24]
 80062be:	9805      	ldr	r0, [sp, #20]
 80062c0:	9e07      	ldr	r6, [sp, #28]
 80062c2:	3219      	adds	r2, #25
 80062c4:	47b0      	blx	r6
 80062c6:	1c43      	adds	r3, r0, #1
 80062c8:	d098      	beq.n	80061fc <_printf_i+0x13c>
 80062ca:	3501      	adds	r5, #1
 80062cc:	68e3      	ldr	r3, [r4, #12]
 80062ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	42ab      	cmp	r3, r5
 80062d4:	dcf0      	bgt.n	80062b8 <_printf_i+0x1f8>
 80062d6:	e7e9      	b.n	80062ac <_printf_i+0x1ec>
 80062d8:	2500      	movs	r5, #0
 80062da:	e7f7      	b.n	80062cc <_printf_i+0x20c>
 80062dc:	08007ba9 	.word	0x08007ba9
 80062e0:	08007bba 	.word	0x08007bba

080062e4 <memchr>:
 80062e4:	b2c9      	uxtb	r1, r1
 80062e6:	1882      	adds	r2, r0, r2
 80062e8:	4290      	cmp	r0, r2
 80062ea:	d101      	bne.n	80062f0 <memchr+0xc>
 80062ec:	2000      	movs	r0, #0
 80062ee:	4770      	bx	lr
 80062f0:	7803      	ldrb	r3, [r0, #0]
 80062f2:	428b      	cmp	r3, r1
 80062f4:	d0fb      	beq.n	80062ee <memchr+0xa>
 80062f6:	3001      	adds	r0, #1
 80062f8:	e7f6      	b.n	80062e8 <memchr+0x4>

080062fa <memcpy>:
 80062fa:	2300      	movs	r3, #0
 80062fc:	b510      	push	{r4, lr}
 80062fe:	429a      	cmp	r2, r3
 8006300:	d100      	bne.n	8006304 <memcpy+0xa>
 8006302:	bd10      	pop	{r4, pc}
 8006304:	5ccc      	ldrb	r4, [r1, r3]
 8006306:	54c4      	strb	r4, [r0, r3]
 8006308:	3301      	adds	r3, #1
 800630a:	e7f8      	b.n	80062fe <memcpy+0x4>

0800630c <memmove>:
 800630c:	b510      	push	{r4, lr}
 800630e:	4288      	cmp	r0, r1
 8006310:	d902      	bls.n	8006318 <memmove+0xc>
 8006312:	188b      	adds	r3, r1, r2
 8006314:	4298      	cmp	r0, r3
 8006316:	d303      	bcc.n	8006320 <memmove+0x14>
 8006318:	2300      	movs	r3, #0
 800631a:	e007      	b.n	800632c <memmove+0x20>
 800631c:	5c8b      	ldrb	r3, [r1, r2]
 800631e:	5483      	strb	r3, [r0, r2]
 8006320:	3a01      	subs	r2, #1
 8006322:	d2fb      	bcs.n	800631c <memmove+0x10>
 8006324:	bd10      	pop	{r4, pc}
 8006326:	5ccc      	ldrb	r4, [r1, r3]
 8006328:	54c4      	strb	r4, [r0, r3]
 800632a:	3301      	adds	r3, #1
 800632c:	429a      	cmp	r2, r3
 800632e:	d1fa      	bne.n	8006326 <memmove+0x1a>
 8006330:	e7f8      	b.n	8006324 <memmove+0x18>
	...

08006334 <_free_r>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	0005      	movs	r5, r0
 8006338:	2900      	cmp	r1, #0
 800633a:	d010      	beq.n	800635e <_free_r+0x2a>
 800633c:	1f0c      	subs	r4, r1, #4
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	da00      	bge.n	8006346 <_free_r+0x12>
 8006344:	18e4      	adds	r4, r4, r3
 8006346:	0028      	movs	r0, r5
 8006348:	f000 f918 	bl	800657c <__malloc_lock>
 800634c:	4a1d      	ldr	r2, [pc, #116]	; (80063c4 <_free_r+0x90>)
 800634e:	6813      	ldr	r3, [r2, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d105      	bne.n	8006360 <_free_r+0x2c>
 8006354:	6063      	str	r3, [r4, #4]
 8006356:	6014      	str	r4, [r2, #0]
 8006358:	0028      	movs	r0, r5
 800635a:	f000 f917 	bl	800658c <__malloc_unlock>
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	42a3      	cmp	r3, r4
 8006362:	d908      	bls.n	8006376 <_free_r+0x42>
 8006364:	6821      	ldr	r1, [r4, #0]
 8006366:	1860      	adds	r0, r4, r1
 8006368:	4283      	cmp	r3, r0
 800636a:	d1f3      	bne.n	8006354 <_free_r+0x20>
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	1841      	adds	r1, r0, r1
 8006372:	6021      	str	r1, [r4, #0]
 8006374:	e7ee      	b.n	8006354 <_free_r+0x20>
 8006376:	001a      	movs	r2, r3
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <_free_r+0x4e>
 800637e:	42a3      	cmp	r3, r4
 8006380:	d9f9      	bls.n	8006376 <_free_r+0x42>
 8006382:	6811      	ldr	r1, [r2, #0]
 8006384:	1850      	adds	r0, r2, r1
 8006386:	42a0      	cmp	r0, r4
 8006388:	d10b      	bne.n	80063a2 <_free_r+0x6e>
 800638a:	6820      	ldr	r0, [r4, #0]
 800638c:	1809      	adds	r1, r1, r0
 800638e:	1850      	adds	r0, r2, r1
 8006390:	6011      	str	r1, [r2, #0]
 8006392:	4283      	cmp	r3, r0
 8006394:	d1e0      	bne.n	8006358 <_free_r+0x24>
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	1841      	adds	r1, r0, r1
 800639c:	6011      	str	r1, [r2, #0]
 800639e:	6053      	str	r3, [r2, #4]
 80063a0:	e7da      	b.n	8006358 <_free_r+0x24>
 80063a2:	42a0      	cmp	r0, r4
 80063a4:	d902      	bls.n	80063ac <_free_r+0x78>
 80063a6:	230c      	movs	r3, #12
 80063a8:	602b      	str	r3, [r5, #0]
 80063aa:	e7d5      	b.n	8006358 <_free_r+0x24>
 80063ac:	6821      	ldr	r1, [r4, #0]
 80063ae:	1860      	adds	r0, r4, r1
 80063b0:	4283      	cmp	r3, r0
 80063b2:	d103      	bne.n	80063bc <_free_r+0x88>
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	1841      	adds	r1, r0, r1
 80063ba:	6021      	str	r1, [r4, #0]
 80063bc:	6063      	str	r3, [r4, #4]
 80063be:	6054      	str	r4, [r2, #4]
 80063c0:	e7ca      	b.n	8006358 <_free_r+0x24>
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	2000056c 	.word	0x2000056c

080063c8 <sbrk_aligned>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4e0f      	ldr	r6, [pc, #60]	; (8006408 <sbrk_aligned+0x40>)
 80063cc:	000d      	movs	r5, r1
 80063ce:	6831      	ldr	r1, [r6, #0]
 80063d0:	0004      	movs	r4, r0
 80063d2:	2900      	cmp	r1, #0
 80063d4:	d102      	bne.n	80063dc <sbrk_aligned+0x14>
 80063d6:	f000 f8bf 	bl	8006558 <_sbrk_r>
 80063da:	6030      	str	r0, [r6, #0]
 80063dc:	0029      	movs	r1, r5
 80063de:	0020      	movs	r0, r4
 80063e0:	f000 f8ba 	bl	8006558 <_sbrk_r>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d00a      	beq.n	80063fe <sbrk_aligned+0x36>
 80063e8:	2303      	movs	r3, #3
 80063ea:	1cc5      	adds	r5, r0, #3
 80063ec:	439d      	bics	r5, r3
 80063ee:	42a8      	cmp	r0, r5
 80063f0:	d007      	beq.n	8006402 <sbrk_aligned+0x3a>
 80063f2:	1a29      	subs	r1, r5, r0
 80063f4:	0020      	movs	r0, r4
 80063f6:	f000 f8af 	bl	8006558 <_sbrk_r>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d101      	bne.n	8006402 <sbrk_aligned+0x3a>
 80063fe:	2501      	movs	r5, #1
 8006400:	426d      	negs	r5, r5
 8006402:	0028      	movs	r0, r5
 8006404:	bd70      	pop	{r4, r5, r6, pc}
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	20000570 	.word	0x20000570

0800640c <_malloc_r>:
 800640c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800640e:	2203      	movs	r2, #3
 8006410:	1ccb      	adds	r3, r1, #3
 8006412:	4393      	bics	r3, r2
 8006414:	3308      	adds	r3, #8
 8006416:	0006      	movs	r6, r0
 8006418:	001f      	movs	r7, r3
 800641a:	2b0c      	cmp	r3, #12
 800641c:	d232      	bcs.n	8006484 <_malloc_r+0x78>
 800641e:	270c      	movs	r7, #12
 8006420:	42b9      	cmp	r1, r7
 8006422:	d831      	bhi.n	8006488 <_malloc_r+0x7c>
 8006424:	0030      	movs	r0, r6
 8006426:	f000 f8a9 	bl	800657c <__malloc_lock>
 800642a:	4d32      	ldr	r5, [pc, #200]	; (80064f4 <_malloc_r+0xe8>)
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	001c      	movs	r4, r3
 8006430:	2c00      	cmp	r4, #0
 8006432:	d12e      	bne.n	8006492 <_malloc_r+0x86>
 8006434:	0039      	movs	r1, r7
 8006436:	0030      	movs	r0, r6
 8006438:	f7ff ffc6 	bl	80063c8 <sbrk_aligned>
 800643c:	0004      	movs	r4, r0
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	d11e      	bne.n	8006480 <_malloc_r+0x74>
 8006442:	682c      	ldr	r4, [r5, #0]
 8006444:	0025      	movs	r5, r4
 8006446:	2d00      	cmp	r5, #0
 8006448:	d14a      	bne.n	80064e0 <_malloc_r+0xd4>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	0029      	movs	r1, r5
 800644e:	18e3      	adds	r3, r4, r3
 8006450:	0030      	movs	r0, r6
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	f000 f880 	bl	8006558 <_sbrk_r>
 8006458:	9b01      	ldr	r3, [sp, #4]
 800645a:	4283      	cmp	r3, r0
 800645c:	d143      	bne.n	80064e6 <_malloc_r+0xda>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	3703      	adds	r7, #3
 8006462:	1aff      	subs	r7, r7, r3
 8006464:	2303      	movs	r3, #3
 8006466:	439f      	bics	r7, r3
 8006468:	3708      	adds	r7, #8
 800646a:	2f0c      	cmp	r7, #12
 800646c:	d200      	bcs.n	8006470 <_malloc_r+0x64>
 800646e:	270c      	movs	r7, #12
 8006470:	0039      	movs	r1, r7
 8006472:	0030      	movs	r0, r6
 8006474:	f7ff ffa8 	bl	80063c8 <sbrk_aligned>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d034      	beq.n	80064e6 <_malloc_r+0xda>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	19df      	adds	r7, r3, r7
 8006480:	6027      	str	r7, [r4, #0]
 8006482:	e013      	b.n	80064ac <_malloc_r+0xa0>
 8006484:	2b00      	cmp	r3, #0
 8006486:	dacb      	bge.n	8006420 <_malloc_r+0x14>
 8006488:	230c      	movs	r3, #12
 800648a:	2500      	movs	r5, #0
 800648c:	6033      	str	r3, [r6, #0]
 800648e:	0028      	movs	r0, r5
 8006490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	1bd1      	subs	r1, r2, r7
 8006496:	d420      	bmi.n	80064da <_malloc_r+0xce>
 8006498:	290b      	cmp	r1, #11
 800649a:	d917      	bls.n	80064cc <_malloc_r+0xc0>
 800649c:	19e2      	adds	r2, r4, r7
 800649e:	6027      	str	r7, [r4, #0]
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	d111      	bne.n	80064c8 <_malloc_r+0xbc>
 80064a4:	602a      	str	r2, [r5, #0]
 80064a6:	6863      	ldr	r3, [r4, #4]
 80064a8:	6011      	str	r1, [r2, #0]
 80064aa:	6053      	str	r3, [r2, #4]
 80064ac:	0030      	movs	r0, r6
 80064ae:	0025      	movs	r5, r4
 80064b0:	f000 f86c 	bl	800658c <__malloc_unlock>
 80064b4:	2207      	movs	r2, #7
 80064b6:	350b      	adds	r5, #11
 80064b8:	1d23      	adds	r3, r4, #4
 80064ba:	4395      	bics	r5, r2
 80064bc:	1aea      	subs	r2, r5, r3
 80064be:	429d      	cmp	r5, r3
 80064c0:	d0e5      	beq.n	800648e <_malloc_r+0x82>
 80064c2:	1b5b      	subs	r3, r3, r5
 80064c4:	50a3      	str	r3, [r4, r2]
 80064c6:	e7e2      	b.n	800648e <_malloc_r+0x82>
 80064c8:	605a      	str	r2, [r3, #4]
 80064ca:	e7ec      	b.n	80064a6 <_malloc_r+0x9a>
 80064cc:	6862      	ldr	r2, [r4, #4]
 80064ce:	42a3      	cmp	r3, r4
 80064d0:	d101      	bne.n	80064d6 <_malloc_r+0xca>
 80064d2:	602a      	str	r2, [r5, #0]
 80064d4:	e7ea      	b.n	80064ac <_malloc_r+0xa0>
 80064d6:	605a      	str	r2, [r3, #4]
 80064d8:	e7e8      	b.n	80064ac <_malloc_r+0xa0>
 80064da:	0023      	movs	r3, r4
 80064dc:	6864      	ldr	r4, [r4, #4]
 80064de:	e7a7      	b.n	8006430 <_malloc_r+0x24>
 80064e0:	002c      	movs	r4, r5
 80064e2:	686d      	ldr	r5, [r5, #4]
 80064e4:	e7af      	b.n	8006446 <_malloc_r+0x3a>
 80064e6:	230c      	movs	r3, #12
 80064e8:	0030      	movs	r0, r6
 80064ea:	6033      	str	r3, [r6, #0]
 80064ec:	f000 f84e 	bl	800658c <__malloc_unlock>
 80064f0:	e7cd      	b.n	800648e <_malloc_r+0x82>
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	2000056c 	.word	0x2000056c

080064f8 <_realloc_r>:
 80064f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064fa:	0007      	movs	r7, r0
 80064fc:	000e      	movs	r6, r1
 80064fe:	0014      	movs	r4, r2
 8006500:	2900      	cmp	r1, #0
 8006502:	d105      	bne.n	8006510 <_realloc_r+0x18>
 8006504:	0011      	movs	r1, r2
 8006506:	f7ff ff81 	bl	800640c <_malloc_r>
 800650a:	0005      	movs	r5, r0
 800650c:	0028      	movs	r0, r5
 800650e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006510:	2a00      	cmp	r2, #0
 8006512:	d103      	bne.n	800651c <_realloc_r+0x24>
 8006514:	f7ff ff0e 	bl	8006334 <_free_r>
 8006518:	0025      	movs	r5, r4
 800651a:	e7f7      	b.n	800650c <_realloc_r+0x14>
 800651c:	f000 f83e 	bl	800659c <_malloc_usable_size_r>
 8006520:	9001      	str	r0, [sp, #4]
 8006522:	4284      	cmp	r4, r0
 8006524:	d803      	bhi.n	800652e <_realloc_r+0x36>
 8006526:	0035      	movs	r5, r6
 8006528:	0843      	lsrs	r3, r0, #1
 800652a:	42a3      	cmp	r3, r4
 800652c:	d3ee      	bcc.n	800650c <_realloc_r+0x14>
 800652e:	0021      	movs	r1, r4
 8006530:	0038      	movs	r0, r7
 8006532:	f7ff ff6b 	bl	800640c <_malloc_r>
 8006536:	1e05      	subs	r5, r0, #0
 8006538:	d0e8      	beq.n	800650c <_realloc_r+0x14>
 800653a:	9b01      	ldr	r3, [sp, #4]
 800653c:	0022      	movs	r2, r4
 800653e:	429c      	cmp	r4, r3
 8006540:	d900      	bls.n	8006544 <_realloc_r+0x4c>
 8006542:	001a      	movs	r2, r3
 8006544:	0031      	movs	r1, r6
 8006546:	0028      	movs	r0, r5
 8006548:	f7ff fed7 	bl	80062fa <memcpy>
 800654c:	0031      	movs	r1, r6
 800654e:	0038      	movs	r0, r7
 8006550:	f7ff fef0 	bl	8006334 <_free_r>
 8006554:	e7da      	b.n	800650c <_realloc_r+0x14>
	...

08006558 <_sbrk_r>:
 8006558:	2300      	movs	r3, #0
 800655a:	b570      	push	{r4, r5, r6, lr}
 800655c:	4d06      	ldr	r5, [pc, #24]	; (8006578 <_sbrk_r+0x20>)
 800655e:	0004      	movs	r4, r0
 8006560:	0008      	movs	r0, r1
 8006562:	602b      	str	r3, [r5, #0]
 8006564:	f7fb fe30 	bl	80021c8 <_sbrk>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d103      	bne.n	8006574 <_sbrk_r+0x1c>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d000      	beq.n	8006574 <_sbrk_r+0x1c>
 8006572:	6023      	str	r3, [r4, #0]
 8006574:	bd70      	pop	{r4, r5, r6, pc}
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	20000574 	.word	0x20000574

0800657c <__malloc_lock>:
 800657c:	b510      	push	{r4, lr}
 800657e:	4802      	ldr	r0, [pc, #8]	; (8006588 <__malloc_lock+0xc>)
 8006580:	f000 f814 	bl	80065ac <__retarget_lock_acquire_recursive>
 8006584:	bd10      	pop	{r4, pc}
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	20000578 	.word	0x20000578

0800658c <__malloc_unlock>:
 800658c:	b510      	push	{r4, lr}
 800658e:	4802      	ldr	r0, [pc, #8]	; (8006598 <__malloc_unlock+0xc>)
 8006590:	f000 f80d 	bl	80065ae <__retarget_lock_release_recursive>
 8006594:	bd10      	pop	{r4, pc}
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	20000578 	.word	0x20000578

0800659c <_malloc_usable_size_r>:
 800659c:	1f0b      	subs	r3, r1, #4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	1f18      	subs	r0, r3, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	da01      	bge.n	80065aa <_malloc_usable_size_r+0xe>
 80065a6:	580b      	ldr	r3, [r1, r0]
 80065a8:	18c0      	adds	r0, r0, r3
 80065aa:	4770      	bx	lr

080065ac <__retarget_lock_acquire_recursive>:
 80065ac:	4770      	bx	lr

080065ae <__retarget_lock_release_recursive>:
 80065ae:	4770      	bx	lr

080065b0 <_init>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b6:	bc08      	pop	{r3}
 80065b8:	469e      	mov	lr, r3
 80065ba:	4770      	bx	lr

080065bc <_fini>:
 80065bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c2:	bc08      	pop	{r3}
 80065c4:	469e      	mov	lr, r3
 80065c6:	4770      	bx	lr
